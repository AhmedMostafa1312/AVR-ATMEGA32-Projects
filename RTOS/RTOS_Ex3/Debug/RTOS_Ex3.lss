
RTOS_Ex3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000027ca  0000285e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002f9  00800074  00800074  00002872  2**0
                  ALLOC
  3 .stab         00004434  00000000  00000000  00002874  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000296a  00000000  00000000  00006ca8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 55 08 	jmp	0x10aa	; 0x10aa <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ec       	ldi	r30, 0xCA	; 202
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 36       	cpi	r26, 0x6D	; 109
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 e3 13 	jmp	0x27c6	; 0x27c6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
      92:	af 92       	push	r10
      94:	bf 92       	push	r11
      96:	cf 92       	push	r12
      98:	df 92       	push	r13
      9a:	ef 92       	push	r14
      9c:	ff 92       	push	r15
      9e:	0f 93       	push	r16
      a0:	df 93       	push	r29
      a2:	cf 93       	push	r28
      a4:	cd b7       	in	r28, 0x3d	; 61
      a6:	de b7       	in	r29, 0x3e	; 62
      a8:	81 e0       	ldi	r24, 0x01	; 1
      aa:	60 e0       	ldi	r22, 0x00	; 0
      ac:	0e 94 58 08 	call	0x10b0	; 0x10b0 <xQueueCreate>
      b0:	90 93 6c 03 	sts	0x036C, r25
      b4:	80 93 6b 03 	sts	0x036B, r24
      b8:	80 91 6b 03 	lds	r24, 0x036B
      bc:	90 91 6c 03 	lds	r25, 0x036C
      c0:	00 97       	sbiw	r24, 0x00	; 0
      c2:	59 f0       	breq	.+22     	; 0xda <main+0x48>
      c4:	80 91 6b 03 	lds	r24, 0x036B
      c8:	90 91 6c 03 	lds	r25, 0x036C
      cc:	60 e0       	ldi	r22, 0x00	; 0
      ce:	70 e0       	ldi	r23, 0x00	; 0
      d0:	40 e0       	ldi	r20, 0x00	; 0
      d2:	50 e0       	ldi	r21, 0x00	; 0
      d4:	20 e0       	ldi	r18, 0x00	; 0
      d6:	0e 94 01 09 	call	0x1202	; 0x1202 <xQueueGenericSend>
      da:	20 e6       	ldi	r18, 0x60	; 96
      dc:	30 e0       	ldi	r19, 0x00	; 0
      de:	8f e9       	ldi	r24, 0x9F	; 159
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	b9 01       	movw	r22, r18
      e4:	40 e5       	ldi	r20, 0x50	; 80
      e6:	50 e0       	ldi	r21, 0x00	; 0
      e8:	20 e0       	ldi	r18, 0x00	; 0
      ea:	30 e0       	ldi	r19, 0x00	; 0
      ec:	00 e0       	ldi	r16, 0x00	; 0
      ee:	ee 24       	eor	r14, r14
      f0:	ff 24       	eor	r15, r15
      f2:	cc 24       	eor	r12, r12
      f4:	dd 24       	eor	r13, r13
      f6:	aa 24       	eor	r10, r10
      f8:	bb 24       	eor	r11, r11
      fa:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <xTaskGenericCreate>
      fe:	26 e6       	ldi	r18, 0x66	; 102
     100:	30 e0       	ldi	r19, 0x00	; 0
     102:	88 ed       	ldi	r24, 0xD8	; 216
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	b9 01       	movw	r22, r18
     108:	40 e5       	ldi	r20, 0x50	; 80
     10a:	50 e0       	ldi	r21, 0x00	; 0
     10c:	20 e0       	ldi	r18, 0x00	; 0
     10e:	30 e0       	ldi	r19, 0x00	; 0
     110:	01 e0       	ldi	r16, 0x01	; 1
     112:	ee 24       	eor	r14, r14
     114:	ff 24       	eor	r15, r15
     116:	cc 24       	eor	r12, r12
     118:	dd 24       	eor	r13, r13
     11a:	aa 24       	eor	r10, r10
     11c:	bb 24       	eor	r11, r11
     11e:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <xTaskGenericCreate>
     122:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <vTaskStartScheduler>
     126:	80 e0       	ldi	r24, 0x00	; 0
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	cf 91       	pop	r28
     12c:	df 91       	pop	r29
     12e:	0f 91       	pop	r16
     130:	ff 90       	pop	r15
     132:	ef 90       	pop	r14
     134:	df 90       	pop	r13
     136:	cf 90       	pop	r12
     138:	bf 90       	pop	r11
     13a:	af 90       	pop	r10
     13c:	08 95       	ret

0000013e <task1_code>:

}

/*Task1 Code SW*/
 void task1_code(void*pvParamter)
{
     13e:	df 93       	push	r29
     140:	cf 93       	push	r28
     142:	00 d0       	rcall	.+0      	; 0x144 <task1_code+0x6>
     144:	00 d0       	rcall	.+0      	; 0x146 <task1_code+0x8>
     146:	cd b7       	in	r28, 0x3d	; 61
     148:	de b7       	in	r29, 0x3e	; 62
     14a:	9c 83       	std	Y+4, r25	; 0x04
     14c:	8b 83       	std	Y+3, r24	; 0x03
	xSemaphoreTake(xSemaphore,1000);
     14e:	80 91 6b 03 	lds	r24, 0x036B
     152:	90 91 6c 03 	lds	r25, 0x036C
     156:	60 e0       	ldi	r22, 0x00	; 0
     158:	70 e0       	ldi	r23, 0x00	; 0
     15a:	48 ee       	ldi	r20, 0xE8	; 232
     15c:	53 e0       	ldi	r21, 0x03	; 3
     15e:	20 e0       	ldi	r18, 0x00	; 0
     160:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <xQueueGenericReceive>

	CLEAR_BIT(DDRD,0);
     164:	a1 e3       	ldi	r26, 0x31	; 49
     166:	b0 e0       	ldi	r27, 0x00	; 0
     168:	e1 e3       	ldi	r30, 0x31	; 49
     16a:	f0 e0       	ldi	r31, 0x00	; 0
     16c:	80 81       	ld	r24, Z
     16e:	8e 7f       	andi	r24, 0xFE	; 254
     170:	8c 93       	st	X, r24

	 portTickType x;
	 x=xTaskGetTickCount();
     172:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <xTaskGetTickCount>
     176:	9a 83       	std	Y+2, r25	; 0x02
     178:	89 83       	std	Y+1, r24	; 0x01

	while(1)
	{
		if(GET_BIT(PIND,0)==1)
     17a:	e0 e3       	ldi	r30, 0x30	; 48
     17c:	f0 e0       	ldi	r31, 0x00	; 0
     17e:	80 81       	ld	r24, Z
     180:	88 2f       	mov	r24, r24
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	81 70       	andi	r24, 0x01	; 1
     186:	90 70       	andi	r25, 0x00	; 0
     188:	88 23       	and	r24, r24
     18a:	59 f0       	breq	.+22     	; 0x1a2 <task1_code+0x64>
		{
			xSemaphoreGive(xSemaphore);
     18c:	80 91 6b 03 	lds	r24, 0x036B
     190:	90 91 6c 03 	lds	r25, 0x036C
     194:	60 e0       	ldi	r22, 0x00	; 0
     196:	70 e0       	ldi	r23, 0x00	; 0
     198:	40 e0       	ldi	r20, 0x00	; 0
     19a:	50 e0       	ldi	r21, 0x00	; 0
     19c:	20 e0       	ldi	r18, 0x00	; 0
     19e:	0e 94 01 09 	call	0x1202	; 0x1202 <xQueueGenericSend>
		}
		vTaskDelayUntil(&x,200);
     1a2:	ce 01       	movw	r24, r28
     1a4:	01 96       	adiw	r24, 0x01	; 1
     1a6:	68 ec       	ldi	r22, 0xC8	; 200
     1a8:	70 e0       	ldi	r23, 0x00	; 0
     1aa:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <vTaskDelayUntil>
     1ae:	e5 cf       	rjmp	.-54     	; 0x17a <task1_code+0x3c>

000001b0 <task2_code>:

}

/*Task2 Code LED*/
 void task2_code(void*pvParamter)
{
     1b0:	df 93       	push	r29
     1b2:	cf 93       	push	r28
     1b4:	00 d0       	rcall	.+0      	; 0x1b6 <task2_code+0x6>
     1b6:	00 d0       	rcall	.+0      	; 0x1b8 <task2_code+0x8>
     1b8:	cd b7       	in	r28, 0x3d	; 61
     1ba:	de b7       	in	r29, 0x3e	; 62
     1bc:	9c 83       	std	Y+4, r25	; 0x04
     1be:	8b 83       	std	Y+3, r24	; 0x03
	 SET_BIT(DDRD,5);
     1c0:	a1 e3       	ldi	r26, 0x31	; 49
     1c2:	b0 e0       	ldi	r27, 0x00	; 0
     1c4:	e1 e3       	ldi	r30, 0x31	; 49
     1c6:	f0 e0       	ldi	r31, 0x00	; 0
     1c8:	80 81       	ld	r24, Z
     1ca:	80 62       	ori	r24, 0x20	; 32
     1cc:	8c 93       	st	X, r24

	 portTickType x;
	 x=xTaskGetTickCount();
     1ce:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <xTaskGetTickCount>
     1d2:	9a 83       	std	Y+2, r25	; 0x02
     1d4:	89 83       	std	Y+1, r24	; 0x01

	while(1)
	{
		if(xSemaphoreTake(xSemaphore,1000)==1)
     1d6:	80 91 6b 03 	lds	r24, 0x036B
     1da:	90 91 6c 03 	lds	r25, 0x036C
     1de:	60 e0       	ldi	r22, 0x00	; 0
     1e0:	70 e0       	ldi	r23, 0x00	; 0
     1e2:	48 ee       	ldi	r20, 0xE8	; 232
     1e4:	53 e0       	ldi	r21, 0x03	; 3
     1e6:	20 e0       	ldi	r18, 0x00	; 0
     1e8:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <xQueueGenericReceive>
     1ec:	81 30       	cpi	r24, 0x01	; 1
     1ee:	41 f4       	brne	.+16     	; 0x200 <task2_code+0x50>
		{
			TOGGLE_BIT(PORTD,5);
     1f0:	a2 e3       	ldi	r26, 0x32	; 50
     1f2:	b0 e0       	ldi	r27, 0x00	; 0
     1f4:	e2 e3       	ldi	r30, 0x32	; 50
     1f6:	f0 e0       	ldi	r31, 0x00	; 0
     1f8:	90 81       	ld	r25, Z
     1fa:	80 e2       	ldi	r24, 0x20	; 32
     1fc:	89 27       	eor	r24, r25
     1fe:	8c 93       	st	X, r24
		}

		vTaskDelayUntil(&x,500);
     200:	ce 01       	movw	r24, r28
     202:	01 96       	adiw	r24, 0x01	; 1
     204:	64 ef       	ldi	r22, 0xF4	; 244
     206:	71 e0       	ldi	r23, 0x01	; 1
     208:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <vTaskDelayUntil>
     20c:	e4 cf       	rjmp	.-56     	; 0x1d6 <task2_code+0x26>

0000020e <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
     20e:	df 93       	push	r29
     210:	cf 93       	push	r28
     212:	cd b7       	in	r28, 0x3d	; 61
     214:	de b7       	in	r29, 0x3e	; 62
     216:	27 97       	sbiw	r28, 0x07	; 7
     218:	0f b6       	in	r0, 0x3f	; 63
     21a:	f8 94       	cli
     21c:	de bf       	out	0x3e, r29	; 62
     21e:	0f be       	out	0x3f, r0	; 63
     220:	cd bf       	out	0x3d, r28	; 61
     222:	9d 83       	std	Y+5, r25	; 0x05
     224:	8c 83       	std	Y+4, r24	; 0x04
     226:	6e 83       	std	Y+6, r22	; 0x06
     228:	4f 83       	std	Y+7, r20	; 0x07
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
     22a:	8a e1       	ldi	r24, 0x1A	; 26
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	0e 94 df 03 	call	0x7be	; 0x7be <pvPortMalloc>
     232:	9a 83       	std	Y+2, r25	; 0x02
     234:	89 83       	std	Y+1, r24	; 0x01
	if( pxCoRoutine )
     236:	89 81       	ldd	r24, Y+1	; 0x01
     238:	9a 81       	ldd	r25, Y+2	; 0x02
     23a:	00 97       	sbiw	r24, 0x00	; 0
     23c:	09 f4       	brne	.+2      	; 0x240 <xCoRoutineCreate+0x32>
     23e:	6f c0       	rjmp	.+222    	; 0x31e <xCoRoutineCreate+0x110>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
     240:	80 91 74 00 	lds	r24, 0x0074
     244:	90 91 75 00 	lds	r25, 0x0075
     248:	00 97       	sbiw	r24, 0x00	; 0
     24a:	41 f4       	brne	.+16     	; 0x25c <xCoRoutineCreate+0x4e>
		{
			pxCurrentCoRoutine = pxCoRoutine;
     24c:	89 81       	ldd	r24, Y+1	; 0x01
     24e:	9a 81       	ldd	r25, Y+2	; 0x02
     250:	90 93 75 00 	sts	0x0075, r25
     254:	80 93 74 00 	sts	0x0074, r24
			prvInitialiseCoRoutineLists();
     258:	0e 94 6e 03 	call	0x6dc	; 0x6dc <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
     25c:	8e 81       	ldd	r24, Y+6	; 0x06
     25e:	82 30       	cpi	r24, 0x02	; 2
     260:	10 f0       	brcs	.+4      	; 0x266 <xCoRoutineCreate+0x58>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
     262:	81 e0       	ldi	r24, 0x01	; 1
     264:	8e 83       	std	Y+6, r24	; 0x06
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
     266:	e9 81       	ldd	r30, Y+1	; 0x01
     268:	fa 81       	ldd	r31, Y+2	; 0x02
     26a:	11 8e       	std	Z+25, r1	; 0x19
     26c:	10 8e       	std	Z+24, r1	; 0x18
		pxCoRoutine->uxPriority = uxPriority;
     26e:	e9 81       	ldd	r30, Y+1	; 0x01
     270:	fa 81       	ldd	r31, Y+2	; 0x02
     272:	8e 81       	ldd	r24, Y+6	; 0x06
     274:	86 8b       	std	Z+22, r24	; 0x16
		pxCoRoutine->uxIndex = uxIndex;
     276:	e9 81       	ldd	r30, Y+1	; 0x01
     278:	fa 81       	ldd	r31, Y+2	; 0x02
     27a:	8f 81       	ldd	r24, Y+7	; 0x07
     27c:	87 8b       	std	Z+23, r24	; 0x17
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
     27e:	e9 81       	ldd	r30, Y+1	; 0x01
     280:	fa 81       	ldd	r31, Y+2	; 0x02
     282:	8c 81       	ldd	r24, Y+4	; 0x04
     284:	9d 81       	ldd	r25, Y+5	; 0x05
     286:	91 83       	std	Z+1, r25	; 0x01
     288:	80 83       	st	Z, r24

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
     28a:	89 81       	ldd	r24, Y+1	; 0x01
     28c:	9a 81       	ldd	r25, Y+2	; 0x02
     28e:	02 96       	adiw	r24, 0x02	; 2
     290:	0e 94 75 04 	call	0x8ea	; 0x8ea <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
     294:	89 81       	ldd	r24, Y+1	; 0x01
     296:	9a 81       	ldd	r25, Y+2	; 0x02
     298:	0c 96       	adiw	r24, 0x0c	; 12
     29a:	0e 94 75 04 	call	0x8ea	; 0x8ea <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
     29e:	e9 81       	ldd	r30, Y+1	; 0x01
     2a0:	fa 81       	ldd	r31, Y+2	; 0x02
     2a2:	89 81       	ldd	r24, Y+1	; 0x01
     2a4:	9a 81       	ldd	r25, Y+2	; 0x02
     2a6:	91 87       	std	Z+9, r25	; 0x09
     2a8:	80 87       	std	Z+8, r24	; 0x08
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
     2aa:	e9 81       	ldd	r30, Y+1	; 0x01
     2ac:	fa 81       	ldd	r31, Y+2	; 0x02
     2ae:	89 81       	ldd	r24, Y+1	; 0x01
     2b0:	9a 81       	ldd	r25, Y+2	; 0x02
     2b2:	93 8b       	std	Z+19, r25	; 0x13
     2b4:	82 8b       	std	Z+18, r24	; 0x12
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
     2b6:	8e 81       	ldd	r24, Y+6	; 0x06
     2b8:	28 2f       	mov	r18, r24
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	85 e0       	ldi	r24, 0x05	; 5
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	82 1b       	sub	r24, r18
     2c2:	93 0b       	sbc	r25, r19
     2c4:	e9 81       	ldd	r30, Y+1	; 0x01
     2c6:	fa 81       	ldd	r31, Y+2	; 0x02
     2c8:	95 87       	std	Z+13, r25	; 0x0d
     2ca:	84 87       	std	Z+12, r24	; 0x0c
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
     2cc:	e9 81       	ldd	r30, Y+1	; 0x01
     2ce:	fa 81       	ldd	r31, Y+2	; 0x02
     2d0:	96 89       	ldd	r25, Z+22	; 0x16
     2d2:	80 91 76 00 	lds	r24, 0x0076
     2d6:	89 17       	cp	r24, r25
     2d8:	28 f4       	brcc	.+10     	; 0x2e4 <xCoRoutineCreate+0xd6>
     2da:	e9 81       	ldd	r30, Y+1	; 0x01
     2dc:	fa 81       	ldd	r31, Y+2	; 0x02
     2de:	86 89       	ldd	r24, Z+22	; 0x16
     2e0:	80 93 76 00 	sts	0x0076, r24
     2e4:	e9 81       	ldd	r30, Y+1	; 0x01
     2e6:	fa 81       	ldd	r31, Y+2	; 0x02
     2e8:	86 89       	ldd	r24, Z+22	; 0x16
     2ea:	28 2f       	mov	r18, r24
     2ec:	30 e0       	ldi	r19, 0x00	; 0
     2ee:	c9 01       	movw	r24, r18
     2f0:	88 0f       	add	r24, r24
     2f2:	99 1f       	adc	r25, r25
     2f4:	88 0f       	add	r24, r24
     2f6:	99 1f       	adc	r25, r25
     2f8:	88 0f       	add	r24, r24
     2fa:	99 1f       	adc	r25, r25
     2fc:	82 0f       	add	r24, r18
     2fe:	93 1f       	adc	r25, r19
     300:	ac 01       	movw	r20, r24
     302:	43 58       	subi	r20, 0x83	; 131
     304:	5f 4f       	sbci	r21, 0xFF	; 255
     306:	89 81       	ldd	r24, Y+1	; 0x01
     308:	9a 81       	ldd	r25, Y+2	; 0x02
     30a:	9c 01       	movw	r18, r24
     30c:	2e 5f       	subi	r18, 0xFE	; 254
     30e:	3f 4f       	sbci	r19, 0xFF	; 255
     310:	ca 01       	movw	r24, r20
     312:	b9 01       	movw	r22, r18
     314:	0e 94 85 04 	call	0x90a	; 0x90a <vListInsertEnd>

		xReturn = pdPASS;
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	8b 83       	std	Y+3, r24	; 0x03
     31c:	02 c0       	rjmp	.+4      	; 0x322 <xCoRoutineCreate+0x114>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
     31e:	8f ef       	ldi	r24, 0xFF	; 255
     320:	8b 83       	std	Y+3, r24	; 0x03
	}
	
	return xReturn;	
     322:	8b 81       	ldd	r24, Y+3	; 0x03
}
     324:	27 96       	adiw	r28, 0x07	; 7
     326:	0f b6       	in	r0, 0x3f	; 63
     328:	f8 94       	cli
     32a:	de bf       	out	0x3e, r29	; 62
     32c:	0f be       	out	0x3f, r0	; 63
     32e:	cd bf       	out	0x3d, r28	; 61
     330:	cf 91       	pop	r28
     332:	df 91       	pop	r29
     334:	08 95       	ret

00000336 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
     336:	df 93       	push	r29
     338:	cf 93       	push	r28
     33a:	00 d0       	rcall	.+0      	; 0x33c <vCoRoutineAddToDelayedList+0x6>
     33c:	00 d0       	rcall	.+0      	; 0x33e <vCoRoutineAddToDelayedList+0x8>
     33e:	00 d0       	rcall	.+0      	; 0x340 <vCoRoutineAddToDelayedList+0xa>
     340:	cd b7       	in	r28, 0x3d	; 61
     342:	de b7       	in	r29, 0x3e	; 62
     344:	9c 83       	std	Y+4, r25	; 0x04
     346:	8b 83       	std	Y+3, r24	; 0x03
     348:	7e 83       	std	Y+6, r23	; 0x06
     34a:	6d 83       	std	Y+5, r22	; 0x05
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
     34c:	20 91 77 00 	lds	r18, 0x0077
     350:	30 91 78 00 	lds	r19, 0x0078
     354:	8b 81       	ldd	r24, Y+3	; 0x03
     356:	9c 81       	ldd	r25, Y+4	; 0x04
     358:	82 0f       	add	r24, r18
     35a:	93 1f       	adc	r25, r19
     35c:	9a 83       	std	Y+2, r25	; 0x02
     35e:	89 83       	std	Y+1, r24	; 0x01

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     360:	80 91 74 00 	lds	r24, 0x0074
     364:	90 91 75 00 	lds	r25, 0x0075
     368:	02 96       	adiw	r24, 0x02	; 2
     36a:	0e 94 3d 05 	call	0xa7a	; 0xa7a <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
     36e:	e0 91 74 00 	lds	r30, 0x0074
     372:	f0 91 75 00 	lds	r31, 0x0075
     376:	89 81       	ldd	r24, Y+1	; 0x01
     378:	9a 81       	ldd	r25, Y+2	; 0x02
     37a:	93 83       	std	Z+3, r25	; 0x03
     37c:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xCoRoutineTickCount )
     37e:	20 91 77 00 	lds	r18, 0x0077
     382:	30 91 78 00 	lds	r19, 0x0078
     386:	89 81       	ldd	r24, Y+1	; 0x01
     388:	9a 81       	ldd	r25, Y+2	; 0x02
     38a:	82 17       	cp	r24, r18
     38c:	93 07       	cpc	r25, r19
     38e:	70 f4       	brcc	.+28     	; 0x3ac <vCoRoutineAddToDelayedList+0x76>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     390:	80 91 a3 00 	lds	r24, 0x00A3
     394:	90 91 a4 00 	lds	r25, 0x00A4
     398:	20 91 74 00 	lds	r18, 0x0074
     39c:	30 91 75 00 	lds	r19, 0x0075
     3a0:	2e 5f       	subi	r18, 0xFE	; 254
     3a2:	3f 4f       	sbci	r19, 0xFF	; 255
     3a4:	b9 01       	movw	r22, r18
     3a6:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <vListInsert>
     3aa:	0d c0       	rjmp	.+26     	; 0x3c6 <vCoRoutineAddToDelayedList+0x90>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     3ac:	80 91 a1 00 	lds	r24, 0x00A1
     3b0:	90 91 a2 00 	lds	r25, 0x00A2
     3b4:	20 91 74 00 	lds	r18, 0x0074
     3b8:	30 91 75 00 	lds	r19, 0x0075
     3bc:	2e 5f       	subi	r18, 0xFE	; 254
     3be:	3f 4f       	sbci	r19, 0xFF	; 255
     3c0:	b9 01       	movw	r22, r18
     3c2:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <vListInsert>
	}

	if( pxEventList )
     3c6:	8d 81       	ldd	r24, Y+5	; 0x05
     3c8:	9e 81       	ldd	r25, Y+6	; 0x06
     3ca:	00 97       	sbiw	r24, 0x00	; 0
     3cc:	61 f0       	breq	.+24     	; 0x3e6 <vCoRoutineAddToDelayedList+0xb0>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
     3ce:	80 91 74 00 	lds	r24, 0x0074
     3d2:	90 91 75 00 	lds	r25, 0x0075
     3d6:	9c 01       	movw	r18, r24
     3d8:	24 5f       	subi	r18, 0xF4	; 244
     3da:	3f 4f       	sbci	r19, 0xFF	; 255
     3dc:	8d 81       	ldd	r24, Y+5	; 0x05
     3de:	9e 81       	ldd	r25, Y+6	; 0x06
     3e0:	b9 01       	movw	r22, r18
     3e2:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <vListInsert>
	}
}
     3e6:	26 96       	adiw	r28, 0x06	; 6
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	f8 94       	cli
     3ec:	de bf       	out	0x3e, r29	; 62
     3ee:	0f be       	out	0x3f, r0	; 63
     3f0:	cd bf       	out	0x3d, r28	; 61
     3f2:	cf 91       	pop	r28
     3f4:	df 91       	pop	r29
     3f6:	08 95       	ret

000003f8 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
     3f8:	df 93       	push	r29
     3fa:	cf 93       	push	r28
     3fc:	00 d0       	rcall	.+0      	; 0x3fe <prvCheckPendingReadyList+0x6>
     3fe:	cd b7       	in	r28, 0x3d	; 61
     400:	de b7       	in	r29, 0x3e	; 62
     402:	3a c0       	rjmp	.+116    	; 0x478 <prvCheckPendingReadyList+0x80>
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
     404:	f8 94       	cli
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
     406:	e0 91 aa 00 	lds	r30, 0x00AA
     40a:	f0 91 ab 00 	lds	r31, 0x00AB
     40e:	86 81       	ldd	r24, Z+6	; 0x06
     410:	97 81       	ldd	r25, Z+7	; 0x07
     412:	9a 83       	std	Y+2, r25	; 0x02
     414:	89 83       	std	Y+1, r24	; 0x01
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
     416:	89 81       	ldd	r24, Y+1	; 0x01
     418:	9a 81       	ldd	r25, Y+2	; 0x02
     41a:	0c 96       	adiw	r24, 0x0c	; 12
     41c:	0e 94 3d 05 	call	0xa7a	; 0xa7a <vListRemove>
		}
		portENABLE_INTERRUPTS();
     420:	78 94       	sei

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
     422:	89 81       	ldd	r24, Y+1	; 0x01
     424:	9a 81       	ldd	r25, Y+2	; 0x02
     426:	02 96       	adiw	r24, 0x02	; 2
     428:	0e 94 3d 05 	call	0xa7a	; 0xa7a <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
     42c:	e9 81       	ldd	r30, Y+1	; 0x01
     42e:	fa 81       	ldd	r31, Y+2	; 0x02
     430:	96 89       	ldd	r25, Z+22	; 0x16
     432:	80 91 76 00 	lds	r24, 0x0076
     436:	89 17       	cp	r24, r25
     438:	28 f4       	brcc	.+10     	; 0x444 <prvCheckPendingReadyList+0x4c>
     43a:	e9 81       	ldd	r30, Y+1	; 0x01
     43c:	fa 81       	ldd	r31, Y+2	; 0x02
     43e:	86 89       	ldd	r24, Z+22	; 0x16
     440:	80 93 76 00 	sts	0x0076, r24
     444:	e9 81       	ldd	r30, Y+1	; 0x01
     446:	fa 81       	ldd	r31, Y+2	; 0x02
     448:	86 89       	ldd	r24, Z+22	; 0x16
     44a:	28 2f       	mov	r18, r24
     44c:	30 e0       	ldi	r19, 0x00	; 0
     44e:	c9 01       	movw	r24, r18
     450:	88 0f       	add	r24, r24
     452:	99 1f       	adc	r25, r25
     454:	88 0f       	add	r24, r24
     456:	99 1f       	adc	r25, r25
     458:	88 0f       	add	r24, r24
     45a:	99 1f       	adc	r25, r25
     45c:	82 0f       	add	r24, r18
     45e:	93 1f       	adc	r25, r19
     460:	ac 01       	movw	r20, r24
     462:	43 58       	subi	r20, 0x83	; 131
     464:	5f 4f       	sbci	r21, 0xFF	; 255
     466:	89 81       	ldd	r24, Y+1	; 0x01
     468:	9a 81       	ldd	r25, Y+2	; 0x02
     46a:	9c 01       	movw	r18, r24
     46c:	2e 5f       	subi	r18, 0xFE	; 254
     46e:	3f 4f       	sbci	r19, 0xFF	; 255
     470:	ca 01       	movw	r24, r20
     472:	b9 01       	movw	r22, r18
     474:	0e 94 85 04 	call	0x90a	; 0x90a <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
     478:	80 91 a5 00 	lds	r24, 0x00A5
     47c:	88 23       	and	r24, r24
     47e:	09 f0       	breq	.+2      	; 0x482 <prvCheckPendingReadyList+0x8a>
     480:	c1 cf       	rjmp	.-126    	; 0x404 <prvCheckPendingReadyList+0xc>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
     482:	0f 90       	pop	r0
     484:	0f 90       	pop	r0
     486:	cf 91       	pop	r28
     488:	df 91       	pop	r29
     48a:	08 95       	ret

0000048c <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
     48c:	df 93       	push	r29
     48e:	cf 93       	push	r28
     490:	00 d0       	rcall	.+0      	; 0x492 <prvCheckDelayedList+0x6>
     492:	00 d0       	rcall	.+0      	; 0x494 <prvCheckDelayedList+0x8>
     494:	cd b7       	in	r28, 0x3d	; 61
     496:	de b7       	in	r29, 0x3e	; 62
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
     498:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <xTaskGetTickCount>
     49c:	20 91 79 00 	lds	r18, 0x0079
     4a0:	30 91 7a 00 	lds	r19, 0x007A
     4a4:	82 1b       	sub	r24, r18
     4a6:	93 0b       	sbc	r25, r19
     4a8:	90 93 7c 00 	sts	0x007C, r25
     4ac:	80 93 7b 00 	sts	0x007B, r24
     4b0:	85 c0       	rjmp	.+266    	; 0x5bc <prvCheckDelayedList+0x130>
	while( xPassedTicks )
	{
		xCoRoutineTickCount++;
     4b2:	80 91 77 00 	lds	r24, 0x0077
     4b6:	90 91 78 00 	lds	r25, 0x0078
     4ba:	01 96       	adiw	r24, 0x01	; 1
     4bc:	90 93 78 00 	sts	0x0078, r25
     4c0:	80 93 77 00 	sts	0x0077, r24
		xPassedTicks--;
     4c4:	80 91 7b 00 	lds	r24, 0x007B
     4c8:	90 91 7c 00 	lds	r25, 0x007C
     4cc:	01 97       	sbiw	r24, 0x01	; 1
     4ce:	90 93 7c 00 	sts	0x007C, r25
     4d2:	80 93 7b 00 	sts	0x007B, r24

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
     4d6:	80 91 77 00 	lds	r24, 0x0077
     4da:	90 91 78 00 	lds	r25, 0x0078
     4de:	00 97       	sbiw	r24, 0x00	; 0
     4e0:	09 f0       	breq	.+2      	; 0x4e4 <prvCheckDelayedList+0x58>
     4e2:	64 c0       	rjmp	.+200    	; 0x5ac <prvCheckDelayedList+0x120>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
     4e4:	80 91 a1 00 	lds	r24, 0x00A1
     4e8:	90 91 a2 00 	lds	r25, 0x00A2
     4ec:	9a 83       	std	Y+2, r25	; 0x02
     4ee:	89 83       	std	Y+1, r24	; 0x01
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
     4f0:	80 91 a3 00 	lds	r24, 0x00A3
     4f4:	90 91 a4 00 	lds	r25, 0x00A4
     4f8:	90 93 a2 00 	sts	0x00A2, r25
     4fc:	80 93 a1 00 	sts	0x00A1, r24
			pxOverflowDelayedCoRoutineList = pxTemp;
     500:	89 81       	ldd	r24, Y+1	; 0x01
     502:	9a 81       	ldd	r25, Y+2	; 0x02
     504:	90 93 a4 00 	sts	0x00A4, r25
     508:	80 93 a3 00 	sts	0x00A3, r24
     50c:	4f c0       	rjmp	.+158    	; 0x5ac <prvCheckDelayedList+0x120>
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
     50e:	e0 91 a1 00 	lds	r30, 0x00A1
     512:	f0 91 a2 00 	lds	r31, 0x00A2
     516:	05 80       	ldd	r0, Z+5	; 0x05
     518:	f6 81       	ldd	r31, Z+6	; 0x06
     51a:	e0 2d       	mov	r30, r0
     51c:	86 81       	ldd	r24, Z+6	; 0x06
     51e:	97 81       	ldd	r25, Z+7	; 0x07
     520:	9c 83       	std	Y+4, r25	; 0x04
     522:	8b 83       	std	Y+3, r24	; 0x03

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
     524:	eb 81       	ldd	r30, Y+3	; 0x03
     526:	fc 81       	ldd	r31, Y+4	; 0x04
     528:	22 81       	ldd	r18, Z+2	; 0x02
     52a:	33 81       	ldd	r19, Z+3	; 0x03
     52c:	80 91 77 00 	lds	r24, 0x0077
     530:	90 91 78 00 	lds	r25, 0x0078
     534:	82 17       	cp	r24, r18
     536:	93 07       	cpc	r25, r19
     538:	08 f4       	brcc	.+2      	; 0x53c <prvCheckDelayedList+0xb0>
     53a:	40 c0       	rjmp	.+128    	; 0x5bc <prvCheckDelayedList+0x130>
			{			
				/* Timeout not yet expired. */																			
				break;																				
			}																						

			portDISABLE_INTERRUPTS();
     53c:	f8 94       	cli
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
     53e:	8b 81       	ldd	r24, Y+3	; 0x03
     540:	9c 81       	ldd	r25, Y+4	; 0x04
     542:	02 96       	adiw	r24, 0x02	; 2
     544:	0e 94 3d 05 	call	0xa7a	; 0xa7a <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
     548:	eb 81       	ldd	r30, Y+3	; 0x03
     54a:	fc 81       	ldd	r31, Y+4	; 0x04
     54c:	84 89       	ldd	r24, Z+20	; 0x14
     54e:	95 89       	ldd	r25, Z+21	; 0x15
     550:	00 97       	sbiw	r24, 0x00	; 0
     552:	29 f0       	breq	.+10     	; 0x55e <prvCheckDelayedList+0xd2>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
     554:	8b 81       	ldd	r24, Y+3	; 0x03
     556:	9c 81       	ldd	r25, Y+4	; 0x04
     558:	0c 96       	adiw	r24, 0x0c	; 12
     55a:	0e 94 3d 05 	call	0xa7a	; 0xa7a <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
     55e:	78 94       	sei

			prvAddCoRoutineToReadyQueue( pxCRCB );													
     560:	eb 81       	ldd	r30, Y+3	; 0x03
     562:	fc 81       	ldd	r31, Y+4	; 0x04
     564:	96 89       	ldd	r25, Z+22	; 0x16
     566:	80 91 76 00 	lds	r24, 0x0076
     56a:	89 17       	cp	r24, r25
     56c:	28 f4       	brcc	.+10     	; 0x578 <prvCheckDelayedList+0xec>
     56e:	eb 81       	ldd	r30, Y+3	; 0x03
     570:	fc 81       	ldd	r31, Y+4	; 0x04
     572:	86 89       	ldd	r24, Z+22	; 0x16
     574:	80 93 76 00 	sts	0x0076, r24
     578:	eb 81       	ldd	r30, Y+3	; 0x03
     57a:	fc 81       	ldd	r31, Y+4	; 0x04
     57c:	86 89       	ldd	r24, Z+22	; 0x16
     57e:	28 2f       	mov	r18, r24
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	c9 01       	movw	r24, r18
     584:	88 0f       	add	r24, r24
     586:	99 1f       	adc	r25, r25
     588:	88 0f       	add	r24, r24
     58a:	99 1f       	adc	r25, r25
     58c:	88 0f       	add	r24, r24
     58e:	99 1f       	adc	r25, r25
     590:	82 0f       	add	r24, r18
     592:	93 1f       	adc	r25, r19
     594:	ac 01       	movw	r20, r24
     596:	43 58       	subi	r20, 0x83	; 131
     598:	5f 4f       	sbci	r21, 0xFF	; 255
     59a:	8b 81       	ldd	r24, Y+3	; 0x03
     59c:	9c 81       	ldd	r25, Y+4	; 0x04
     59e:	9c 01       	movw	r18, r24
     5a0:	2e 5f       	subi	r18, 0xFE	; 254
     5a2:	3f 4f       	sbci	r19, 0xFF	; 255
     5a4:	ca 01       	movw	r24, r20
     5a6:	b9 01       	movw	r22, r18
     5a8:	0e 94 85 04 	call	0x90a	; 0x90a <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
     5ac:	e0 91 a1 00 	lds	r30, 0x00A1
     5b0:	f0 91 a2 00 	lds	r31, 0x00A2
     5b4:	80 81       	ld	r24, Z
     5b6:	88 23       	and	r24, r24
     5b8:	09 f0       	breq	.+2      	; 0x5bc <prvCheckDelayedList+0x130>
     5ba:	a9 cf       	rjmp	.-174    	; 0x50e <prvCheckDelayedList+0x82>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
     5bc:	80 91 7b 00 	lds	r24, 0x007B
     5c0:	90 91 7c 00 	lds	r25, 0x007C
     5c4:	00 97       	sbiw	r24, 0x00	; 0
     5c6:	09 f0       	breq	.+2      	; 0x5ca <prvCheckDelayedList+0x13e>
     5c8:	74 cf       	rjmp	.-280    	; 0x4b2 <prvCheckDelayedList+0x26>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
     5ca:	80 91 77 00 	lds	r24, 0x0077
     5ce:	90 91 78 00 	lds	r25, 0x0078
     5d2:	90 93 7a 00 	sts	0x007A, r25
     5d6:	80 93 79 00 	sts	0x0079, r24
}
     5da:	0f 90       	pop	r0
     5dc:	0f 90       	pop	r0
     5de:	0f 90       	pop	r0
     5e0:	0f 90       	pop	r0
     5e2:	cf 91       	pop	r28
     5e4:	df 91       	pop	r29
     5e6:	08 95       	ret

000005e8 <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
     5e8:	df 93       	push	r29
     5ea:	cf 93       	push	r28
     5ec:	00 d0       	rcall	.+0      	; 0x5ee <vCoRoutineSchedule+0x6>
     5ee:	cd b7       	in	r28, 0x3d	; 61
     5f0:	de b7       	in	r29, 0x3e	; 62
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
     5f2:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
     5f6:	0e 94 46 02 	call	0x48c	; 0x48c <prvCheckDelayedList>
     5fa:	0a c0       	rjmp	.+20     	; 0x610 <vCoRoutineSchedule+0x28>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
	{
		if( uxTopCoRoutineReadyPriority == 0 )
     5fc:	80 91 76 00 	lds	r24, 0x0076
     600:	88 23       	and	r24, r24
     602:	09 f4       	brne	.+2      	; 0x606 <vCoRoutineSchedule+0x1e>
     604:	66 c0       	rjmp	.+204    	; 0x6d2 <vCoRoutineSchedule+0xea>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
     606:	80 91 76 00 	lds	r24, 0x0076
     60a:	81 50       	subi	r24, 0x01	; 1
     60c:	80 93 76 00 	sts	0x0076, r24

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
     610:	80 91 76 00 	lds	r24, 0x0076
     614:	28 2f       	mov	r18, r24
     616:	30 e0       	ldi	r19, 0x00	; 0
     618:	c9 01       	movw	r24, r18
     61a:	88 0f       	add	r24, r24
     61c:	99 1f       	adc	r25, r25
     61e:	88 0f       	add	r24, r24
     620:	99 1f       	adc	r25, r25
     622:	88 0f       	add	r24, r24
     624:	99 1f       	adc	r25, r25
     626:	82 0f       	add	r24, r18
     628:	93 1f       	adc	r25, r19
     62a:	fc 01       	movw	r30, r24
     62c:	e3 58       	subi	r30, 0x83	; 131
     62e:	ff 4f       	sbci	r31, 0xFF	; 255
     630:	80 81       	ld	r24, Z
     632:	88 23       	and	r24, r24
     634:	19 f3       	breq	.-58     	; 0x5fc <vCoRoutineSchedule+0x14>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
     636:	80 91 76 00 	lds	r24, 0x0076
     63a:	28 2f       	mov	r18, r24
     63c:	30 e0       	ldi	r19, 0x00	; 0
     63e:	c9 01       	movw	r24, r18
     640:	88 0f       	add	r24, r24
     642:	99 1f       	adc	r25, r25
     644:	88 0f       	add	r24, r24
     646:	99 1f       	adc	r25, r25
     648:	88 0f       	add	r24, r24
     64a:	99 1f       	adc	r25, r25
     64c:	82 0f       	add	r24, r18
     64e:	93 1f       	adc	r25, r19
     650:	83 58       	subi	r24, 0x83	; 131
     652:	9f 4f       	sbci	r25, 0xFF	; 255
     654:	9a 83       	std	Y+2, r25	; 0x02
     656:	89 83       	std	Y+1, r24	; 0x01
     658:	e9 81       	ldd	r30, Y+1	; 0x01
     65a:	fa 81       	ldd	r31, Y+2	; 0x02
     65c:	01 80       	ldd	r0, Z+1	; 0x01
     65e:	f2 81       	ldd	r31, Z+2	; 0x02
     660:	e0 2d       	mov	r30, r0
     662:	82 81       	ldd	r24, Z+2	; 0x02
     664:	93 81       	ldd	r25, Z+3	; 0x03
     666:	e9 81       	ldd	r30, Y+1	; 0x01
     668:	fa 81       	ldd	r31, Y+2	; 0x02
     66a:	92 83       	std	Z+2, r25	; 0x02
     66c:	81 83       	std	Z+1, r24	; 0x01
     66e:	e9 81       	ldd	r30, Y+1	; 0x01
     670:	fa 81       	ldd	r31, Y+2	; 0x02
     672:	21 81       	ldd	r18, Z+1	; 0x01
     674:	32 81       	ldd	r19, Z+2	; 0x02
     676:	89 81       	ldd	r24, Y+1	; 0x01
     678:	9a 81       	ldd	r25, Y+2	; 0x02
     67a:	03 96       	adiw	r24, 0x03	; 3
     67c:	28 17       	cp	r18, r24
     67e:	39 07       	cpc	r19, r25
     680:	59 f4       	brne	.+22     	; 0x698 <vCoRoutineSchedule+0xb0>
     682:	e9 81       	ldd	r30, Y+1	; 0x01
     684:	fa 81       	ldd	r31, Y+2	; 0x02
     686:	01 80       	ldd	r0, Z+1	; 0x01
     688:	f2 81       	ldd	r31, Z+2	; 0x02
     68a:	e0 2d       	mov	r30, r0
     68c:	82 81       	ldd	r24, Z+2	; 0x02
     68e:	93 81       	ldd	r25, Z+3	; 0x03
     690:	e9 81       	ldd	r30, Y+1	; 0x01
     692:	fa 81       	ldd	r31, Y+2	; 0x02
     694:	92 83       	std	Z+2, r25	; 0x02
     696:	81 83       	std	Z+1, r24	; 0x01
     698:	e9 81       	ldd	r30, Y+1	; 0x01
     69a:	fa 81       	ldd	r31, Y+2	; 0x02
     69c:	01 80       	ldd	r0, Z+1	; 0x01
     69e:	f2 81       	ldd	r31, Z+2	; 0x02
     6a0:	e0 2d       	mov	r30, r0
     6a2:	86 81       	ldd	r24, Z+6	; 0x06
     6a4:	97 81       	ldd	r25, Z+7	; 0x07
     6a6:	90 93 75 00 	sts	0x0075, r25
     6aa:	80 93 74 00 	sts	0x0074, r24

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
     6ae:	e0 91 74 00 	lds	r30, 0x0074
     6b2:	f0 91 75 00 	lds	r31, 0x0075
     6b6:	40 81       	ld	r20, Z
     6b8:	51 81       	ldd	r21, Z+1	; 0x01
     6ba:	80 91 74 00 	lds	r24, 0x0074
     6be:	90 91 75 00 	lds	r25, 0x0075
     6c2:	e0 91 74 00 	lds	r30, 0x0074
     6c6:	f0 91 75 00 	lds	r31, 0x0075
     6ca:	27 89       	ldd	r18, Z+23	; 0x17
     6cc:	62 2f       	mov	r22, r18
     6ce:	fa 01       	movw	r30, r20
     6d0:	09 95       	icall

	return;
}
     6d2:	0f 90       	pop	r0
     6d4:	0f 90       	pop	r0
     6d6:	cf 91       	pop	r28
     6d8:	df 91       	pop	r29
     6da:	08 95       	ret

000006dc <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
     6dc:	df 93       	push	r29
     6de:	cf 93       	push	r28
     6e0:	0f 92       	push	r0
     6e2:	cd b7       	in	r28, 0x3d	; 61
     6e4:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
     6e6:	19 82       	std	Y+1, r1	; 0x01
     6e8:	13 c0       	rjmp	.+38     	; 0x710 <prvInitialiseCoRoutineLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
     6ea:	89 81       	ldd	r24, Y+1	; 0x01
     6ec:	28 2f       	mov	r18, r24
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	c9 01       	movw	r24, r18
     6f2:	88 0f       	add	r24, r24
     6f4:	99 1f       	adc	r25, r25
     6f6:	88 0f       	add	r24, r24
     6f8:	99 1f       	adc	r25, r25
     6fa:	88 0f       	add	r24, r24
     6fc:	99 1f       	adc	r25, r25
     6fe:	82 0f       	add	r24, r18
     700:	93 1f       	adc	r25, r19
     702:	83 58       	subi	r24, 0x83	; 131
     704:	9f 4f       	sbci	r25, 0xFF	; 255
     706:	0e 94 4b 04 	call	0x896	; 0x896 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
     70a:	89 81       	ldd	r24, Y+1	; 0x01
     70c:	8f 5f       	subi	r24, 0xFF	; 255
     70e:	89 83       	std	Y+1, r24	; 0x01
     710:	89 81       	ldd	r24, Y+1	; 0x01
     712:	82 30       	cpi	r24, 0x02	; 2
     714:	50 f3       	brcs	.-44     	; 0x6ea <prvInitialiseCoRoutineLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
     716:	8f e8       	ldi	r24, 0x8F	; 143
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	0e 94 4b 04 	call	0x896	; 0x896 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
     71e:	88 e9       	ldi	r24, 0x98	; 152
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	0e 94 4b 04 	call	0x896	; 0x896 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
     726:	85 ea       	ldi	r24, 0xA5	; 165
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	0e 94 4b 04 	call	0x896	; 0x896 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
     72e:	8f e8       	ldi	r24, 0x8F	; 143
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	90 93 a2 00 	sts	0x00A2, r25
     736:	80 93 a1 00 	sts	0x00A1, r24
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
     73a:	88 e9       	ldi	r24, 0x98	; 152
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	90 93 a4 00 	sts	0x00A4, r25
     742:	80 93 a3 00 	sts	0x00A3, r24
}
     746:	0f 90       	pop	r0
     748:	cf 91       	pop	r28
     74a:	df 91       	pop	r29
     74c:	08 95       	ret

0000074e <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
     74e:	df 93       	push	r29
     750:	cf 93       	push	r28
     752:	00 d0       	rcall	.+0      	; 0x754 <xCoRoutineRemoveFromEventList+0x6>
     754:	00 d0       	rcall	.+0      	; 0x756 <xCoRoutineRemoveFromEventList+0x8>
     756:	0f 92       	push	r0
     758:	cd b7       	in	r28, 0x3d	; 61
     75a:	de b7       	in	r29, 0x3e	; 62
     75c:	9d 83       	std	Y+5, r25	; 0x05
     75e:	8c 83       	std	Y+4, r24	; 0x04
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
     760:	ec 81       	ldd	r30, Y+4	; 0x04
     762:	fd 81       	ldd	r31, Y+5	; 0x05
     764:	05 80       	ldd	r0, Z+5	; 0x05
     766:	f6 81       	ldd	r31, Z+6	; 0x06
     768:	e0 2d       	mov	r30, r0
     76a:	86 81       	ldd	r24, Z+6	; 0x06
     76c:	97 81       	ldd	r25, Z+7	; 0x07
     76e:	9b 83       	std	Y+3, r25	; 0x03
     770:	8a 83       	std	Y+2, r24	; 0x02
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
     772:	8a 81       	ldd	r24, Y+2	; 0x02
     774:	9b 81       	ldd	r25, Y+3	; 0x03
     776:	0c 96       	adiw	r24, 0x0c	; 12
     778:	0e 94 3d 05 	call	0xa7a	; 0xa7a <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
     77c:	8a 81       	ldd	r24, Y+2	; 0x02
     77e:	9b 81       	ldd	r25, Y+3	; 0x03
     780:	9c 01       	movw	r18, r24
     782:	24 5f       	subi	r18, 0xF4	; 244
     784:	3f 4f       	sbci	r19, 0xFF	; 255
     786:	85 ea       	ldi	r24, 0xA5	; 165
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	b9 01       	movw	r22, r18
     78c:	0e 94 85 04 	call	0x90a	; 0x90a <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
     790:	ea 81       	ldd	r30, Y+2	; 0x02
     792:	fb 81       	ldd	r31, Y+3	; 0x03
     794:	96 89       	ldd	r25, Z+22	; 0x16
     796:	e0 91 74 00 	lds	r30, 0x0074
     79a:	f0 91 75 00 	lds	r31, 0x0075
     79e:	86 89       	ldd	r24, Z+22	; 0x16
     7a0:	98 17       	cp	r25, r24
     7a2:	18 f0       	brcs	.+6      	; 0x7aa <xCoRoutineRemoveFromEventList+0x5c>
	{
		xReturn = pdTRUE;
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	89 83       	std	Y+1, r24	; 0x01
     7a8:	01 c0       	rjmp	.+2      	; 0x7ac <xCoRoutineRemoveFromEventList+0x5e>
	}
	else
	{
		xReturn = pdFALSE;
     7aa:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
     7ac:	89 81       	ldd	r24, Y+1	; 0x01
}
     7ae:	0f 90       	pop	r0
     7b0:	0f 90       	pop	r0
     7b2:	0f 90       	pop	r0
     7b4:	0f 90       	pop	r0
     7b6:	0f 90       	pop	r0
     7b8:	cf 91       	pop	r28
     7ba:	df 91       	pop	r29
     7bc:	08 95       	ret

000007be <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     7be:	df 93       	push	r29
     7c0:	cf 93       	push	r28
     7c2:	00 d0       	rcall	.+0      	; 0x7c4 <pvPortMalloc+0x6>
     7c4:	00 d0       	rcall	.+0      	; 0x7c6 <pvPortMalloc+0x8>
     7c6:	cd b7       	in	r28, 0x3d	; 61
     7c8:	de b7       	in	r29, 0x3e	; 62
     7ca:	9c 83       	std	Y+4, r25	; 0x04
     7cc:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL; 
     7ce:	1a 82       	std	Y+2, r1	; 0x02
     7d0:	19 82       	std	Y+1, r1	; 0x01
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     7d2:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     7d6:	80 91 ae 00 	lds	r24, 0x00AE
     7da:	90 91 af 00 	lds	r25, 0x00AF
     7de:	2b 81       	ldd	r18, Y+3	; 0x03
     7e0:	3c 81       	ldd	r19, Y+4	; 0x04
     7e2:	82 0f       	add	r24, r18
     7e4:	93 1f       	adc	r25, r19
     7e6:	22 e0       	ldi	r18, 0x02	; 2
     7e8:	88 35       	cpi	r24, 0x58	; 88
     7ea:	92 07       	cpc	r25, r18
     7ec:	18 f5       	brcc	.+70     	; 0x834 <pvPortMalloc+0x76>
     7ee:	20 91 ae 00 	lds	r18, 0x00AE
     7f2:	30 91 af 00 	lds	r19, 0x00AF
     7f6:	8b 81       	ldd	r24, Y+3	; 0x03
     7f8:	9c 81       	ldd	r25, Y+4	; 0x04
     7fa:	28 0f       	add	r18, r24
     7fc:	39 1f       	adc	r19, r25
     7fe:	80 91 ae 00 	lds	r24, 0x00AE
     802:	90 91 af 00 	lds	r25, 0x00AF
     806:	82 17       	cp	r24, r18
     808:	93 07       	cpc	r25, r19
     80a:	a0 f4       	brcc	.+40     	; 0x834 <pvPortMalloc+0x76>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     80c:	80 91 ae 00 	lds	r24, 0x00AE
     810:	90 91 af 00 	lds	r25, 0x00AF
     814:	80 55       	subi	r24, 0x50	; 80
     816:	9f 4f       	sbci	r25, 0xFF	; 255
     818:	9a 83       	std	Y+2, r25	; 0x02
     81a:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;			
     81c:	20 91 ae 00 	lds	r18, 0x00AE
     820:	30 91 af 00 	lds	r19, 0x00AF
     824:	8b 81       	ldd	r24, Y+3	; 0x03
     826:	9c 81       	ldd	r25, Y+4	; 0x04
     828:	82 0f       	add	r24, r18
     82a:	93 1f       	adc	r25, r19
     82c:	90 93 af 00 	sts	0x00AF, r25
     830:	80 93 ae 00 	sts	0x00AE, r24
		}	
	}
	xTaskResumeAll();
     834:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif	

	return pvReturn;
     838:	89 81       	ldd	r24, Y+1	; 0x01
     83a:	9a 81       	ldd	r25, Y+2	; 0x02
}
     83c:	0f 90       	pop	r0
     83e:	0f 90       	pop	r0
     840:	0f 90       	pop	r0
     842:	0f 90       	pop	r0
     844:	cf 91       	pop	r28
     846:	df 91       	pop	r29
     848:	08 95       	ret

0000084a <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     84a:	df 93       	push	r29
     84c:	cf 93       	push	r28
     84e:	00 d0       	rcall	.+0      	; 0x850 <vPortFree+0x6>
     850:	cd b7       	in	r28, 0x3d	; 61
     852:	de b7       	in	r29, 0x3e	; 62
     854:	9a 83       	std	Y+2, r25	; 0x02
     856:	89 83       	std	Y+1, r24	; 0x01
	/* Memory cannot be freed using this scheme.  See heap_2.c and heap_3.c 
	for alternative implementations, and the memory management pages of 
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
}
     858:	0f 90       	pop	r0
     85a:	0f 90       	pop	r0
     85c:	cf 91       	pop	r28
     85e:	df 91       	pop	r29
     860:	08 95       	ret

00000862 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
     862:	df 93       	push	r29
     864:	cf 93       	push	r28
     866:	cd b7       	in	r28, 0x3d	; 61
     868:	de b7       	in	r29, 0x3e	; 62
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
     86a:	10 92 af 00 	sts	0x00AF, r1
     86e:	10 92 ae 00 	sts	0x00AE, r1
}
     872:	cf 91       	pop	r28
     874:	df 91       	pop	r29
     876:	08 95       	ret

00000878 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
     878:	df 93       	push	r29
     87a:	cf 93       	push	r28
     87c:	cd b7       	in	r28, 0x3d	; 61
     87e:	de b7       	in	r29, 0x3e	; 62
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
     880:	20 91 ae 00 	lds	r18, 0x00AE
     884:	30 91 af 00 	lds	r19, 0x00AF
     888:	88 e5       	ldi	r24, 0x58	; 88
     88a:	92 e0       	ldi	r25, 0x02	; 2
     88c:	82 1b       	sub	r24, r18
     88e:	93 0b       	sbc	r25, r19
}
     890:	cf 91       	pop	r28
     892:	df 91       	pop	r29
     894:	08 95       	ret

00000896 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
     896:	df 93       	push	r29
     898:	cf 93       	push	r28
     89a:	00 d0       	rcall	.+0      	; 0x89c <vListInitialise+0x6>
     89c:	cd b7       	in	r28, 0x3d	; 61
     89e:	de b7       	in	r29, 0x3e	; 62
     8a0:	9a 83       	std	Y+2, r25	; 0x02
     8a2:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     8a4:	89 81       	ldd	r24, Y+1	; 0x01
     8a6:	9a 81       	ldd	r25, Y+2	; 0x02
     8a8:	03 96       	adiw	r24, 0x03	; 3
     8aa:	e9 81       	ldd	r30, Y+1	; 0x01
     8ac:	fa 81       	ldd	r31, Y+2	; 0x02
     8ae:	92 83       	std	Z+2, r25	; 0x02
     8b0:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     8b2:	e9 81       	ldd	r30, Y+1	; 0x01
     8b4:	fa 81       	ldd	r31, Y+2	; 0x02
     8b6:	8f ef       	ldi	r24, 0xFF	; 255
     8b8:	9f ef       	ldi	r25, 0xFF	; 255
     8ba:	94 83       	std	Z+4, r25	; 0x04
     8bc:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     8be:	89 81       	ldd	r24, Y+1	; 0x01
     8c0:	9a 81       	ldd	r25, Y+2	; 0x02
     8c2:	03 96       	adiw	r24, 0x03	; 3
     8c4:	e9 81       	ldd	r30, Y+1	; 0x01
     8c6:	fa 81       	ldd	r31, Y+2	; 0x02
     8c8:	96 83       	std	Z+6, r25	; 0x06
     8ca:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     8cc:	89 81       	ldd	r24, Y+1	; 0x01
     8ce:	9a 81       	ldd	r25, Y+2	; 0x02
     8d0:	03 96       	adiw	r24, 0x03	; 3
     8d2:	e9 81       	ldd	r30, Y+1	; 0x01
     8d4:	fa 81       	ldd	r31, Y+2	; 0x02
     8d6:	90 87       	std	Z+8, r25	; 0x08
     8d8:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     8da:	e9 81       	ldd	r30, Y+1	; 0x01
     8dc:	fa 81       	ldd	r31, Y+2	; 0x02
     8de:	10 82       	st	Z, r1
}
     8e0:	0f 90       	pop	r0
     8e2:	0f 90       	pop	r0
     8e4:	cf 91       	pop	r28
     8e6:	df 91       	pop	r29
     8e8:	08 95       	ret

000008ea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
     8ea:	df 93       	push	r29
     8ec:	cf 93       	push	r28
     8ee:	00 d0       	rcall	.+0      	; 0x8f0 <vListInitialiseItem+0x6>
     8f0:	cd b7       	in	r28, 0x3d	; 61
     8f2:	de b7       	in	r29, 0x3e	; 62
     8f4:	9a 83       	std	Y+2, r25	; 0x02
     8f6:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     8f8:	e9 81       	ldd	r30, Y+1	; 0x01
     8fa:	fa 81       	ldd	r31, Y+2	; 0x02
     8fc:	11 86       	std	Z+9, r1	; 0x09
     8fe:	10 86       	std	Z+8, r1	; 0x08
}
     900:	0f 90       	pop	r0
     902:	0f 90       	pop	r0
     904:	cf 91       	pop	r28
     906:	df 91       	pop	r29
     908:	08 95       	ret

0000090a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     90a:	df 93       	push	r29
     90c:	cf 93       	push	r28
     90e:	00 d0       	rcall	.+0      	; 0x910 <vListInsertEnd+0x6>
     910:	00 d0       	rcall	.+0      	; 0x912 <vListInsertEnd+0x8>
     912:	00 d0       	rcall	.+0      	; 0x914 <vListInsertEnd+0xa>
     914:	cd b7       	in	r28, 0x3d	; 61
     916:	de b7       	in	r29, 0x3e	; 62
     918:	9c 83       	std	Y+4, r25	; 0x04
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	7e 83       	std	Y+6, r23	; 0x06
     91e:	6d 83       	std	Y+5, r22	; 0x05

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     920:	eb 81       	ldd	r30, Y+3	; 0x03
     922:	fc 81       	ldd	r31, Y+4	; 0x04
     924:	81 81       	ldd	r24, Z+1	; 0x01
     926:	92 81       	ldd	r25, Z+2	; 0x02
     928:	9a 83       	std	Y+2, r25	; 0x02
     92a:	89 83       	std	Y+1, r24	; 0x01

	pxNewListItem->pxNext = pxIndex->pxNext;
     92c:	e9 81       	ldd	r30, Y+1	; 0x01
     92e:	fa 81       	ldd	r31, Y+2	; 0x02
     930:	82 81       	ldd	r24, Z+2	; 0x02
     932:	93 81       	ldd	r25, Z+3	; 0x03
     934:	ed 81       	ldd	r30, Y+5	; 0x05
     936:	fe 81       	ldd	r31, Y+6	; 0x06
     938:	93 83       	std	Z+3, r25	; 0x03
     93a:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxPrevious = pxList->pxIndex;
     93c:	eb 81       	ldd	r30, Y+3	; 0x03
     93e:	fc 81       	ldd	r31, Y+4	; 0x04
     940:	81 81       	ldd	r24, Z+1	; 0x01
     942:	92 81       	ldd	r25, Z+2	; 0x02
     944:	ed 81       	ldd	r30, Y+5	; 0x05
     946:	fe 81       	ldd	r31, Y+6	; 0x06
     948:	95 83       	std	Z+5, r25	; 0x05
     94a:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     94c:	e9 81       	ldd	r30, Y+1	; 0x01
     94e:	fa 81       	ldd	r31, Y+2	; 0x02
     950:	02 80       	ldd	r0, Z+2	; 0x02
     952:	f3 81       	ldd	r31, Z+3	; 0x03
     954:	e0 2d       	mov	r30, r0
     956:	8d 81       	ldd	r24, Y+5	; 0x05
     958:	9e 81       	ldd	r25, Y+6	; 0x06
     95a:	95 83       	std	Z+5, r25	; 0x05
     95c:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     95e:	8d 81       	ldd	r24, Y+5	; 0x05
     960:	9e 81       	ldd	r25, Y+6	; 0x06
     962:	e9 81       	ldd	r30, Y+1	; 0x01
     964:	fa 81       	ldd	r31, Y+2	; 0x02
     966:	93 83       	std	Z+3, r25	; 0x03
     968:	82 83       	std	Z+2, r24	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     96a:	8d 81       	ldd	r24, Y+5	; 0x05
     96c:	9e 81       	ldd	r25, Y+6	; 0x06
     96e:	eb 81       	ldd	r30, Y+3	; 0x03
     970:	fc 81       	ldd	r31, Y+4	; 0x04
     972:	92 83       	std	Z+2, r25	; 0x02
     974:	81 83       	std	Z+1, r24	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     976:	ed 81       	ldd	r30, Y+5	; 0x05
     978:	fe 81       	ldd	r31, Y+6	; 0x06
     97a:	8b 81       	ldd	r24, Y+3	; 0x03
     97c:	9c 81       	ldd	r25, Y+4	; 0x04
     97e:	91 87       	std	Z+9, r25	; 0x09
     980:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     982:	eb 81       	ldd	r30, Y+3	; 0x03
     984:	fc 81       	ldd	r31, Y+4	; 0x04
     986:	80 81       	ld	r24, Z
     988:	8f 5f       	subi	r24, 0xFF	; 255
     98a:	eb 81       	ldd	r30, Y+3	; 0x03
     98c:	fc 81       	ldd	r31, Y+4	; 0x04
     98e:	80 83       	st	Z, r24
}
     990:	26 96       	adiw	r28, 0x06	; 6
     992:	0f b6       	in	r0, 0x3f	; 63
     994:	f8 94       	cli
     996:	de bf       	out	0x3e, r29	; 62
     998:	0f be       	out	0x3f, r0	; 63
     99a:	cd bf       	out	0x3d, r28	; 61
     99c:	cf 91       	pop	r28
     99e:	df 91       	pop	r29
     9a0:	08 95       	ret

000009a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     9a2:	df 93       	push	r29
     9a4:	cf 93       	push	r28
     9a6:	cd b7       	in	r28, 0x3d	; 61
     9a8:	de b7       	in	r29, 0x3e	; 62
     9aa:	28 97       	sbiw	r28, 0x08	; 8
     9ac:	0f b6       	in	r0, 0x3f	; 63
     9ae:	f8 94       	cli
     9b0:	de bf       	out	0x3e, r29	; 62
     9b2:	0f be       	out	0x3f, r0	; 63
     9b4:	cd bf       	out	0x3d, r28	; 61
     9b6:	9e 83       	std	Y+6, r25	; 0x06
     9b8:	8d 83       	std	Y+5, r24	; 0x05
     9ba:	78 87       	std	Y+8, r23	; 0x08
     9bc:	6f 83       	std	Y+7, r22	; 0x07
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     9be:	ef 81       	ldd	r30, Y+7	; 0x07
     9c0:	f8 85       	ldd	r31, Y+8	; 0x08
     9c2:	80 81       	ld	r24, Z
     9c4:	91 81       	ldd	r25, Z+1	; 0x01
     9c6:	9a 83       	std	Y+2, r25	; 0x02
     9c8:	89 83       	std	Y+1, r24	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     9ca:	89 81       	ldd	r24, Y+1	; 0x01
     9cc:	9a 81       	ldd	r25, Y+2	; 0x02
     9ce:	2f ef       	ldi	r18, 0xFF	; 255
     9d0:	8f 3f       	cpi	r24, 0xFF	; 255
     9d2:	92 07       	cpc	r25, r18
     9d4:	39 f4       	brne	.+14     	; 0x9e4 <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     9d6:	ed 81       	ldd	r30, Y+5	; 0x05
     9d8:	fe 81       	ldd	r31, Y+6	; 0x06
     9da:	87 81       	ldd	r24, Z+7	; 0x07
     9dc:	90 85       	ldd	r25, Z+8	; 0x08
     9de:	9c 83       	std	Y+4, r25	; 0x04
     9e0:	8b 83       	std	Y+3, r24	; 0x03
     9e2:	18 c0       	rjmp	.+48     	; 0xa14 <vListInsert+0x72>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     9e4:	8d 81       	ldd	r24, Y+5	; 0x05
     9e6:	9e 81       	ldd	r25, Y+6	; 0x06
     9e8:	03 96       	adiw	r24, 0x03	; 3
     9ea:	9c 83       	std	Y+4, r25	; 0x04
     9ec:	8b 83       	std	Y+3, r24	; 0x03
     9ee:	06 c0       	rjmp	.+12     	; 0x9fc <vListInsert+0x5a>
     9f0:	eb 81       	ldd	r30, Y+3	; 0x03
     9f2:	fc 81       	ldd	r31, Y+4	; 0x04
     9f4:	82 81       	ldd	r24, Z+2	; 0x02
     9f6:	93 81       	ldd	r25, Z+3	; 0x03
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	eb 81       	ldd	r30, Y+3	; 0x03
     9fe:	fc 81       	ldd	r31, Y+4	; 0x04
     a00:	02 80       	ldd	r0, Z+2	; 0x02
     a02:	f3 81       	ldd	r31, Z+3	; 0x03
     a04:	e0 2d       	mov	r30, r0
     a06:	20 81       	ld	r18, Z
     a08:	31 81       	ldd	r19, Z+1	; 0x01
     a0a:	89 81       	ldd	r24, Y+1	; 0x01
     a0c:	9a 81       	ldd	r25, Y+2	; 0x02
     a0e:	82 17       	cp	r24, r18
     a10:	93 07       	cpc	r25, r19
     a12:	70 f7       	brcc	.-36     	; 0x9f0 <vListInsert+0x4e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     a14:	eb 81       	ldd	r30, Y+3	; 0x03
     a16:	fc 81       	ldd	r31, Y+4	; 0x04
     a18:	82 81       	ldd	r24, Z+2	; 0x02
     a1a:	93 81       	ldd	r25, Z+3	; 0x03
     a1c:	ef 81       	ldd	r30, Y+7	; 0x07
     a1e:	f8 85       	ldd	r31, Y+8	; 0x08
     a20:	93 83       	std	Z+3, r25	; 0x03
     a22:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     a24:	ef 81       	ldd	r30, Y+7	; 0x07
     a26:	f8 85       	ldd	r31, Y+8	; 0x08
     a28:	02 80       	ldd	r0, Z+2	; 0x02
     a2a:	f3 81       	ldd	r31, Z+3	; 0x03
     a2c:	e0 2d       	mov	r30, r0
     a2e:	8f 81       	ldd	r24, Y+7	; 0x07
     a30:	98 85       	ldd	r25, Y+8	; 0x08
     a32:	95 83       	std	Z+5, r25	; 0x05
     a34:	84 83       	std	Z+4, r24	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     a36:	ef 81       	ldd	r30, Y+7	; 0x07
     a38:	f8 85       	ldd	r31, Y+8	; 0x08
     a3a:	8b 81       	ldd	r24, Y+3	; 0x03
     a3c:	9c 81       	ldd	r25, Y+4	; 0x04
     a3e:	95 83       	std	Z+5, r25	; 0x05
     a40:	84 83       	std	Z+4, r24	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     a42:	8f 81       	ldd	r24, Y+7	; 0x07
     a44:	98 85       	ldd	r25, Y+8	; 0x08
     a46:	eb 81       	ldd	r30, Y+3	; 0x03
     a48:	fc 81       	ldd	r31, Y+4	; 0x04
     a4a:	93 83       	std	Z+3, r25	; 0x03
     a4c:	82 83       	std	Z+2, r24	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     a4e:	ef 81       	ldd	r30, Y+7	; 0x07
     a50:	f8 85       	ldd	r31, Y+8	; 0x08
     a52:	8d 81       	ldd	r24, Y+5	; 0x05
     a54:	9e 81       	ldd	r25, Y+6	; 0x06
     a56:	91 87       	std	Z+9, r25	; 0x09
     a58:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     a5a:	ed 81       	ldd	r30, Y+5	; 0x05
     a5c:	fe 81       	ldd	r31, Y+6	; 0x06
     a5e:	80 81       	ld	r24, Z
     a60:	8f 5f       	subi	r24, 0xFF	; 255
     a62:	ed 81       	ldd	r30, Y+5	; 0x05
     a64:	fe 81       	ldd	r31, Y+6	; 0x06
     a66:	80 83       	st	Z, r24
}
     a68:	28 96       	adiw	r28, 0x08	; 8
     a6a:	0f b6       	in	r0, 0x3f	; 63
     a6c:	f8 94       	cli
     a6e:	de bf       	out	0x3e, r29	; 62
     a70:	0f be       	out	0x3f, r0	; 63
     a72:	cd bf       	out	0x3d, r28	; 61
     a74:	cf 91       	pop	r28
     a76:	df 91       	pop	r29
     a78:	08 95       	ret

00000a7a <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
     a7a:	df 93       	push	r29
     a7c:	cf 93       	push	r28
     a7e:	00 d0       	rcall	.+0      	; 0xa80 <vListRemove+0x6>
     a80:	00 d0       	rcall	.+0      	; 0xa82 <vListRemove+0x8>
     a82:	cd b7       	in	r28, 0x3d	; 61
     a84:	de b7       	in	r29, 0x3e	; 62
     a86:	9c 83       	std	Y+4, r25	; 0x04
     a88:	8b 83       	std	Y+3, r24	; 0x03
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     a8a:	eb 81       	ldd	r30, Y+3	; 0x03
     a8c:	fc 81       	ldd	r31, Y+4	; 0x04
     a8e:	a2 81       	ldd	r26, Z+2	; 0x02
     a90:	b3 81       	ldd	r27, Z+3	; 0x03
     a92:	eb 81       	ldd	r30, Y+3	; 0x03
     a94:	fc 81       	ldd	r31, Y+4	; 0x04
     a96:	84 81       	ldd	r24, Z+4	; 0x04
     a98:	95 81       	ldd	r25, Z+5	; 0x05
     a9a:	15 96       	adiw	r26, 0x05	; 5
     a9c:	9c 93       	st	X, r25
     a9e:	8e 93       	st	-X, r24
     aa0:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     aa2:	eb 81       	ldd	r30, Y+3	; 0x03
     aa4:	fc 81       	ldd	r31, Y+4	; 0x04
     aa6:	a4 81       	ldd	r26, Z+4	; 0x04
     aa8:	b5 81       	ldd	r27, Z+5	; 0x05
     aaa:	eb 81       	ldd	r30, Y+3	; 0x03
     aac:	fc 81       	ldd	r31, Y+4	; 0x04
     aae:	82 81       	ldd	r24, Z+2	; 0x02
     ab0:	93 81       	ldd	r25, Z+3	; 0x03
     ab2:	13 96       	adiw	r26, 0x03	; 3
     ab4:	9c 93       	st	X, r25
     ab6:	8e 93       	st	-X, r24
     ab8:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     aba:	eb 81       	ldd	r30, Y+3	; 0x03
     abc:	fc 81       	ldd	r31, Y+4	; 0x04
     abe:	80 85       	ldd	r24, Z+8	; 0x08
     ac0:	91 85       	ldd	r25, Z+9	; 0x09
     ac2:	9a 83       	std	Y+2, r25	; 0x02
     ac4:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     ac6:	e9 81       	ldd	r30, Y+1	; 0x01
     ac8:	fa 81       	ldd	r31, Y+2	; 0x02
     aca:	21 81       	ldd	r18, Z+1	; 0x01
     acc:	32 81       	ldd	r19, Z+2	; 0x02
     ace:	8b 81       	ldd	r24, Y+3	; 0x03
     ad0:	9c 81       	ldd	r25, Y+4	; 0x04
     ad2:	28 17       	cp	r18, r24
     ad4:	39 07       	cpc	r19, r25
     ad6:	41 f4       	brne	.+16     	; 0xae8 <vListRemove+0x6e>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     ad8:	eb 81       	ldd	r30, Y+3	; 0x03
     ada:	fc 81       	ldd	r31, Y+4	; 0x04
     adc:	84 81       	ldd	r24, Z+4	; 0x04
     ade:	95 81       	ldd	r25, Z+5	; 0x05
     ae0:	e9 81       	ldd	r30, Y+1	; 0x01
     ae2:	fa 81       	ldd	r31, Y+2	; 0x02
     ae4:	92 83       	std	Z+2, r25	; 0x02
     ae6:	81 83       	std	Z+1, r24	; 0x01
	}

	pxItemToRemove->pvContainer = NULL;
     ae8:	eb 81       	ldd	r30, Y+3	; 0x03
     aea:	fc 81       	ldd	r31, Y+4	; 0x04
     aec:	11 86       	std	Z+9, r1	; 0x09
     aee:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     af0:	e9 81       	ldd	r30, Y+1	; 0x01
     af2:	fa 81       	ldd	r31, Y+2	; 0x02
     af4:	80 81       	ld	r24, Z
     af6:	81 50       	subi	r24, 0x01	; 1
     af8:	e9 81       	ldd	r30, Y+1	; 0x01
     afa:	fa 81       	ldd	r31, Y+2	; 0x02
     afc:	80 83       	st	Z, r24
}
     afe:	0f 90       	pop	r0
     b00:	0f 90       	pop	r0
     b02:	0f 90       	pop	r0
     b04:	0f 90       	pop	r0
     b06:	cf 91       	pop	r28
     b08:	df 91       	pop	r29
     b0a:	08 95       	ret

00000b0c <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
     b0c:	df 93       	push	r29
     b0e:	cf 93       	push	r28
     b10:	cd b7       	in	r28, 0x3d	; 61
     b12:	de b7       	in	r29, 0x3e	; 62
     b14:	28 97       	sbiw	r28, 0x08	; 8
     b16:	0f b6       	in	r0, 0x3f	; 63
     b18:	f8 94       	cli
     b1a:	de bf       	out	0x3e, r29	; 62
     b1c:	0f be       	out	0x3f, r0	; 63
     b1e:	cd bf       	out	0x3d, r28	; 61
     b20:	9c 83       	std	Y+4, r25	; 0x04
     b22:	8b 83       	std	Y+3, r24	; 0x03
     b24:	7e 83       	std	Y+6, r23	; 0x06
     b26:	6d 83       	std	Y+5, r22	; 0x05
     b28:	58 87       	std	Y+8, r21	; 0x08
     b2a:	4f 83       	std	Y+7, r20	; 0x07
unsigned short usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
     b2c:	eb 81       	ldd	r30, Y+3	; 0x03
     b2e:	fc 81       	ldd	r31, Y+4	; 0x04
     b30:	81 e1       	ldi	r24, 0x11	; 17
     b32:	80 83       	st	Z, r24
	pxTopOfStack--;
     b34:	8b 81       	ldd	r24, Y+3	; 0x03
     b36:	9c 81       	ldd	r25, Y+4	; 0x04
     b38:	01 97       	sbiw	r24, 0x01	; 1
     b3a:	9c 83       	std	Y+4, r25	; 0x04
     b3c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x22;
     b3e:	eb 81       	ldd	r30, Y+3	; 0x03
     b40:	fc 81       	ldd	r31, Y+4	; 0x04
     b42:	82 e2       	ldi	r24, 0x22	; 34
     b44:	80 83       	st	Z, r24
	pxTopOfStack--;
     b46:	8b 81       	ldd	r24, Y+3	; 0x03
     b48:	9c 81       	ldd	r25, Y+4	; 0x04
     b4a:	01 97       	sbiw	r24, 0x01	; 1
     b4c:	9c 83       	std	Y+4, r25	; 0x04
     b4e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x33;
     b50:	eb 81       	ldd	r30, Y+3	; 0x03
     b52:	fc 81       	ldd	r31, Y+4	; 0x04
     b54:	83 e3       	ldi	r24, 0x33	; 51
     b56:	80 83       	st	Z, r24
	pxTopOfStack--;
     b58:	8b 81       	ldd	r24, Y+3	; 0x03
     b5a:	9c 81       	ldd	r25, Y+4	; 0x04
     b5c:	01 97       	sbiw	r24, 0x01	; 1
     b5e:	9c 83       	std	Y+4, r25	; 0x04
     b60:	8b 83       	std	Y+3, r24	; 0x03

	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( unsigned short ) pxCode;
     b62:	8d 81       	ldd	r24, Y+5	; 0x05
     b64:	9e 81       	ldd	r25, Y+6	; 0x06
     b66:	9a 83       	std	Y+2, r25	; 0x02
     b68:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	eb 81       	ldd	r30, Y+3	; 0x03
     b6e:	fc 81       	ldd	r31, Y+4	; 0x04
     b70:	80 83       	st	Z, r24
	pxTopOfStack--;
     b72:	8b 81       	ldd	r24, Y+3	; 0x03
     b74:	9c 81       	ldd	r25, Y+4	; 0x04
     b76:	01 97       	sbiw	r24, 0x01	; 1
     b78:	9c 83       	std	Y+4, r25	; 0x04
     b7a:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
     b7c:	89 81       	ldd	r24, Y+1	; 0x01
     b7e:	9a 81       	ldd	r25, Y+2	; 0x02
     b80:	89 2f       	mov	r24, r25
     b82:	99 27       	eor	r25, r25
     b84:	9a 83       	std	Y+2, r25	; 0x02
     b86:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
     b88:	89 81       	ldd	r24, Y+1	; 0x01
     b8a:	eb 81       	ldd	r30, Y+3	; 0x03
     b8c:	fc 81       	ldd	r31, Y+4	; 0x04
     b8e:	80 83       	st	Z, r24
	pxTopOfStack--;
     b90:	8b 81       	ldd	r24, Y+3	; 0x03
     b92:	9c 81       	ldd	r25, Y+4	; 0x04
     b94:	01 97       	sbiw	r24, 0x01	; 1
     b96:	9c 83       	std	Y+4, r25	; 0x04
     b98:	8b 83       	std	Y+3, r24	; 0x03

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R0 */
     b9a:	eb 81       	ldd	r30, Y+3	; 0x03
     b9c:	fc 81       	ldd	r31, Y+4	; 0x04
     b9e:	10 82       	st	Z, r1
	pxTopOfStack--;
     ba0:	8b 81       	ldd	r24, Y+3	; 0x03
     ba2:	9c 81       	ldd	r25, Y+4	; 0x04
     ba4:	01 97       	sbiw	r24, 0x01	; 1
     ba6:	9c 83       	std	Y+4, r25	; 0x04
     ba8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = portFLAGS_INT_ENABLED;
     baa:	eb 81       	ldd	r30, Y+3	; 0x03
     bac:	fc 81       	ldd	r31, Y+4	; 0x04
     bae:	80 e8       	ldi	r24, 0x80	; 128
     bb0:	80 83       	st	Z, r24
	pxTopOfStack--;
     bb2:	8b 81       	ldd	r24, Y+3	; 0x03
     bb4:	9c 81       	ldd	r25, Y+4	; 0x04
     bb6:	01 97       	sbiw	r24, 0x01	; 1
     bb8:	9c 83       	std	Y+4, r25	; 0x04
     bba:	8b 83       	std	Y+3, r24	; 0x03


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R1 */
     bbc:	eb 81       	ldd	r30, Y+3	; 0x03
     bbe:	fc 81       	ldd	r31, Y+4	; 0x04
     bc0:	10 82       	st	Z, r1
	pxTopOfStack--;
     bc2:	8b 81       	ldd	r24, Y+3	; 0x03
     bc4:	9c 81       	ldd	r25, Y+4	; 0x04
     bc6:	01 97       	sbiw	r24, 0x01	; 1
     bc8:	9c 83       	std	Y+4, r25	; 0x04
     bca:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02;	/* R2 */
     bcc:	eb 81       	ldd	r30, Y+3	; 0x03
     bce:	fc 81       	ldd	r31, Y+4	; 0x04
     bd0:	82 e0       	ldi	r24, 0x02	; 2
     bd2:	80 83       	st	Z, r24
	pxTopOfStack--;
     bd4:	8b 81       	ldd	r24, Y+3	; 0x03
     bd6:	9c 81       	ldd	r25, Y+4	; 0x04
     bd8:	01 97       	sbiw	r24, 0x01	; 1
     bda:	9c 83       	std	Y+4, r25	; 0x04
     bdc:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03;	/* R3 */
     bde:	eb 81       	ldd	r30, Y+3	; 0x03
     be0:	fc 81       	ldd	r31, Y+4	; 0x04
     be2:	83 e0       	ldi	r24, 0x03	; 3
     be4:	80 83       	st	Z, r24
	pxTopOfStack--;
     be6:	8b 81       	ldd	r24, Y+3	; 0x03
     be8:	9c 81       	ldd	r25, Y+4	; 0x04
     bea:	01 97       	sbiw	r24, 0x01	; 1
     bec:	9c 83       	std	Y+4, r25	; 0x04
     bee:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04;	/* R4 */
     bf0:	eb 81       	ldd	r30, Y+3	; 0x03
     bf2:	fc 81       	ldd	r31, Y+4	; 0x04
     bf4:	84 e0       	ldi	r24, 0x04	; 4
     bf6:	80 83       	st	Z, r24
	pxTopOfStack--;
     bf8:	8b 81       	ldd	r24, Y+3	; 0x03
     bfa:	9c 81       	ldd	r25, Y+4	; 0x04
     bfc:	01 97       	sbiw	r24, 0x01	; 1
     bfe:	9c 83       	std	Y+4, r25	; 0x04
     c00:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05;	/* R5 */
     c02:	eb 81       	ldd	r30, Y+3	; 0x03
     c04:	fc 81       	ldd	r31, Y+4	; 0x04
     c06:	85 e0       	ldi	r24, 0x05	; 5
     c08:	80 83       	st	Z, r24
	pxTopOfStack--;
     c0a:	8b 81       	ldd	r24, Y+3	; 0x03
     c0c:	9c 81       	ldd	r25, Y+4	; 0x04
     c0e:	01 97       	sbiw	r24, 0x01	; 1
     c10:	9c 83       	std	Y+4, r25	; 0x04
     c12:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06;	/* R6 */
     c14:	eb 81       	ldd	r30, Y+3	; 0x03
     c16:	fc 81       	ldd	r31, Y+4	; 0x04
     c18:	86 e0       	ldi	r24, 0x06	; 6
     c1a:	80 83       	st	Z, r24
	pxTopOfStack--;
     c1c:	8b 81       	ldd	r24, Y+3	; 0x03
     c1e:	9c 81       	ldd	r25, Y+4	; 0x04
     c20:	01 97       	sbiw	r24, 0x01	; 1
     c22:	9c 83       	std	Y+4, r25	; 0x04
     c24:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07;	/* R7 */
     c26:	eb 81       	ldd	r30, Y+3	; 0x03
     c28:	fc 81       	ldd	r31, Y+4	; 0x04
     c2a:	87 e0       	ldi	r24, 0x07	; 7
     c2c:	80 83       	st	Z, r24
	pxTopOfStack--;
     c2e:	8b 81       	ldd	r24, Y+3	; 0x03
     c30:	9c 81       	ldd	r25, Y+4	; 0x04
     c32:	01 97       	sbiw	r24, 0x01	; 1
     c34:	9c 83       	std	Y+4, r25	; 0x04
     c36:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08;	/* R8 */
     c38:	eb 81       	ldd	r30, Y+3	; 0x03
     c3a:	fc 81       	ldd	r31, Y+4	; 0x04
     c3c:	88 e0       	ldi	r24, 0x08	; 8
     c3e:	80 83       	st	Z, r24
	pxTopOfStack--;
     c40:	8b 81       	ldd	r24, Y+3	; 0x03
     c42:	9c 81       	ldd	r25, Y+4	; 0x04
     c44:	01 97       	sbiw	r24, 0x01	; 1
     c46:	9c 83       	std	Y+4, r25	; 0x04
     c48:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09;	/* R9 */
     c4a:	eb 81       	ldd	r30, Y+3	; 0x03
     c4c:	fc 81       	ldd	r31, Y+4	; 0x04
     c4e:	89 e0       	ldi	r24, 0x09	; 9
     c50:	80 83       	st	Z, r24
	pxTopOfStack--;
     c52:	8b 81       	ldd	r24, Y+3	; 0x03
     c54:	9c 81       	ldd	r25, Y+4	; 0x04
     c56:	01 97       	sbiw	r24, 0x01	; 1
     c58:	9c 83       	std	Y+4, r25	; 0x04
     c5a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10;	/* R10 */
     c5c:	eb 81       	ldd	r30, Y+3	; 0x03
     c5e:	fc 81       	ldd	r31, Y+4	; 0x04
     c60:	80 e1       	ldi	r24, 0x10	; 16
     c62:	80 83       	st	Z, r24
	pxTopOfStack--;
     c64:	8b 81       	ldd	r24, Y+3	; 0x03
     c66:	9c 81       	ldd	r25, Y+4	; 0x04
     c68:	01 97       	sbiw	r24, 0x01	; 1
     c6a:	9c 83       	std	Y+4, r25	; 0x04
     c6c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11;	/* R11 */
     c6e:	eb 81       	ldd	r30, Y+3	; 0x03
     c70:	fc 81       	ldd	r31, Y+4	; 0x04
     c72:	81 e1       	ldi	r24, 0x11	; 17
     c74:	80 83       	st	Z, r24
	pxTopOfStack--;
     c76:	8b 81       	ldd	r24, Y+3	; 0x03
     c78:	9c 81       	ldd	r25, Y+4	; 0x04
     c7a:	01 97       	sbiw	r24, 0x01	; 1
     c7c:	9c 83       	std	Y+4, r25	; 0x04
     c7e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12;	/* R12 */
     c80:	eb 81       	ldd	r30, Y+3	; 0x03
     c82:	fc 81       	ldd	r31, Y+4	; 0x04
     c84:	82 e1       	ldi	r24, 0x12	; 18
     c86:	80 83       	st	Z, r24
	pxTopOfStack--;
     c88:	8b 81       	ldd	r24, Y+3	; 0x03
     c8a:	9c 81       	ldd	r25, Y+4	; 0x04
     c8c:	01 97       	sbiw	r24, 0x01	; 1
     c8e:	9c 83       	std	Y+4, r25	; 0x04
     c90:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x13;	/* R13 */
     c92:	eb 81       	ldd	r30, Y+3	; 0x03
     c94:	fc 81       	ldd	r31, Y+4	; 0x04
     c96:	83 e1       	ldi	r24, 0x13	; 19
     c98:	80 83       	st	Z, r24
	pxTopOfStack--;
     c9a:	8b 81       	ldd	r24, Y+3	; 0x03
     c9c:	9c 81       	ldd	r25, Y+4	; 0x04
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	9c 83       	std	Y+4, r25	; 0x04
     ca2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x14;	/* R14 */
     ca4:	eb 81       	ldd	r30, Y+3	; 0x03
     ca6:	fc 81       	ldd	r31, Y+4	; 0x04
     ca8:	84 e1       	ldi	r24, 0x14	; 20
     caa:	80 83       	st	Z, r24
	pxTopOfStack--;
     cac:	8b 81       	ldd	r24, Y+3	; 0x03
     cae:	9c 81       	ldd	r25, Y+4	; 0x04
     cb0:	01 97       	sbiw	r24, 0x01	; 1
     cb2:	9c 83       	std	Y+4, r25	; 0x04
     cb4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x15;	/* R15 */
     cb6:	eb 81       	ldd	r30, Y+3	; 0x03
     cb8:	fc 81       	ldd	r31, Y+4	; 0x04
     cba:	85 e1       	ldi	r24, 0x15	; 21
     cbc:	80 83       	st	Z, r24
	pxTopOfStack--;
     cbe:	8b 81       	ldd	r24, Y+3	; 0x03
     cc0:	9c 81       	ldd	r25, Y+4	; 0x04
     cc2:	01 97       	sbiw	r24, 0x01	; 1
     cc4:	9c 83       	std	Y+4, r25	; 0x04
     cc6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x16;	/* R16 */
     cc8:	eb 81       	ldd	r30, Y+3	; 0x03
     cca:	fc 81       	ldd	r31, Y+4	; 0x04
     ccc:	86 e1       	ldi	r24, 0x16	; 22
     cce:	80 83       	st	Z, r24
	pxTopOfStack--;
     cd0:	8b 81       	ldd	r24, Y+3	; 0x03
     cd2:	9c 81       	ldd	r25, Y+4	; 0x04
     cd4:	01 97       	sbiw	r24, 0x01	; 1
     cd6:	9c 83       	std	Y+4, r25	; 0x04
     cd8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x17;	/* R17 */
     cda:	eb 81       	ldd	r30, Y+3	; 0x03
     cdc:	fc 81       	ldd	r31, Y+4	; 0x04
     cde:	87 e1       	ldi	r24, 0x17	; 23
     ce0:	80 83       	st	Z, r24
	pxTopOfStack--;
     ce2:	8b 81       	ldd	r24, Y+3	; 0x03
     ce4:	9c 81       	ldd	r25, Y+4	; 0x04
     ce6:	01 97       	sbiw	r24, 0x01	; 1
     ce8:	9c 83       	std	Y+4, r25	; 0x04
     cea:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x18;	/* R18 */
     cec:	eb 81       	ldd	r30, Y+3	; 0x03
     cee:	fc 81       	ldd	r31, Y+4	; 0x04
     cf0:	88 e1       	ldi	r24, 0x18	; 24
     cf2:	80 83       	st	Z, r24
	pxTopOfStack--;
     cf4:	8b 81       	ldd	r24, Y+3	; 0x03
     cf6:	9c 81       	ldd	r25, Y+4	; 0x04
     cf8:	01 97       	sbiw	r24, 0x01	; 1
     cfa:	9c 83       	std	Y+4, r25	; 0x04
     cfc:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x19;	/* R19 */
     cfe:	eb 81       	ldd	r30, Y+3	; 0x03
     d00:	fc 81       	ldd	r31, Y+4	; 0x04
     d02:	89 e1       	ldi	r24, 0x19	; 25
     d04:	80 83       	st	Z, r24
	pxTopOfStack--;
     d06:	8b 81       	ldd	r24, Y+3	; 0x03
     d08:	9c 81       	ldd	r25, Y+4	; 0x04
     d0a:	01 97       	sbiw	r24, 0x01	; 1
     d0c:	9c 83       	std	Y+4, r25	; 0x04
     d0e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x20;	/* R20 */
     d10:	eb 81       	ldd	r30, Y+3	; 0x03
     d12:	fc 81       	ldd	r31, Y+4	; 0x04
     d14:	80 e2       	ldi	r24, 0x20	; 32
     d16:	80 83       	st	Z, r24
	pxTopOfStack--;
     d18:	8b 81       	ldd	r24, Y+3	; 0x03
     d1a:	9c 81       	ldd	r25, Y+4	; 0x04
     d1c:	01 97       	sbiw	r24, 0x01	; 1
     d1e:	9c 83       	std	Y+4, r25	; 0x04
     d20:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x21;	/* R21 */
     d22:	eb 81       	ldd	r30, Y+3	; 0x03
     d24:	fc 81       	ldd	r31, Y+4	; 0x04
     d26:	81 e2       	ldi	r24, 0x21	; 33
     d28:	80 83       	st	Z, r24
	pxTopOfStack--;
     d2a:	8b 81       	ldd	r24, Y+3	; 0x03
     d2c:	9c 81       	ldd	r25, Y+4	; 0x04
     d2e:	01 97       	sbiw	r24, 0x01	; 1
     d30:	9c 83       	std	Y+4, r25	; 0x04
     d32:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x22;	/* R22 */
     d34:	eb 81       	ldd	r30, Y+3	; 0x03
     d36:	fc 81       	ldd	r31, Y+4	; 0x04
     d38:	82 e2       	ldi	r24, 0x22	; 34
     d3a:	80 83       	st	Z, r24
	pxTopOfStack--;
     d3c:	8b 81       	ldd	r24, Y+3	; 0x03
     d3e:	9c 81       	ldd	r25, Y+4	; 0x04
     d40:	01 97       	sbiw	r24, 0x01	; 1
     d42:	9c 83       	std	Y+4, r25	; 0x04
     d44:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x23;	/* R23 */
     d46:	eb 81       	ldd	r30, Y+3	; 0x03
     d48:	fc 81       	ldd	r31, Y+4	; 0x04
     d4a:	83 e2       	ldi	r24, 0x23	; 35
     d4c:	80 83       	st	Z, r24
	pxTopOfStack--;
     d4e:	8b 81       	ldd	r24, Y+3	; 0x03
     d50:	9c 81       	ldd	r25, Y+4	; 0x04
     d52:	01 97       	sbiw	r24, 0x01	; 1
     d54:	9c 83       	std	Y+4, r25	; 0x04
     d56:	8b 83       	std	Y+3, r24	; 0x03

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( unsigned short ) pvParameters;
     d58:	8f 81       	ldd	r24, Y+7	; 0x07
     d5a:	98 85       	ldd	r25, Y+8	; 0x08
     d5c:	9a 83       	std	Y+2, r25	; 0x02
     d5e:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
     d60:	89 81       	ldd	r24, Y+1	; 0x01
     d62:	eb 81       	ldd	r30, Y+3	; 0x03
     d64:	fc 81       	ldd	r31, Y+4	; 0x04
     d66:	80 83       	st	Z, r24
	pxTopOfStack--;
     d68:	8b 81       	ldd	r24, Y+3	; 0x03
     d6a:	9c 81       	ldd	r25, Y+4	; 0x04
     d6c:	01 97       	sbiw	r24, 0x01	; 1
     d6e:	9c 83       	std	Y+4, r25	; 0x04
     d70:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
     d72:	89 81       	ldd	r24, Y+1	; 0x01
     d74:	9a 81       	ldd	r25, Y+2	; 0x02
     d76:	89 2f       	mov	r24, r25
     d78:	99 27       	eor	r25, r25
     d7a:	9a 83       	std	Y+2, r25	; 0x02
     d7c:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
     d7e:	89 81       	ldd	r24, Y+1	; 0x01
     d80:	eb 81       	ldd	r30, Y+3	; 0x03
     d82:	fc 81       	ldd	r31, Y+4	; 0x04
     d84:	80 83       	st	Z, r24
	pxTopOfStack--;
     d86:	8b 81       	ldd	r24, Y+3	; 0x03
     d88:	9c 81       	ldd	r25, Y+4	; 0x04
     d8a:	01 97       	sbiw	r24, 0x01	; 1
     d8c:	9c 83       	std	Y+4, r25	; 0x04
     d8e:	8b 83       	std	Y+3, r24	; 0x03

	*pxTopOfStack = ( portSTACK_TYPE ) 0x26;	/* R26 X */
     d90:	eb 81       	ldd	r30, Y+3	; 0x03
     d92:	fc 81       	ldd	r31, Y+4	; 0x04
     d94:	86 e2       	ldi	r24, 0x26	; 38
     d96:	80 83       	st	Z, r24
	pxTopOfStack--;
     d98:	8b 81       	ldd	r24, Y+3	; 0x03
     d9a:	9c 81       	ldd	r25, Y+4	; 0x04
     d9c:	01 97       	sbiw	r24, 0x01	; 1
     d9e:	9c 83       	std	Y+4, r25	; 0x04
     da0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x27;	/* R27 */
     da2:	eb 81       	ldd	r30, Y+3	; 0x03
     da4:	fc 81       	ldd	r31, Y+4	; 0x04
     da6:	87 e2       	ldi	r24, 0x27	; 39
     da8:	80 83       	st	Z, r24
	pxTopOfStack--;
     daa:	8b 81       	ldd	r24, Y+3	; 0x03
     dac:	9c 81       	ldd	r25, Y+4	; 0x04
     dae:	01 97       	sbiw	r24, 0x01	; 1
     db0:	9c 83       	std	Y+4, r25	; 0x04
     db2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x28;	/* R28 Y */
     db4:	eb 81       	ldd	r30, Y+3	; 0x03
     db6:	fc 81       	ldd	r31, Y+4	; 0x04
     db8:	88 e2       	ldi	r24, 0x28	; 40
     dba:	80 83       	st	Z, r24
	pxTopOfStack--;
     dbc:	8b 81       	ldd	r24, Y+3	; 0x03
     dbe:	9c 81       	ldd	r25, Y+4	; 0x04
     dc0:	01 97       	sbiw	r24, 0x01	; 1
     dc2:	9c 83       	std	Y+4, r25	; 0x04
     dc4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x29;	/* R29 */
     dc6:	eb 81       	ldd	r30, Y+3	; 0x03
     dc8:	fc 81       	ldd	r31, Y+4	; 0x04
     dca:	89 e2       	ldi	r24, 0x29	; 41
     dcc:	80 83       	st	Z, r24
	pxTopOfStack--;
     dce:	8b 81       	ldd	r24, Y+3	; 0x03
     dd0:	9c 81       	ldd	r25, Y+4	; 0x04
     dd2:	01 97       	sbiw	r24, 0x01	; 1
     dd4:	9c 83       	std	Y+4, r25	; 0x04
     dd6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x30;	/* R30 Z */
     dd8:	eb 81       	ldd	r30, Y+3	; 0x03
     dda:	fc 81       	ldd	r31, Y+4	; 0x04
     ddc:	80 e3       	ldi	r24, 0x30	; 48
     dde:	80 83       	st	Z, r24
	pxTopOfStack--;
     de0:	8b 81       	ldd	r24, Y+3	; 0x03
     de2:	9c 81       	ldd	r25, Y+4	; 0x04
     de4:	01 97       	sbiw	r24, 0x01	; 1
     de6:	9c 83       	std	Y+4, r25	; 0x04
     de8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x031;	/* R31 */
     dea:	eb 81       	ldd	r30, Y+3	; 0x03
     dec:	fc 81       	ldd	r31, Y+4	; 0x04
     dee:	81 e3       	ldi	r24, 0x31	; 49
     df0:	80 83       	st	Z, r24
	pxTopOfStack--;
     df2:	8b 81       	ldd	r24, Y+3	; 0x03
     df4:	9c 81       	ldd	r25, Y+4	; 0x04
     df6:	01 97       	sbiw	r24, 0x01	; 1
     df8:	9c 83       	std	Y+4, r25	; 0x04
     dfa:	8b 83       	std	Y+3, r24	; 0x03

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
     dfc:	8b 81       	ldd	r24, Y+3	; 0x03
     dfe:	9c 81       	ldd	r25, Y+4	; 0x04
}
     e00:	28 96       	adiw	r28, 0x08	; 8
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	f8 94       	cli
     e06:	de bf       	out	0x3e, r29	; 62
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	cd bf       	out	0x3d, r28	; 61
     e0c:	cf 91       	pop	r28
     e0e:	df 91       	pop	r29
     e10:	08 95       	ret

00000e12 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
     e12:	df 93       	push	r29
     e14:	cf 93       	push	r28
     e16:	cd b7       	in	r28, 0x3d	; 61
     e18:	de b7       	in	r29, 0x3e	; 62
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();
     e1a:	0e 94 f9 07 	call	0xff2	; 0xff2 <prvSetupTimerInterrupt>

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
     e1e:	a0 91 08 03 	lds	r26, 0x0308
     e22:	b0 91 09 03 	lds	r27, 0x0309
     e26:	cd 91       	ld	r28, X+
     e28:	cd bf       	out	0x3d, r28	; 61
     e2a:	dd 91       	ld	r29, X+
     e2c:	de bf       	out	0x3e, r29	; 62
     e2e:	ff 91       	pop	r31
     e30:	ef 91       	pop	r30
     e32:	df 91       	pop	r29
     e34:	cf 91       	pop	r28
     e36:	bf 91       	pop	r27
     e38:	af 91       	pop	r26
     e3a:	9f 91       	pop	r25
     e3c:	8f 91       	pop	r24
     e3e:	7f 91       	pop	r23
     e40:	6f 91       	pop	r22
     e42:	5f 91       	pop	r21
     e44:	4f 91       	pop	r20
     e46:	3f 91       	pop	r19
     e48:	2f 91       	pop	r18
     e4a:	1f 91       	pop	r17
     e4c:	0f 91       	pop	r16
     e4e:	ff 90       	pop	r15
     e50:	ef 90       	pop	r14
     e52:	df 90       	pop	r13
     e54:	cf 90       	pop	r12
     e56:	bf 90       	pop	r11
     e58:	af 90       	pop	r10
     e5a:	9f 90       	pop	r9
     e5c:	8f 90       	pop	r8
     e5e:	7f 90       	pop	r7
     e60:	6f 90       	pop	r6
     e62:	5f 90       	pop	r5
     e64:	4f 90       	pop	r4
     e66:	3f 90       	pop	r3
     e68:	2f 90       	pop	r2
     e6a:	1f 90       	pop	r1
     e6c:	0f 90       	pop	r0
     e6e:	0f be       	out	0x3f, r0	; 63
     e70:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
     e72:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
     e74:	81 e0       	ldi	r24, 0x01	; 1
}
     e76:	cf 91       	pop	r28
     e78:	df 91       	pop	r29
     e7a:	08 95       	ret

00000e7c <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     e7c:	df 93       	push	r29
     e7e:	cf 93       	push	r28
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
     e84:	cf 91       	pop	r28
     e86:	df 91       	pop	r29
     e88:	08 95       	ret

00000e8a <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     e8a:	0f 92       	push	r0
     e8c:	0f b6       	in	r0, 0x3f	; 63
     e8e:	f8 94       	cli
     e90:	0f 92       	push	r0
     e92:	1f 92       	push	r1
     e94:	11 24       	eor	r1, r1
     e96:	2f 92       	push	r2
     e98:	3f 92       	push	r3
     e9a:	4f 92       	push	r4
     e9c:	5f 92       	push	r5
     e9e:	6f 92       	push	r6
     ea0:	7f 92       	push	r7
     ea2:	8f 92       	push	r8
     ea4:	9f 92       	push	r9
     ea6:	af 92       	push	r10
     ea8:	bf 92       	push	r11
     eaa:	cf 92       	push	r12
     eac:	df 92       	push	r13
     eae:	ef 92       	push	r14
     eb0:	ff 92       	push	r15
     eb2:	0f 93       	push	r16
     eb4:	1f 93       	push	r17
     eb6:	2f 93       	push	r18
     eb8:	3f 93       	push	r19
     eba:	4f 93       	push	r20
     ebc:	5f 93       	push	r21
     ebe:	6f 93       	push	r22
     ec0:	7f 93       	push	r23
     ec2:	8f 93       	push	r24
     ec4:	9f 93       	push	r25
     ec6:	af 93       	push	r26
     ec8:	bf 93       	push	r27
     eca:	cf 93       	push	r28
     ecc:	df 93       	push	r29
     ece:	ef 93       	push	r30
     ed0:	ff 93       	push	r31
     ed2:	a0 91 08 03 	lds	r26, 0x0308
     ed6:	b0 91 09 03 	lds	r27, 0x0309
     eda:	0d b6       	in	r0, 0x3d	; 61
     edc:	0d 92       	st	X+, r0
     ede:	0e b6       	in	r0, 0x3e	; 62
     ee0:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     ee2:	0e 94 b5 10 	call	0x216a	; 0x216a <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     ee6:	a0 91 08 03 	lds	r26, 0x0308
     eea:	b0 91 09 03 	lds	r27, 0x0309
     eee:	cd 91       	ld	r28, X+
     ef0:	cd bf       	out	0x3d, r28	; 61
     ef2:	dd 91       	ld	r29, X+
     ef4:	de bf       	out	0x3e, r29	; 62
     ef6:	ff 91       	pop	r31
     ef8:	ef 91       	pop	r30
     efa:	df 91       	pop	r29
     efc:	cf 91       	pop	r28
     efe:	bf 91       	pop	r27
     f00:	af 91       	pop	r26
     f02:	9f 91       	pop	r25
     f04:	8f 91       	pop	r24
     f06:	7f 91       	pop	r23
     f08:	6f 91       	pop	r22
     f0a:	5f 91       	pop	r21
     f0c:	4f 91       	pop	r20
     f0e:	3f 91       	pop	r19
     f10:	2f 91       	pop	r18
     f12:	1f 91       	pop	r17
     f14:	0f 91       	pop	r16
     f16:	ff 90       	pop	r15
     f18:	ef 90       	pop	r14
     f1a:	df 90       	pop	r13
     f1c:	cf 90       	pop	r12
     f1e:	bf 90       	pop	r11
     f20:	af 90       	pop	r10
     f22:	9f 90       	pop	r9
     f24:	8f 90       	pop	r8
     f26:	7f 90       	pop	r7
     f28:	6f 90       	pop	r6
     f2a:	5f 90       	pop	r5
     f2c:	4f 90       	pop	r4
     f2e:	3f 90       	pop	r3
     f30:	2f 90       	pop	r2
     f32:	1f 90       	pop	r1
     f34:	0f 90       	pop	r0
     f36:	0f be       	out	0x3f, r0	; 63
     f38:	0f 90       	pop	r0

	asm volatile ( "ret" );
     f3a:	08 95       	ret

00000f3c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     f3c:	0f 92       	push	r0
     f3e:	0f b6       	in	r0, 0x3f	; 63
     f40:	f8 94       	cli
     f42:	0f 92       	push	r0
     f44:	1f 92       	push	r1
     f46:	11 24       	eor	r1, r1
     f48:	2f 92       	push	r2
     f4a:	3f 92       	push	r3
     f4c:	4f 92       	push	r4
     f4e:	5f 92       	push	r5
     f50:	6f 92       	push	r6
     f52:	7f 92       	push	r7
     f54:	8f 92       	push	r8
     f56:	9f 92       	push	r9
     f58:	af 92       	push	r10
     f5a:	bf 92       	push	r11
     f5c:	cf 92       	push	r12
     f5e:	df 92       	push	r13
     f60:	ef 92       	push	r14
     f62:	ff 92       	push	r15
     f64:	0f 93       	push	r16
     f66:	1f 93       	push	r17
     f68:	2f 93       	push	r18
     f6a:	3f 93       	push	r19
     f6c:	4f 93       	push	r20
     f6e:	5f 93       	push	r21
     f70:	6f 93       	push	r22
     f72:	7f 93       	push	r23
     f74:	8f 93       	push	r24
     f76:	9f 93       	push	r25
     f78:	af 93       	push	r26
     f7a:	bf 93       	push	r27
     f7c:	cf 93       	push	r28
     f7e:	df 93       	push	r29
     f80:	ef 93       	push	r30
     f82:	ff 93       	push	r31
     f84:	a0 91 08 03 	lds	r26, 0x0308
     f88:	b0 91 09 03 	lds	r27, 0x0309
     f8c:	0d b6       	in	r0, 0x3d	; 61
     f8e:	0d 92       	st	X+, r0
     f90:	0e b6       	in	r0, 0x3e	; 62
     f92:	0d 92       	st	X+, r0
	vTaskIncrementTick();
     f94:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <vTaskIncrementTick>
	vTaskSwitchContext();
     f98:	0e 94 b5 10 	call	0x216a	; 0x216a <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     f9c:	a0 91 08 03 	lds	r26, 0x0308
     fa0:	b0 91 09 03 	lds	r27, 0x0309
     fa4:	cd 91       	ld	r28, X+
     fa6:	cd bf       	out	0x3d, r28	; 61
     fa8:	dd 91       	ld	r29, X+
     faa:	de bf       	out	0x3e, r29	; 62
     fac:	ff 91       	pop	r31
     fae:	ef 91       	pop	r30
     fb0:	df 91       	pop	r29
     fb2:	cf 91       	pop	r28
     fb4:	bf 91       	pop	r27
     fb6:	af 91       	pop	r26
     fb8:	9f 91       	pop	r25
     fba:	8f 91       	pop	r24
     fbc:	7f 91       	pop	r23
     fbe:	6f 91       	pop	r22
     fc0:	5f 91       	pop	r21
     fc2:	4f 91       	pop	r20
     fc4:	3f 91       	pop	r19
     fc6:	2f 91       	pop	r18
     fc8:	1f 91       	pop	r17
     fca:	0f 91       	pop	r16
     fcc:	ff 90       	pop	r15
     fce:	ef 90       	pop	r14
     fd0:	df 90       	pop	r13
     fd2:	cf 90       	pop	r12
     fd4:	bf 90       	pop	r11
     fd6:	af 90       	pop	r10
     fd8:	9f 90       	pop	r9
     fda:	8f 90       	pop	r8
     fdc:	7f 90       	pop	r7
     fde:	6f 90       	pop	r6
     fe0:	5f 90       	pop	r5
     fe2:	4f 90       	pop	r4
     fe4:	3f 90       	pop	r3
     fe6:	2f 90       	pop	r2
     fe8:	1f 90       	pop	r1
     fea:	0f 90       	pop	r0
     fec:	0f be       	out	0x3f, r0	; 63
     fee:	0f 90       	pop	r0

	asm volatile ( "ret" );
     ff0:	08 95       	ret

00000ff2 <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
     ff2:	df 93       	push	r29
     ff4:	cf 93       	push	r28
     ff6:	00 d0       	rcall	.+0      	; 0xff8 <prvSetupTimerInterrupt+0x6>
     ff8:	00 d0       	rcall	.+0      	; 0xffa <prvSetupTimerInterrupt+0x8>
     ffa:	00 d0       	rcall	.+0      	; 0xffc <prvSetupTimerInterrupt+0xa>
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
unsigned char ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    1000:	80 e4       	ldi	r24, 0x40	; 64
    1002:	9f e1       	ldi	r25, 0x1F	; 31
    1004:	a0 e0       	ldi	r26, 0x00	; 0
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	8b 83       	std	Y+3, r24	; 0x03
    100a:	9c 83       	std	Y+4, r25	; 0x04
    100c:	ad 83       	std	Y+5, r26	; 0x05
    100e:	be 83       	std	Y+6, r27	; 0x06

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	9c 81       	ldd	r25, Y+4	; 0x04
    1014:	ad 81       	ldd	r26, Y+5	; 0x05
    1016:	be 81       	ldd	r27, Y+6	; 0x06
    1018:	68 94       	set
    101a:	15 f8       	bld	r1, 5
    101c:	b6 95       	lsr	r27
    101e:	a7 95       	ror	r26
    1020:	97 95       	ror	r25
    1022:	87 95       	ror	r24
    1024:	16 94       	lsr	r1
    1026:	d1 f7       	brne	.-12     	; 0x101c <prvSetupTimerInterrupt+0x2a>
    1028:	8b 83       	std	Y+3, r24	; 0x03
    102a:	9c 83       	std	Y+4, r25	; 0x04
    102c:	ad 83       	std	Y+5, r26	; 0x05
    102e:	be 83       	std	Y+6, r27	; 0x06

	/* Adjust for correct value. */
	ulCompareMatch -= ( unsigned long ) 1;
    1030:	8b 81       	ldd	r24, Y+3	; 0x03
    1032:	9c 81       	ldd	r25, Y+4	; 0x04
    1034:	ad 81       	ldd	r26, Y+5	; 0x05
    1036:	be 81       	ldd	r27, Y+6	; 0x06
    1038:	01 97       	sbiw	r24, 0x01	; 1
    103a:	a1 09       	sbc	r26, r1
    103c:	b1 09       	sbc	r27, r1
    103e:	8b 83       	std	Y+3, r24	; 0x03
    1040:	9c 83       	std	Y+4, r25	; 0x04
    1042:	ad 83       	std	Y+5, r26	; 0x05
    1044:	be 83       	std	Y+6, r27	; 0x06

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
    1046:	8b 81       	ldd	r24, Y+3	; 0x03
    1048:	89 83       	std	Y+1, r24	; 0x01
	ulCompareMatch >>= 8;
    104a:	8b 81       	ldd	r24, Y+3	; 0x03
    104c:	9c 81       	ldd	r25, Y+4	; 0x04
    104e:	ad 81       	ldd	r26, Y+5	; 0x05
    1050:	be 81       	ldd	r27, Y+6	; 0x06
    1052:	89 2f       	mov	r24, r25
    1054:	9a 2f       	mov	r25, r26
    1056:	ab 2f       	mov	r26, r27
    1058:	bb 27       	eor	r27, r27
    105a:	8b 83       	std	Y+3, r24	; 0x03
    105c:	9c 83       	std	Y+4, r25	; 0x04
    105e:	ad 83       	std	Y+5, r26	; 0x05
    1060:	be 83       	std	Y+6, r27	; 0x06
	ucHighByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
    1062:	8b 81       	ldd	r24, Y+3	; 0x03
    1064:	8a 83       	std	Y+2, r24	; 0x02
	OCR1AH = ucHighByte;
    1066:	eb e4       	ldi	r30, 0x4B	; 75
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	8a 81       	ldd	r24, Y+2	; 0x02
    106c:	80 83       	st	Z, r24
	OCR1AL = ucLowByte;
    106e:	ea e4       	ldi	r30, 0x4A	; 74
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	89 81       	ldd	r24, Y+1	; 0x01
    1074:	80 83       	st	Z, r24

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    1076:	8b e0       	ldi	r24, 0x0B	; 11
    1078:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = ucLowByte;
    107a:	ee e4       	ldi	r30, 0x4E	; 78
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	89 81       	ldd	r24, Y+1	; 0x01
    1080:	80 83       	st	Z, r24

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    1082:	e9 e5       	ldi	r30, 0x59	; 89
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	89 83       	std	Y+1, r24	; 0x01
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	80 61       	ori	r24, 0x10	; 16
    108e:	89 83       	std	Y+1, r24	; 0x01
	TIMSK = ucLowByte;
    1090:	e9 e5       	ldi	r30, 0x59	; 89
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	89 81       	ldd	r24, Y+1	; 0x01
    1096:	80 83       	st	Z, r24
}
    1098:	26 96       	adiw	r28, 0x06	; 6
    109a:	0f b6       	in	r0, 0x3f	; 63
    109c:	f8 94       	cli
    109e:	de bf       	out	0x3e, r29	; 62
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	cd bf       	out	0x3d, r28	; 61
    10a4:	cf 91       	pop	r28
    10a6:	df 91       	pop	r29
    10a8:	08 95       	ret

000010aa <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
	void SIG_OUTPUT_COMPARE1A( void )
	{
		vPortYieldFromTick();
    10aa:	0e 94 9e 07 	call	0xf3c	; 0xf3c <vPortYieldFromTick>
		asm volatile ( "reti" );
    10ae:	18 95       	reti

000010b0 <xQueueCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
{
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
    10b8:	28 97       	sbiw	r28, 0x08	; 8
    10ba:	0f b6       	in	r0, 0x3f	; 63
    10bc:	f8 94       	cli
    10be:	de bf       	out	0x3e, r29	; 62
    10c0:	0f be       	out	0x3f, r0	; 63
    10c2:	cd bf       	out	0x3d, r28	; 61
    10c4:	8f 83       	std	Y+7, r24	; 0x07
    10c6:	68 87       	std	Y+8, r22	; 0x08
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    10c8:	1a 82       	std	Y+2, r1	; 0x02
    10ca:	19 82       	std	Y+1, r1	; 0x01

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    10cc:	8f 81       	ldd	r24, Y+7	; 0x07
    10ce:	88 23       	and	r24, r24
    10d0:	09 f4       	brne	.+2      	; 0x10d4 <xQueueCreate+0x24>
    10d2:	8c c0       	rjmp	.+280    	; 0x11ec <xQueueCreate+0x13c>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    10d4:	8f e1       	ldi	r24, 0x1F	; 31
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	0e 94 df 03 	call	0x7be	; 0x7be <pvPortMalloc>
    10dc:	9e 83       	std	Y+6, r25	; 0x06
    10de:	8d 83       	std	Y+5, r24	; 0x05
		if( pxNewQueue != NULL )
    10e0:	8d 81       	ldd	r24, Y+5	; 0x05
    10e2:	9e 81       	ldd	r25, Y+6	; 0x06
    10e4:	00 97       	sbiw	r24, 0x00	; 0
    10e6:	09 f4       	brne	.+2      	; 0x10ea <xQueueCreate+0x3a>
    10e8:	81 c0       	rjmp	.+258    	; 0x11ec <xQueueCreate+0x13c>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    10ea:	8f 81       	ldd	r24, Y+7	; 0x07
    10ec:	28 2f       	mov	r18, r24
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	88 85       	ldd	r24, Y+8	; 0x08
    10f2:	88 2f       	mov	r24, r24
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	ac 01       	movw	r20, r24
    10f8:	24 9f       	mul	r18, r20
    10fa:	c0 01       	movw	r24, r0
    10fc:	25 9f       	mul	r18, r21
    10fe:	90 0d       	add	r25, r0
    1100:	34 9f       	mul	r19, r20
    1102:	90 0d       	add	r25, r0
    1104:	11 24       	eor	r1, r1
    1106:	01 96       	adiw	r24, 0x01	; 1
    1108:	9c 83       	std	Y+4, r25	; 0x04
    110a:	8b 83       	std	Y+3, r24	; 0x03

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    110c:	8b 81       	ldd	r24, Y+3	; 0x03
    110e:	9c 81       	ldd	r25, Y+4	; 0x04
    1110:	0e 94 df 03 	call	0x7be	; 0x7be <pvPortMalloc>
    1114:	ed 81       	ldd	r30, Y+5	; 0x05
    1116:	fe 81       	ldd	r31, Y+6	; 0x06
    1118:	91 83       	std	Z+1, r25	; 0x01
    111a:	80 83       	st	Z, r24
			if( pxNewQueue->pcHead != NULL )
    111c:	ed 81       	ldd	r30, Y+5	; 0x05
    111e:	fe 81       	ldd	r31, Y+6	; 0x06
    1120:	80 81       	ld	r24, Z
    1122:	91 81       	ldd	r25, Z+1	; 0x01
    1124:	00 97       	sbiw	r24, 0x00	; 0
    1126:	09 f4       	brne	.+2      	; 0x112a <xQueueCreate+0x7a>
    1128:	5d c0       	rjmp	.+186    	; 0x11e4 <xQueueCreate+0x134>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
    112a:	ed 81       	ldd	r30, Y+5	; 0x05
    112c:	fe 81       	ldd	r31, Y+6	; 0x06
    112e:	40 81       	ld	r20, Z
    1130:	51 81       	ldd	r21, Z+1	; 0x01
    1132:	8f 81       	ldd	r24, Y+7	; 0x07
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	88 85       	ldd	r24, Y+8	; 0x08
    113a:	88 2f       	mov	r24, r24
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	bc 01       	movw	r22, r24
    1140:	26 9f       	mul	r18, r22
    1142:	c0 01       	movw	r24, r0
    1144:	27 9f       	mul	r18, r23
    1146:	90 0d       	add	r25, r0
    1148:	36 9f       	mul	r19, r22
    114a:	90 0d       	add	r25, r0
    114c:	11 24       	eor	r1, r1
    114e:	84 0f       	add	r24, r20
    1150:	95 1f       	adc	r25, r21
    1152:	ed 81       	ldd	r30, Y+5	; 0x05
    1154:	fe 81       	ldd	r31, Y+6	; 0x06
    1156:	93 83       	std	Z+3, r25	; 0x03
    1158:	82 83       	std	Z+2, r24	; 0x02
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    115a:	ed 81       	ldd	r30, Y+5	; 0x05
    115c:	fe 81       	ldd	r31, Y+6	; 0x06
    115e:	12 8e       	std	Z+26, r1	; 0x1a
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
    1160:	ed 81       	ldd	r30, Y+5	; 0x05
    1162:	fe 81       	ldd	r31, Y+6	; 0x06
    1164:	80 81       	ld	r24, Z
    1166:	91 81       	ldd	r25, Z+1	; 0x01
    1168:	ed 81       	ldd	r30, Y+5	; 0x05
    116a:	fe 81       	ldd	r31, Y+6	; 0x06
    116c:	95 83       	std	Z+5, r25	; 0x05
    116e:	84 83       	std	Z+4, r24	; 0x04
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
    1170:	ed 81       	ldd	r30, Y+5	; 0x05
    1172:	fe 81       	ldd	r31, Y+6	; 0x06
    1174:	40 81       	ld	r20, Z
    1176:	51 81       	ldd	r21, Z+1	; 0x01
    1178:	8f 81       	ldd	r24, Y+7	; 0x07
    117a:	88 2f       	mov	r24, r24
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	9c 01       	movw	r18, r24
    1180:	21 50       	subi	r18, 0x01	; 1
    1182:	30 40       	sbci	r19, 0x00	; 0
    1184:	88 85       	ldd	r24, Y+8	; 0x08
    1186:	88 2f       	mov	r24, r24
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	bc 01       	movw	r22, r24
    118c:	26 9f       	mul	r18, r22
    118e:	c0 01       	movw	r24, r0
    1190:	27 9f       	mul	r18, r23
    1192:	90 0d       	add	r25, r0
    1194:	36 9f       	mul	r19, r22
    1196:	90 0d       	add	r25, r0
    1198:	11 24       	eor	r1, r1
    119a:	84 0f       	add	r24, r20
    119c:	95 1f       	adc	r25, r21
    119e:	ed 81       	ldd	r30, Y+5	; 0x05
    11a0:	fe 81       	ldd	r31, Y+6	; 0x06
    11a2:	97 83       	std	Z+7, r25	; 0x07
    11a4:	86 83       	std	Z+6, r24	; 0x06
				pxNewQueue->uxLength = uxQueueLength;
    11a6:	ed 81       	ldd	r30, Y+5	; 0x05
    11a8:	fe 81       	ldd	r31, Y+6	; 0x06
    11aa:	8f 81       	ldd	r24, Y+7	; 0x07
    11ac:	83 8f       	std	Z+27, r24	; 0x1b
				pxNewQueue->uxItemSize = uxItemSize;
    11ae:	ed 81       	ldd	r30, Y+5	; 0x05
    11b0:	fe 81       	ldd	r31, Y+6	; 0x06
    11b2:	88 85       	ldd	r24, Y+8	; 0x08
    11b4:	84 8f       	std	Z+28, r24	; 0x1c
				pxNewQueue->xRxLock = queueUNLOCKED;
    11b6:	ed 81       	ldd	r30, Y+5	; 0x05
    11b8:	fe 81       	ldd	r31, Y+6	; 0x06
    11ba:	8f ef       	ldi	r24, 0xFF	; 255
    11bc:	85 8f       	std	Z+29, r24	; 0x1d
				pxNewQueue->xTxLock = queueUNLOCKED;
    11be:	ed 81       	ldd	r30, Y+5	; 0x05
    11c0:	fe 81       	ldd	r31, Y+6	; 0x06
    11c2:	8f ef       	ldi	r24, 0xFF	; 255
    11c4:	86 8f       	std	Z+30, r24	; 0x1e

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    11c6:	8d 81       	ldd	r24, Y+5	; 0x05
    11c8:	9e 81       	ldd	r25, Y+6	; 0x06
    11ca:	08 96       	adiw	r24, 0x08	; 8
    11cc:	0e 94 4b 04 	call	0x896	; 0x896 <vListInitialise>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    11d0:	8d 81       	ldd	r24, Y+5	; 0x05
    11d2:	9e 81       	ldd	r25, Y+6	; 0x06
    11d4:	41 96       	adiw	r24, 0x11	; 17
    11d6:	0e 94 4b 04 	call	0x896	; 0x896 <vListInitialise>

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    11da:	8d 81       	ldd	r24, Y+5	; 0x05
    11dc:	9e 81       	ldd	r25, Y+6	; 0x06
    11de:	9a 83       	std	Y+2, r25	; 0x02
    11e0:	89 83       	std	Y+1, r24	; 0x01
    11e2:	04 c0       	rjmp	.+8      	; 0x11ec <xQueueCreate+0x13c>
			}
			else
			{
				traceQUEUE_CREATE_FAILED();
				vPortFree( pxNewQueue );
    11e4:	8d 81       	ldd	r24, Y+5	; 0x05
    11e6:	9e 81       	ldd	r25, Y+6	; 0x06
    11e8:	0e 94 25 04 	call	0x84a	; 0x84a <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	9a 81       	ldd	r25, Y+2	; 0x02
}
    11f0:	28 96       	adiw	r28, 0x08	; 8
    11f2:	0f b6       	in	r0, 0x3f	; 63
    11f4:	f8 94       	cli
    11f6:	de bf       	out	0x3e, r29	; 62
    11f8:	0f be       	out	0x3f, r0	; 63
    11fa:	cd bf       	out	0x3d, r28	; 61
    11fc:	cf 91       	pop	r28
    11fe:	df 91       	pop	r29
    1200:	08 95       	ret

00001202 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    1202:	df 93       	push	r29
    1204:	cf 93       	push	r28
    1206:	cd b7       	in	r28, 0x3d	; 61
    1208:	de b7       	in	r29, 0x3e	; 62
    120a:	2c 97       	sbiw	r28, 0x0c	; 12
    120c:	0f b6       	in	r0, 0x3f	; 63
    120e:	f8 94       	cli
    1210:	de bf       	out	0x3e, r29	; 62
    1212:	0f be       	out	0x3f, r0	; 63
    1214:	cd bf       	out	0x3d, r28	; 61
    1216:	9e 83       	std	Y+6, r25	; 0x06
    1218:	8d 83       	std	Y+5, r24	; 0x05
    121a:	78 87       	std	Y+8, r23	; 0x08
    121c:	6f 83       	std	Y+7, r22	; 0x07
    121e:	5a 87       	std	Y+10, r21	; 0x0a
    1220:	49 87       	std	Y+9, r20	; 0x09
    1222:	2b 87       	std	Y+11, r18	; 0x0b
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    1224:	19 82       	std	Y+1, r1	; 0x01
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    1226:	0f b6       	in	r0, 0x3f	; 63
    1228:	f8 94       	cli
    122a:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    122c:	ed 81       	ldd	r30, Y+5	; 0x05
    122e:	fe 81       	ldd	r31, Y+6	; 0x06
    1230:	92 8d       	ldd	r25, Z+26	; 0x1a
    1232:	ed 81       	ldd	r30, Y+5	; 0x05
    1234:	fe 81       	ldd	r31, Y+6	; 0x06
    1236:	83 8d       	ldd	r24, Z+27	; 0x1b
    1238:	98 17       	cp	r25, r24
    123a:	d8 f4       	brcc	.+54     	; 0x1272 <xQueueGenericSend+0x70>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    123c:	8d 81       	ldd	r24, Y+5	; 0x05
    123e:	9e 81       	ldd	r25, Y+6	; 0x06
    1240:	2f 81       	ldd	r18, Y+7	; 0x07
    1242:	38 85       	ldd	r19, Y+8	; 0x08
    1244:	b9 01       	movw	r22, r18
    1246:	4b 85       	ldd	r20, Y+11	; 0x0b
    1248:	0e 94 3c 0b 	call	0x1678	; 0x1678 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    124c:	ed 81       	ldd	r30, Y+5	; 0x05
    124e:	fe 81       	ldd	r31, Y+6	; 0x06
    1250:	81 89       	ldd	r24, Z+17	; 0x11
    1252:	88 23       	and	r24, r24
    1254:	49 f0       	breq	.+18     	; 0x1268 <xQueueGenericSend+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    1256:	8d 81       	ldd	r24, Y+5	; 0x05
    1258:	9e 81       	ldd	r25, Y+6	; 0x06
    125a:	41 96       	adiw	r24, 0x11	; 17
    125c:	0e 94 51 11 	call	0x22a2	; 0x22a2 <xTaskRemoveFromEventList>
    1260:	81 30       	cpi	r24, 0x01	; 1
    1262:	11 f4       	brne	.+4      	; 0x1268 <xQueueGenericSend+0x66>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    1264:	0e 94 45 07 	call	0xe8a	; 0xe8a <vPortYield>
					}
				}

				taskEXIT_CRITICAL();
    1268:	0f 90       	pop	r0
    126a:	0f be       	out	0x3f, r0	; 63

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	8c 87       	std	Y+12, r24	; 0x0c
    1270:	5c c0       	rjmp	.+184    	; 0x132a <xQueueGenericSend+0x128>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    1272:	89 85       	ldd	r24, Y+9	; 0x09
    1274:	9a 85       	ldd	r25, Y+10	; 0x0a
    1276:	00 97       	sbiw	r24, 0x00	; 0
    1278:	21 f4       	brne	.+8      	; 0x1282 <xQueueGenericSend+0x80>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    127a:	0f 90       	pop	r0
    127c:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    127e:	1c 86       	std	Y+12, r1	; 0x0c
    1280:	54 c0       	rjmp	.+168    	; 0x132a <xQueueGenericSend+0x128>
				}
				else if( xEntryTimeSet == pdFALSE )
    1282:	89 81       	ldd	r24, Y+1	; 0x01
    1284:	88 23       	and	r24, r24
    1286:	31 f4       	brne	.+12     	; 0x1294 <xQueueGenericSend+0x92>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1288:	ce 01       	movw	r24, r28
    128a:	02 96       	adiw	r24, 0x02	; 2
    128c:	0e 94 b9 11 	call	0x2372	; 0x2372 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	89 83       	std	Y+1, r24	; 0x01
				}
			}
		}
		taskEXIT_CRITICAL();
    1294:	0f 90       	pop	r0
    1296:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1298:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    129c:	0f b6       	in	r0, 0x3f	; 63
    129e:	f8 94       	cli
    12a0:	0f 92       	push	r0
    12a2:	ed 81       	ldd	r30, Y+5	; 0x05
    12a4:	fe 81       	ldd	r31, Y+6	; 0x06
    12a6:	85 8d       	ldd	r24, Z+29	; 0x1d
    12a8:	8f 3f       	cpi	r24, 0xFF	; 255
    12aa:	19 f4       	brne	.+6      	; 0x12b2 <xQueueGenericSend+0xb0>
    12ac:	ed 81       	ldd	r30, Y+5	; 0x05
    12ae:	fe 81       	ldd	r31, Y+6	; 0x06
    12b0:	15 8e       	std	Z+29, r1	; 0x1d
    12b2:	ed 81       	ldd	r30, Y+5	; 0x05
    12b4:	fe 81       	ldd	r31, Y+6	; 0x06
    12b6:	86 8d       	ldd	r24, Z+30	; 0x1e
    12b8:	8f 3f       	cpi	r24, 0xFF	; 255
    12ba:	19 f4       	brne	.+6      	; 0x12c2 <xQueueGenericSend+0xc0>
    12bc:	ed 81       	ldd	r30, Y+5	; 0x05
    12be:	fe 81       	ldd	r31, Y+6	; 0x06
    12c0:	16 8e       	std	Z+30, r1	; 0x1e
    12c2:	0f 90       	pop	r0
    12c4:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    12c6:	ce 01       	movw	r24, r28
    12c8:	02 96       	adiw	r24, 0x02	; 2
    12ca:	9e 01       	movw	r18, r28
    12cc:	27 5f       	subi	r18, 0xF7	; 247
    12ce:	3f 4f       	sbci	r19, 0xFF	; 255
    12d0:	b9 01       	movw	r22, r18
    12d2:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <xTaskCheckForTimeOut>
    12d6:	88 23       	and	r24, r24
    12d8:	09 f5       	brne	.+66     	; 0x131c <xQueueGenericSend+0x11a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    12da:	8d 81       	ldd	r24, Y+5	; 0x05
    12dc:	9e 81       	ldd	r25, Y+6	; 0x06
    12de:	0e 94 a0 0c 	call	0x1940	; 0x1940 <prvIsQueueFull>
    12e2:	88 23       	and	r24, r24
    12e4:	a1 f0       	breq	.+40     	; 0x130e <xQueueGenericSend+0x10c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    12e6:	8d 81       	ldd	r24, Y+5	; 0x05
    12e8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ea:	08 96       	adiw	r24, 0x08	; 8
    12ec:	29 85       	ldd	r18, Y+9	; 0x09
    12ee:	3a 85       	ldd	r19, Y+10	; 0x0a
    12f0:	b9 01       	movw	r22, r18
    12f2:	0e 94 1b 11 	call	0x2236	; 0x2236 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    12f6:	8d 81       	ldd	r24, Y+5	; 0x05
    12f8:	9e 81       	ldd	r25, Y+6	; 0x06
    12fa:	0e 94 19 0c 	call	0x1832	; 0x1832 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    12fe:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <xTaskResumeAll>
    1302:	88 23       	and	r24, r24
    1304:	09 f0       	breq	.+2      	; 0x1308 <xQueueGenericSend+0x106>
    1306:	8f cf       	rjmp	.-226    	; 0x1226 <xQueueGenericSend+0x24>
				{
					portYIELD_WITHIN_API();
    1308:	0e 94 45 07 	call	0xe8a	; 0xe8a <vPortYield>
    130c:	8c cf       	rjmp	.-232    	; 0x1226 <xQueueGenericSend+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    130e:	8d 81       	ldd	r24, Y+5	; 0x05
    1310:	9e 81       	ldd	r25, Y+6	; 0x06
    1312:	0e 94 19 0c 	call	0x1832	; 0x1832 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    1316:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <xTaskResumeAll>
    131a:	85 cf       	rjmp	.-246    	; 0x1226 <xQueueGenericSend+0x24>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    131c:	8d 81       	ldd	r24, Y+5	; 0x05
    131e:	9e 81       	ldd	r25, Y+6	; 0x06
    1320:	0e 94 19 0c 	call	0x1832	; 0x1832 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    1324:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    1328:	1c 86       	std	Y+12, r1	; 0x0c
    132a:	8c 85       	ldd	r24, Y+12	; 0x0c
		}
	}
}
    132c:	2c 96       	adiw	r28, 0x0c	; 12
    132e:	0f b6       	in	r0, 0x3f	; 63
    1330:	f8 94       	cli
    1332:	de bf       	out	0x3e, r29	; 62
    1334:	0f be       	out	0x3f, r0	; 63
    1336:	cd bf       	out	0x3d, r28	; 61
    1338:	cf 91       	pop	r28
    133a:	df 91       	pop	r29
    133c:	08 95       	ret

0000133e <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    133e:	df 93       	push	r29
    1340:	cf 93       	push	r28
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62
    1346:	29 97       	sbiw	r28, 0x09	; 9
    1348:	0f b6       	in	r0, 0x3f	; 63
    134a:	f8 94       	cli
    134c:	de bf       	out	0x3e, r29	; 62
    134e:	0f be       	out	0x3f, r0	; 63
    1350:	cd bf       	out	0x3d, r28	; 61
    1352:	9c 83       	std	Y+4, r25	; 0x04
    1354:	8b 83       	std	Y+3, r24	; 0x03
    1356:	7e 83       	std	Y+6, r23	; 0x06
    1358:	6d 83       	std	Y+5, r22	; 0x05
    135a:	58 87       	std	Y+8, r21	; 0x08
    135c:	4f 83       	std	Y+7, r20	; 0x07
    135e:	29 87       	std	Y+9, r18	; 0x09
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1360:	19 82       	std	Y+1, r1	; 0x01
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    1362:	eb 81       	ldd	r30, Y+3	; 0x03
    1364:	fc 81       	ldd	r31, Y+4	; 0x04
    1366:	92 8d       	ldd	r25, Z+26	; 0x1a
    1368:	eb 81       	ldd	r30, Y+3	; 0x03
    136a:	fc 81       	ldd	r31, Y+4	; 0x04
    136c:	83 8d       	ldd	r24, Z+27	; 0x1b
    136e:	98 17       	cp	r25, r24
    1370:	40 f5       	brcc	.+80     	; 0x13c2 <xQueueGenericSendFromISR+0x84>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1372:	8b 81       	ldd	r24, Y+3	; 0x03
    1374:	9c 81       	ldd	r25, Y+4	; 0x04
    1376:	2d 81       	ldd	r18, Y+5	; 0x05
    1378:	3e 81       	ldd	r19, Y+6	; 0x06
    137a:	b9 01       	movw	r22, r18
    137c:	49 85       	ldd	r20, Y+9	; 0x09
    137e:	0e 94 3c 0b 	call	0x1678	; 0x1678 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    1382:	eb 81       	ldd	r30, Y+3	; 0x03
    1384:	fc 81       	ldd	r31, Y+4	; 0x04
    1386:	86 8d       	ldd	r24, Z+30	; 0x1e
    1388:	8f 3f       	cpi	r24, 0xFF	; 255
    138a:	89 f4       	brne	.+34     	; 0x13ae <xQueueGenericSendFromISR+0x70>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    138c:	eb 81       	ldd	r30, Y+3	; 0x03
    138e:	fc 81       	ldd	r31, Y+4	; 0x04
    1390:	81 89       	ldd	r24, Z+17	; 0x11
    1392:	88 23       	and	r24, r24
    1394:	99 f0       	breq	.+38     	; 0x13bc <xQueueGenericSendFromISR+0x7e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	9c 81       	ldd	r25, Y+4	; 0x04
    139a:	41 96       	adiw	r24, 0x11	; 17
    139c:	0e 94 51 11 	call	0x22a2	; 0x22a2 <xTaskRemoveFromEventList>
    13a0:	88 23       	and	r24, r24
    13a2:	61 f0       	breq	.+24     	; 0x13bc <xQueueGenericSendFromISR+0x7e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    13a4:	ef 81       	ldd	r30, Y+7	; 0x07
    13a6:	f8 85       	ldd	r31, Y+8	; 0x08
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	80 83       	st	Z, r24
    13ac:	07 c0       	rjmp	.+14     	; 0x13bc <xQueueGenericSendFromISR+0x7e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    13ae:	eb 81       	ldd	r30, Y+3	; 0x03
    13b0:	fc 81       	ldd	r31, Y+4	; 0x04
    13b2:	86 8d       	ldd	r24, Z+30	; 0x1e
    13b4:	8f 5f       	subi	r24, 0xFF	; 255
    13b6:	eb 81       	ldd	r30, Y+3	; 0x03
    13b8:	fc 81       	ldd	r31, Y+4	; 0x04
    13ba:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	8a 83       	std	Y+2, r24	; 0x02
    13c0:	01 c0       	rjmp	.+2      	; 0x13c4 <xQueueGenericSendFromISR+0x86>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    13c2:	1a 82       	std	Y+2, r1	; 0x02
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    13c4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    13c6:	29 96       	adiw	r28, 0x09	; 9
    13c8:	0f b6       	in	r0, 0x3f	; 63
    13ca:	f8 94       	cli
    13cc:	de bf       	out	0x3e, r29	; 62
    13ce:	0f be       	out	0x3f, r0	; 63
    13d0:	cd bf       	out	0x3d, r28	; 61
    13d2:	cf 91       	pop	r28
    13d4:	df 91       	pop	r29
    13d6:	08 95       	ret

000013d8 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    13d8:	df 93       	push	r29
    13da:	cf 93       	push	r28
    13dc:	cd b7       	in	r28, 0x3d	; 61
    13de:	de b7       	in	r29, 0x3e	; 62
    13e0:	2e 97       	sbiw	r28, 0x0e	; 14
    13e2:	0f b6       	in	r0, 0x3f	; 63
    13e4:	f8 94       	cli
    13e6:	de bf       	out	0x3e, r29	; 62
    13e8:	0f be       	out	0x3f, r0	; 63
    13ea:	cd bf       	out	0x3d, r28	; 61
    13ec:	98 87       	std	Y+8, r25	; 0x08
    13ee:	8f 83       	std	Y+7, r24	; 0x07
    13f0:	7a 87       	std	Y+10, r23	; 0x0a
    13f2:	69 87       	std	Y+9, r22	; 0x09
    13f4:	5c 87       	std	Y+12, r21	; 0x0c
    13f6:	4b 87       	std	Y+11, r20	; 0x0b
    13f8:	2d 87       	std	Y+13, r18	; 0x0d
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    13fa:	1b 82       	std	Y+3, r1	; 0x03
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    13fc:	0f b6       	in	r0, 0x3f	; 63
    13fe:	f8 94       	cli
    1400:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    1402:	ef 81       	ldd	r30, Y+7	; 0x07
    1404:	f8 85       	ldd	r31, Y+8	; 0x08
    1406:	82 8d       	ldd	r24, Z+26	; 0x1a
    1408:	88 23       	and	r24, r24
    140a:	09 f4       	brne	.+2      	; 0x140e <xQueueGenericReceive+0x36>
    140c:	3f c0       	rjmp	.+126    	; 0x148c <xQueueGenericReceive+0xb4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    140e:	ef 81       	ldd	r30, Y+7	; 0x07
    1410:	f8 85       	ldd	r31, Y+8	; 0x08
    1412:	86 81       	ldd	r24, Z+6	; 0x06
    1414:	97 81       	ldd	r25, Z+7	; 0x07
    1416:	9a 83       	std	Y+2, r25	; 0x02
    1418:	89 83       	std	Y+1, r24	; 0x01

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    141a:	8f 81       	ldd	r24, Y+7	; 0x07
    141c:	98 85       	ldd	r25, Y+8	; 0x08
    141e:	29 85       	ldd	r18, Y+9	; 0x09
    1420:	3a 85       	ldd	r19, Y+10	; 0x0a
    1422:	b9 01       	movw	r22, r18
    1424:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    1428:	8d 85       	ldd	r24, Y+13	; 0x0d
    142a:	88 23       	and	r24, r24
    142c:	b1 f4       	brne	.+44     	; 0x145a <xQueueGenericReceive+0x82>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    142e:	ef 81       	ldd	r30, Y+7	; 0x07
    1430:	f8 85       	ldd	r31, Y+8	; 0x08
    1432:	82 8d       	ldd	r24, Z+26	; 0x1a
    1434:	81 50       	subi	r24, 0x01	; 1
    1436:	ef 81       	ldd	r30, Y+7	; 0x07
    1438:	f8 85       	ldd	r31, Y+8	; 0x08
    143a:	82 8f       	std	Z+26, r24	; 0x1a
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    143c:	ef 81       	ldd	r30, Y+7	; 0x07
    143e:	f8 85       	ldd	r31, Y+8	; 0x08
    1440:	80 85       	ldd	r24, Z+8	; 0x08
    1442:	88 23       	and	r24, r24
    1444:	f1 f0       	breq	.+60     	; 0x1482 <xQueueGenericReceive+0xaa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    1446:	8f 81       	ldd	r24, Y+7	; 0x07
    1448:	98 85       	ldd	r25, Y+8	; 0x08
    144a:	08 96       	adiw	r24, 0x08	; 8
    144c:	0e 94 51 11 	call	0x22a2	; 0x22a2 <xTaskRemoveFromEventList>
    1450:	81 30       	cpi	r24, 0x01	; 1
    1452:	b9 f4       	brne	.+46     	; 0x1482 <xQueueGenericReceive+0xaa>
						{
							portYIELD_WITHIN_API();
    1454:	0e 94 45 07 	call	0xe8a	; 0xe8a <vPortYield>
    1458:	14 c0       	rjmp	.+40     	; 0x1482 <xQueueGenericReceive+0xaa>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    145a:	ef 81       	ldd	r30, Y+7	; 0x07
    145c:	f8 85       	ldd	r31, Y+8	; 0x08
    145e:	89 81       	ldd	r24, Y+1	; 0x01
    1460:	9a 81       	ldd	r25, Y+2	; 0x02
    1462:	97 83       	std	Z+7, r25	; 0x07
    1464:	86 83       	std	Z+6, r24	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1466:	ef 81       	ldd	r30, Y+7	; 0x07
    1468:	f8 85       	ldd	r31, Y+8	; 0x08
    146a:	81 89       	ldd	r24, Z+17	; 0x11
    146c:	88 23       	and	r24, r24
    146e:	49 f0       	breq	.+18     	; 0x1482 <xQueueGenericReceive+0xaa>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1470:	8f 81       	ldd	r24, Y+7	; 0x07
    1472:	98 85       	ldd	r25, Y+8	; 0x08
    1474:	41 96       	adiw	r24, 0x11	; 17
    1476:	0e 94 51 11 	call	0x22a2	; 0x22a2 <xTaskRemoveFromEventList>
    147a:	88 23       	and	r24, r24
    147c:	11 f0       	breq	.+4      	; 0x1482 <xQueueGenericReceive+0xaa>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    147e:	0e 94 45 07 	call	0xe8a	; 0xe8a <vPortYield>
						}
					}

				}

				taskEXIT_CRITICAL();
    1482:	0f 90       	pop	r0
    1484:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	8e 87       	std	Y+14, r24	; 0x0e
    148a:	5c c0       	rjmp	.+184    	; 0x1544 <xQueueGenericReceive+0x16c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    148c:	8b 85       	ldd	r24, Y+11	; 0x0b
    148e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1490:	00 97       	sbiw	r24, 0x00	; 0
    1492:	21 f4       	brne	.+8      	; 0x149c <xQueueGenericReceive+0xc4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1494:	0f 90       	pop	r0
    1496:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    1498:	1e 86       	std	Y+14, r1	; 0x0e
    149a:	54 c0       	rjmp	.+168    	; 0x1544 <xQueueGenericReceive+0x16c>
				}
				else if( xEntryTimeSet == pdFALSE )
    149c:	8b 81       	ldd	r24, Y+3	; 0x03
    149e:	88 23       	and	r24, r24
    14a0:	31 f4       	brne	.+12     	; 0x14ae <xQueueGenericReceive+0xd6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    14a2:	ce 01       	movw	r24, r28
    14a4:	04 96       	adiw	r24, 0x04	; 4
    14a6:	0e 94 b9 11 	call	0x2372	; 0x2372 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	8b 83       	std	Y+3, r24	; 0x03
				}
			}
		}
		taskEXIT_CRITICAL();
    14ae:	0f 90       	pop	r0
    14b0:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    14b2:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    14b6:	0f b6       	in	r0, 0x3f	; 63
    14b8:	f8 94       	cli
    14ba:	0f 92       	push	r0
    14bc:	ef 81       	ldd	r30, Y+7	; 0x07
    14be:	f8 85       	ldd	r31, Y+8	; 0x08
    14c0:	85 8d       	ldd	r24, Z+29	; 0x1d
    14c2:	8f 3f       	cpi	r24, 0xFF	; 255
    14c4:	19 f4       	brne	.+6      	; 0x14cc <xQueueGenericReceive+0xf4>
    14c6:	ef 81       	ldd	r30, Y+7	; 0x07
    14c8:	f8 85       	ldd	r31, Y+8	; 0x08
    14ca:	15 8e       	std	Z+29, r1	; 0x1d
    14cc:	ef 81       	ldd	r30, Y+7	; 0x07
    14ce:	f8 85       	ldd	r31, Y+8	; 0x08
    14d0:	86 8d       	ldd	r24, Z+30	; 0x1e
    14d2:	8f 3f       	cpi	r24, 0xFF	; 255
    14d4:	19 f4       	brne	.+6      	; 0x14dc <xQueueGenericReceive+0x104>
    14d6:	ef 81       	ldd	r30, Y+7	; 0x07
    14d8:	f8 85       	ldd	r31, Y+8	; 0x08
    14da:	16 8e       	std	Z+30, r1	; 0x1e
    14dc:	0f 90       	pop	r0
    14de:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    14e0:	ce 01       	movw	r24, r28
    14e2:	04 96       	adiw	r24, 0x04	; 4
    14e4:	9e 01       	movw	r18, r28
    14e6:	25 5f       	subi	r18, 0xF5	; 245
    14e8:	3f 4f       	sbci	r19, 0xFF	; 255
    14ea:	b9 01       	movw	r22, r18
    14ec:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <xTaskCheckForTimeOut>
    14f0:	88 23       	and	r24, r24
    14f2:	09 f5       	brne	.+66     	; 0x1536 <xQueueGenericReceive+0x15e>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    14f4:	8f 81       	ldd	r24, Y+7	; 0x07
    14f6:	98 85       	ldd	r25, Y+8	; 0x08
    14f8:	0e 94 6d 0c 	call	0x18da	; 0x18da <prvIsQueueEmpty>
    14fc:	88 23       	and	r24, r24
    14fe:	a1 f0       	breq	.+40     	; 0x1528 <xQueueGenericReceive+0x150>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1500:	8f 81       	ldd	r24, Y+7	; 0x07
    1502:	98 85       	ldd	r25, Y+8	; 0x08
    1504:	41 96       	adiw	r24, 0x11	; 17
    1506:	2b 85       	ldd	r18, Y+11	; 0x0b
    1508:	3c 85       	ldd	r19, Y+12	; 0x0c
    150a:	b9 01       	movw	r22, r18
    150c:	0e 94 1b 11 	call	0x2236	; 0x2236 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    1510:	8f 81       	ldd	r24, Y+7	; 0x07
    1512:	98 85       	ldd	r25, Y+8	; 0x08
    1514:	0e 94 19 0c 	call	0x1832	; 0x1832 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    1518:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <xTaskResumeAll>
    151c:	88 23       	and	r24, r24
    151e:	09 f0       	breq	.+2      	; 0x1522 <xQueueGenericReceive+0x14a>
    1520:	6d cf       	rjmp	.-294    	; 0x13fc <xQueueGenericReceive+0x24>
				{
					portYIELD_WITHIN_API();
    1522:	0e 94 45 07 	call	0xe8a	; 0xe8a <vPortYield>
    1526:	6a cf       	rjmp	.-300    	; 0x13fc <xQueueGenericReceive+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1528:	8f 81       	ldd	r24, Y+7	; 0x07
    152a:	98 85       	ldd	r25, Y+8	; 0x08
    152c:	0e 94 19 0c 	call	0x1832	; 0x1832 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    1530:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <xTaskResumeAll>
    1534:	63 cf       	rjmp	.-314    	; 0x13fc <xQueueGenericReceive+0x24>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    1536:	8f 81       	ldd	r24, Y+7	; 0x07
    1538:	98 85       	ldd	r25, Y+8	; 0x08
    153a:	0e 94 19 0c 	call	0x1832	; 0x1832 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    153e:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    1542:	1e 86       	std	Y+14, r1	; 0x0e
    1544:	8e 85       	ldd	r24, Y+14	; 0x0e
		}
	}
}
    1546:	2e 96       	adiw	r28, 0x0e	; 14
    1548:	0f b6       	in	r0, 0x3f	; 63
    154a:	f8 94       	cli
    154c:	de bf       	out	0x3e, r29	; 62
    154e:	0f be       	out	0x3f, r0	; 63
    1550:	cd bf       	out	0x3d, r28	; 61
    1552:	cf 91       	pop	r28
    1554:	df 91       	pop	r29
    1556:	08 95       	ret

00001558 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    1558:	df 93       	push	r29
    155a:	cf 93       	push	r28
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
    1560:	28 97       	sbiw	r28, 0x08	; 8
    1562:	0f b6       	in	r0, 0x3f	; 63
    1564:	f8 94       	cli
    1566:	de bf       	out	0x3e, r29	; 62
    1568:	0f be       	out	0x3f, r0	; 63
    156a:	cd bf       	out	0x3d, r28	; 61
    156c:	9c 83       	std	Y+4, r25	; 0x04
    156e:	8b 83       	std	Y+3, r24	; 0x03
    1570:	7e 83       	std	Y+6, r23	; 0x06
    1572:	6d 83       	std	Y+5, r22	; 0x05
    1574:	58 87       	std	Y+8, r21	; 0x08
    1576:	4f 83       	std	Y+7, r20	; 0x07

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1578:	19 82       	std	Y+1, r1	; 0x01
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    157a:	eb 81       	ldd	r30, Y+3	; 0x03
    157c:	fc 81       	ldd	r31, Y+4	; 0x04
    157e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1580:	88 23       	and	r24, r24
    1582:	71 f1       	breq	.+92     	; 0x15e0 <xQueueReceiveFromISR+0x88>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    1584:	8b 81       	ldd	r24, Y+3	; 0x03
    1586:	9c 81       	ldd	r25, Y+4	; 0x04
    1588:	2d 81       	ldd	r18, Y+5	; 0x05
    158a:	3e 81       	ldd	r19, Y+6	; 0x06
    158c:	b9 01       	movw	r22, r18
    158e:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    1592:	eb 81       	ldd	r30, Y+3	; 0x03
    1594:	fc 81       	ldd	r31, Y+4	; 0x04
    1596:	82 8d       	ldd	r24, Z+26	; 0x1a
    1598:	81 50       	subi	r24, 0x01	; 1
    159a:	eb 81       	ldd	r30, Y+3	; 0x03
    159c:	fc 81       	ldd	r31, Y+4	; 0x04
    159e:	82 8f       	std	Z+26, r24	; 0x1a

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    15a0:	eb 81       	ldd	r30, Y+3	; 0x03
    15a2:	fc 81       	ldd	r31, Y+4	; 0x04
    15a4:	85 8d       	ldd	r24, Z+29	; 0x1d
    15a6:	8f 3f       	cpi	r24, 0xFF	; 255
    15a8:	89 f4       	brne	.+34     	; 0x15cc <xQueueReceiveFromISR+0x74>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    15aa:	eb 81       	ldd	r30, Y+3	; 0x03
    15ac:	fc 81       	ldd	r31, Y+4	; 0x04
    15ae:	80 85       	ldd	r24, Z+8	; 0x08
    15b0:	88 23       	and	r24, r24
    15b2:	99 f0       	breq	.+38     	; 0x15da <xQueueReceiveFromISR+0x82>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    15b4:	8b 81       	ldd	r24, Y+3	; 0x03
    15b6:	9c 81       	ldd	r25, Y+4	; 0x04
    15b8:	08 96       	adiw	r24, 0x08	; 8
    15ba:	0e 94 51 11 	call	0x22a2	; 0x22a2 <xTaskRemoveFromEventList>
    15be:	88 23       	and	r24, r24
    15c0:	61 f0       	breq	.+24     	; 0x15da <xQueueReceiveFromISR+0x82>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    15c2:	ef 81       	ldd	r30, Y+7	; 0x07
    15c4:	f8 85       	ldd	r31, Y+8	; 0x08
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	80 83       	st	Z, r24
    15ca:	07 c0       	rjmp	.+14     	; 0x15da <xQueueReceiveFromISR+0x82>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    15cc:	eb 81       	ldd	r30, Y+3	; 0x03
    15ce:	fc 81       	ldd	r31, Y+4	; 0x04
    15d0:	85 8d       	ldd	r24, Z+29	; 0x1d
    15d2:	8f 5f       	subi	r24, 0xFF	; 255
    15d4:	eb 81       	ldd	r30, Y+3	; 0x03
    15d6:	fc 81       	ldd	r31, Y+4	; 0x04
    15d8:	85 8f       	std	Z+29, r24	; 0x1d
			}

			xReturn = pdPASS;
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	8a 83       	std	Y+2, r24	; 0x02
    15de:	01 c0       	rjmp	.+2      	; 0x15e2 <xQueueReceiveFromISR+0x8a>
		}
		else
		{
			xReturn = pdFAIL;
    15e0:	1a 82       	std	Y+2, r1	; 0x02
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    15e2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    15e4:	28 96       	adiw	r28, 0x08	; 8
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	f8 94       	cli
    15ea:	de bf       	out	0x3e, r29	; 62
    15ec:	0f be       	out	0x3f, r0	; 63
    15ee:	cd bf       	out	0x3d, r28	; 61
    15f0:	cf 91       	pop	r28
    15f2:	df 91       	pop	r29
    15f4:	08 95       	ret

000015f6 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    15f6:	df 93       	push	r29
    15f8:	cf 93       	push	r28
    15fa:	00 d0       	rcall	.+0      	; 0x15fc <uxQueueMessagesWaiting+0x6>
    15fc:	0f 92       	push	r0
    15fe:	cd b7       	in	r28, 0x3d	; 61
    1600:	de b7       	in	r29, 0x3e	; 62
    1602:	9b 83       	std	Y+3, r25	; 0x03
    1604:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    1606:	0f b6       	in	r0, 0x3f	; 63
    1608:	f8 94       	cli
    160a:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    160c:	ea 81       	ldd	r30, Y+2	; 0x02
    160e:	fb 81       	ldd	r31, Y+3	; 0x03
    1610:	82 8d       	ldd	r24, Z+26	; 0x1a
    1612:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    1614:	0f 90       	pop	r0
    1616:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    1618:	89 81       	ldd	r24, Y+1	; 0x01
}
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
    1620:	cf 91       	pop	r28
    1622:	df 91       	pop	r29
    1624:	08 95       	ret

00001626 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    1626:	df 93       	push	r29
    1628:	cf 93       	push	r28
    162a:	00 d0       	rcall	.+0      	; 0x162c <uxQueueMessagesWaitingFromISR+0x6>
    162c:	0f 92       	push	r0
    162e:	cd b7       	in	r28, 0x3d	; 61
    1630:	de b7       	in	r29, 0x3e	; 62
    1632:	9b 83       	std	Y+3, r25	; 0x03
    1634:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    1636:	ea 81       	ldd	r30, Y+2	; 0x02
    1638:	fb 81       	ldd	r31, Y+3	; 0x03
    163a:	82 8d       	ldd	r24, Z+26	; 0x1a
    163c:	89 83       	std	Y+1, r24	; 0x01

	return uxReturn;
    163e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1640:	0f 90       	pop	r0
    1642:	0f 90       	pop	r0
    1644:	0f 90       	pop	r0
    1646:	cf 91       	pop	r28
    1648:	df 91       	pop	r29
    164a:	08 95       	ret

0000164c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    164c:	df 93       	push	r29
    164e:	cf 93       	push	r28
    1650:	00 d0       	rcall	.+0      	; 0x1652 <vQueueDelete+0x6>
    1652:	cd b7       	in	r28, 0x3d	; 61
    1654:	de b7       	in	r29, 0x3e	; 62
    1656:	9a 83       	std	Y+2, r25	; 0x02
    1658:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    165a:	e9 81       	ldd	r30, Y+1	; 0x01
    165c:	fa 81       	ldd	r31, Y+2	; 0x02
    165e:	80 81       	ld	r24, Z
    1660:	91 81       	ldd	r25, Z+1	; 0x01
    1662:	0e 94 25 04 	call	0x84a	; 0x84a <vPortFree>
	vPortFree( pxQueue );
    1666:	89 81       	ldd	r24, Y+1	; 0x01
    1668:	9a 81       	ldd	r25, Y+2	; 0x02
    166a:	0e 94 25 04 	call	0x84a	; 0x84a <vPortFree>
}
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	cf 91       	pop	r28
    1674:	df 91       	pop	r29
    1676:	08 95       	ret

00001678 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    1678:	df 93       	push	r29
    167a:	cf 93       	push	r28
    167c:	00 d0       	rcall	.+0      	; 0x167e <prvCopyDataToQueue+0x6>
    167e:	00 d0       	rcall	.+0      	; 0x1680 <prvCopyDataToQueue+0x8>
    1680:	0f 92       	push	r0
    1682:	cd b7       	in	r28, 0x3d	; 61
    1684:	de b7       	in	r29, 0x3e	; 62
    1686:	9a 83       	std	Y+2, r25	; 0x02
    1688:	89 83       	std	Y+1, r24	; 0x01
    168a:	7c 83       	std	Y+4, r23	; 0x04
    168c:	6b 83       	std	Y+3, r22	; 0x03
    168e:	4d 83       	std	Y+5, r20	; 0x05
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    1690:	e9 81       	ldd	r30, Y+1	; 0x01
    1692:	fa 81       	ldd	r31, Y+2	; 0x02
    1694:	84 8d       	ldd	r24, Z+28	; 0x1c
    1696:	88 23       	and	r24, r24
    1698:	09 f4       	brne	.+2      	; 0x169c <prvCopyDataToQueue+0x24>
    169a:	74 c0       	rjmp	.+232    	; 0x1784 <prvCopyDataToQueue+0x10c>
				pxQueue->pxMutexHolder = NULL;
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    169c:	8d 81       	ldd	r24, Y+5	; 0x05
    169e:	88 23       	and	r24, r24
    16a0:	99 f5       	brne	.+102    	; 0x1708 <prvCopyDataToQueue+0x90>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    16a2:	e9 81       	ldd	r30, Y+1	; 0x01
    16a4:	fa 81       	ldd	r31, Y+2	; 0x02
    16a6:	64 81       	ldd	r22, Z+4	; 0x04
    16a8:	75 81       	ldd	r23, Z+5	; 0x05
    16aa:	e9 81       	ldd	r30, Y+1	; 0x01
    16ac:	fa 81       	ldd	r31, Y+2	; 0x02
    16ae:	84 8d       	ldd	r24, Z+28	; 0x1c
    16b0:	48 2f       	mov	r20, r24
    16b2:	50 e0       	ldi	r21, 0x00	; 0
    16b4:	2b 81       	ldd	r18, Y+3	; 0x03
    16b6:	3c 81       	ldd	r19, Y+4	; 0x04
    16b8:	cb 01       	movw	r24, r22
    16ba:	b9 01       	movw	r22, r18
    16bc:	0e 94 c4 13 	call	0x2788	; 0x2788 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    16c0:	e9 81       	ldd	r30, Y+1	; 0x01
    16c2:	fa 81       	ldd	r31, Y+2	; 0x02
    16c4:	24 81       	ldd	r18, Z+4	; 0x04
    16c6:	35 81       	ldd	r19, Z+5	; 0x05
    16c8:	e9 81       	ldd	r30, Y+1	; 0x01
    16ca:	fa 81       	ldd	r31, Y+2	; 0x02
    16cc:	84 8d       	ldd	r24, Z+28	; 0x1c
    16ce:	88 2f       	mov	r24, r24
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	82 0f       	add	r24, r18
    16d4:	93 1f       	adc	r25, r19
    16d6:	e9 81       	ldd	r30, Y+1	; 0x01
    16d8:	fa 81       	ldd	r31, Y+2	; 0x02
    16da:	95 83       	std	Z+5, r25	; 0x05
    16dc:	84 83       	std	Z+4, r24	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    16de:	e9 81       	ldd	r30, Y+1	; 0x01
    16e0:	fa 81       	ldd	r31, Y+2	; 0x02
    16e2:	24 81       	ldd	r18, Z+4	; 0x04
    16e4:	35 81       	ldd	r19, Z+5	; 0x05
    16e6:	e9 81       	ldd	r30, Y+1	; 0x01
    16e8:	fa 81       	ldd	r31, Y+2	; 0x02
    16ea:	82 81       	ldd	r24, Z+2	; 0x02
    16ec:	93 81       	ldd	r25, Z+3	; 0x03
    16ee:	28 17       	cp	r18, r24
    16f0:	39 07       	cpc	r19, r25
    16f2:	08 f4       	brcc	.+2      	; 0x16f6 <prvCopyDataToQueue+0x7e>
    16f4:	47 c0       	rjmp	.+142    	; 0x1784 <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    16f6:	e9 81       	ldd	r30, Y+1	; 0x01
    16f8:	fa 81       	ldd	r31, Y+2	; 0x02
    16fa:	80 81       	ld	r24, Z
    16fc:	91 81       	ldd	r25, Z+1	; 0x01
    16fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1700:	fa 81       	ldd	r31, Y+2	; 0x02
    1702:	95 83       	std	Z+5, r25	; 0x05
    1704:	84 83       	std	Z+4, r24	; 0x04
    1706:	3e c0       	rjmp	.+124    	; 0x1784 <prvCopyDataToQueue+0x10c>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    1708:	e9 81       	ldd	r30, Y+1	; 0x01
    170a:	fa 81       	ldd	r31, Y+2	; 0x02
    170c:	66 81       	ldd	r22, Z+6	; 0x06
    170e:	77 81       	ldd	r23, Z+7	; 0x07
    1710:	e9 81       	ldd	r30, Y+1	; 0x01
    1712:	fa 81       	ldd	r31, Y+2	; 0x02
    1714:	84 8d       	ldd	r24, Z+28	; 0x1c
    1716:	48 2f       	mov	r20, r24
    1718:	50 e0       	ldi	r21, 0x00	; 0
    171a:	2b 81       	ldd	r18, Y+3	; 0x03
    171c:	3c 81       	ldd	r19, Y+4	; 0x04
    171e:	cb 01       	movw	r24, r22
    1720:	b9 01       	movw	r22, r18
    1722:	0e 94 c4 13 	call	0x2788	; 0x2788 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    1726:	e9 81       	ldd	r30, Y+1	; 0x01
    1728:	fa 81       	ldd	r31, Y+2	; 0x02
    172a:	26 81       	ldd	r18, Z+6	; 0x06
    172c:	37 81       	ldd	r19, Z+7	; 0x07
    172e:	e9 81       	ldd	r30, Y+1	; 0x01
    1730:	fa 81       	ldd	r31, Y+2	; 0x02
    1732:	84 8d       	ldd	r24, Z+28	; 0x1c
    1734:	88 2f       	mov	r24, r24
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	90 95       	com	r25
    173a:	81 95       	neg	r24
    173c:	9f 4f       	sbci	r25, 0xFF	; 255
    173e:	82 0f       	add	r24, r18
    1740:	93 1f       	adc	r25, r19
    1742:	e9 81       	ldd	r30, Y+1	; 0x01
    1744:	fa 81       	ldd	r31, Y+2	; 0x02
    1746:	97 83       	std	Z+7, r25	; 0x07
    1748:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    174a:	e9 81       	ldd	r30, Y+1	; 0x01
    174c:	fa 81       	ldd	r31, Y+2	; 0x02
    174e:	26 81       	ldd	r18, Z+6	; 0x06
    1750:	37 81       	ldd	r19, Z+7	; 0x07
    1752:	e9 81       	ldd	r30, Y+1	; 0x01
    1754:	fa 81       	ldd	r31, Y+2	; 0x02
    1756:	80 81       	ld	r24, Z
    1758:	91 81       	ldd	r25, Z+1	; 0x01
    175a:	28 17       	cp	r18, r24
    175c:	39 07       	cpc	r19, r25
    175e:	90 f4       	brcc	.+36     	; 0x1784 <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    1760:	e9 81       	ldd	r30, Y+1	; 0x01
    1762:	fa 81       	ldd	r31, Y+2	; 0x02
    1764:	22 81       	ldd	r18, Z+2	; 0x02
    1766:	33 81       	ldd	r19, Z+3	; 0x03
    1768:	e9 81       	ldd	r30, Y+1	; 0x01
    176a:	fa 81       	ldd	r31, Y+2	; 0x02
    176c:	84 8d       	ldd	r24, Z+28	; 0x1c
    176e:	88 2f       	mov	r24, r24
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	90 95       	com	r25
    1774:	81 95       	neg	r24
    1776:	9f 4f       	sbci	r25, 0xFF	; 255
    1778:	82 0f       	add	r24, r18
    177a:	93 1f       	adc	r25, r19
    177c:	e9 81       	ldd	r30, Y+1	; 0x01
    177e:	fa 81       	ldd	r31, Y+2	; 0x02
    1780:	97 83       	std	Z+7, r25	; 0x07
    1782:	86 83       	std	Z+6, r24	; 0x06
		}
	}

	++( pxQueue->uxMessagesWaiting );
    1784:	e9 81       	ldd	r30, Y+1	; 0x01
    1786:	fa 81       	ldd	r31, Y+2	; 0x02
    1788:	82 8d       	ldd	r24, Z+26	; 0x1a
    178a:	8f 5f       	subi	r24, 0xFF	; 255
    178c:	e9 81       	ldd	r30, Y+1	; 0x01
    178e:	fa 81       	ldd	r31, Y+2	; 0x02
    1790:	82 8f       	std	Z+26, r24	; 0x1a
}
    1792:	0f 90       	pop	r0
    1794:	0f 90       	pop	r0
    1796:	0f 90       	pop	r0
    1798:	0f 90       	pop	r0
    179a:	0f 90       	pop	r0
    179c:	cf 91       	pop	r28
    179e:	df 91       	pop	r29
    17a0:	08 95       	ret

000017a2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    17a2:	df 93       	push	r29
    17a4:	cf 93       	push	r28
    17a6:	00 d0       	rcall	.+0      	; 0x17a8 <prvCopyDataFromQueue+0x6>
    17a8:	00 d0       	rcall	.+0      	; 0x17aa <prvCopyDataFromQueue+0x8>
    17aa:	cd b7       	in	r28, 0x3d	; 61
    17ac:	de b7       	in	r29, 0x3e	; 62
    17ae:	9a 83       	std	Y+2, r25	; 0x02
    17b0:	89 83       	std	Y+1, r24	; 0x01
    17b2:	7c 83       	std	Y+4, r23	; 0x04
    17b4:	6b 83       	std	Y+3, r22	; 0x03
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    17b6:	e9 81       	ldd	r30, Y+1	; 0x01
    17b8:	fa 81       	ldd	r31, Y+2	; 0x02
    17ba:	80 81       	ld	r24, Z
    17bc:	91 81       	ldd	r25, Z+1	; 0x01
    17be:	00 97       	sbiw	r24, 0x00	; 0
    17c0:	89 f1       	breq	.+98     	; 0x1824 <prvCopyDataFromQueue+0x82>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    17c2:	e9 81       	ldd	r30, Y+1	; 0x01
    17c4:	fa 81       	ldd	r31, Y+2	; 0x02
    17c6:	26 81       	ldd	r18, Z+6	; 0x06
    17c8:	37 81       	ldd	r19, Z+7	; 0x07
    17ca:	e9 81       	ldd	r30, Y+1	; 0x01
    17cc:	fa 81       	ldd	r31, Y+2	; 0x02
    17ce:	84 8d       	ldd	r24, Z+28	; 0x1c
    17d0:	88 2f       	mov	r24, r24
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	82 0f       	add	r24, r18
    17d6:	93 1f       	adc	r25, r19
    17d8:	e9 81       	ldd	r30, Y+1	; 0x01
    17da:	fa 81       	ldd	r31, Y+2	; 0x02
    17dc:	97 83       	std	Z+7, r25	; 0x07
    17de:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    17e0:	e9 81       	ldd	r30, Y+1	; 0x01
    17e2:	fa 81       	ldd	r31, Y+2	; 0x02
    17e4:	26 81       	ldd	r18, Z+6	; 0x06
    17e6:	37 81       	ldd	r19, Z+7	; 0x07
    17e8:	e9 81       	ldd	r30, Y+1	; 0x01
    17ea:	fa 81       	ldd	r31, Y+2	; 0x02
    17ec:	82 81       	ldd	r24, Z+2	; 0x02
    17ee:	93 81       	ldd	r25, Z+3	; 0x03
    17f0:	28 17       	cp	r18, r24
    17f2:	39 07       	cpc	r19, r25
    17f4:	40 f0       	brcs	.+16     	; 0x1806 <prvCopyDataFromQueue+0x64>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    17f6:	e9 81       	ldd	r30, Y+1	; 0x01
    17f8:	fa 81       	ldd	r31, Y+2	; 0x02
    17fa:	80 81       	ld	r24, Z
    17fc:	91 81       	ldd	r25, Z+1	; 0x01
    17fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1800:	fa 81       	ldd	r31, Y+2	; 0x02
    1802:	97 83       	std	Z+7, r25	; 0x07
    1804:	86 83       	std	Z+6, r24	; 0x06
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    1806:	e9 81       	ldd	r30, Y+1	; 0x01
    1808:	fa 81       	ldd	r31, Y+2	; 0x02
    180a:	46 81       	ldd	r20, Z+6	; 0x06
    180c:	57 81       	ldd	r21, Z+7	; 0x07
    180e:	e9 81       	ldd	r30, Y+1	; 0x01
    1810:	fa 81       	ldd	r31, Y+2	; 0x02
    1812:	84 8d       	ldd	r24, Z+28	; 0x1c
    1814:	28 2f       	mov	r18, r24
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	8b 81       	ldd	r24, Y+3	; 0x03
    181a:	9c 81       	ldd	r25, Y+4	; 0x04
    181c:	ba 01       	movw	r22, r20
    181e:	a9 01       	movw	r20, r18
    1820:	0e 94 c4 13 	call	0x2788	; 0x2788 <memcpy>
	}
}
    1824:	0f 90       	pop	r0
    1826:	0f 90       	pop	r0
    1828:	0f 90       	pop	r0
    182a:	0f 90       	pop	r0
    182c:	cf 91       	pop	r28
    182e:	df 91       	pop	r29
    1830:	08 95       	ret

00001832 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    1832:	df 93       	push	r29
    1834:	cf 93       	push	r28
    1836:	00 d0       	rcall	.+0      	; 0x1838 <prvUnlockQueue+0x6>
    1838:	cd b7       	in	r28, 0x3d	; 61
    183a:	de b7       	in	r29, 0x3e	; 62
    183c:	9a 83       	std	Y+2, r25	; 0x02
    183e:	89 83       	std	Y+1, r24	; 0x01

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    1840:	0f b6       	in	r0, 0x3f	; 63
    1842:	f8 94       	cli
    1844:	0f 92       	push	r0
    1846:	15 c0       	rjmp	.+42     	; 0x1872 <prvUnlockQueue+0x40>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1848:	e9 81       	ldd	r30, Y+1	; 0x01
    184a:	fa 81       	ldd	r31, Y+2	; 0x02
    184c:	81 89       	ldd	r24, Z+17	; 0x11
    184e:	88 23       	and	r24, r24
    1850:	a9 f0       	breq	.+42     	; 0x187c <prvUnlockQueue+0x4a>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1852:	89 81       	ldd	r24, Y+1	; 0x01
    1854:	9a 81       	ldd	r25, Y+2	; 0x02
    1856:	41 96       	adiw	r24, 0x11	; 17
    1858:	0e 94 51 11 	call	0x22a2	; 0x22a2 <xTaskRemoveFromEventList>
    185c:	88 23       	and	r24, r24
    185e:	11 f0       	breq	.+4      	; 0x1864 <prvUnlockQueue+0x32>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    1860:	0e 94 2f 12 	call	0x245e	; 0x245e <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    1864:	e9 81       	ldd	r30, Y+1	; 0x01
    1866:	fa 81       	ldd	r31, Y+2	; 0x02
    1868:	86 8d       	ldd	r24, Z+30	; 0x1e
    186a:	81 50       	subi	r24, 0x01	; 1
    186c:	e9 81       	ldd	r30, Y+1	; 0x01
    186e:	fa 81       	ldd	r31, Y+2	; 0x02
    1870:	86 8f       	std	Z+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    1872:	e9 81       	ldd	r30, Y+1	; 0x01
    1874:	fa 81       	ldd	r31, Y+2	; 0x02
    1876:	86 8d       	ldd	r24, Z+30	; 0x1e
    1878:	18 16       	cp	r1, r24
    187a:	34 f3       	brlt	.-52     	; 0x1848 <prvUnlockQueue+0x16>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    187c:	e9 81       	ldd	r30, Y+1	; 0x01
    187e:	fa 81       	ldd	r31, Y+2	; 0x02
    1880:	8f ef       	ldi	r24, 0xFF	; 255
    1882:	86 8f       	std	Z+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    1884:	0f 90       	pop	r0
    1886:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    1888:	0f b6       	in	r0, 0x3f	; 63
    188a:	f8 94       	cli
    188c:	0f 92       	push	r0
    188e:	15 c0       	rjmp	.+42     	; 0x18ba <prvUnlockQueue+0x88>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1890:	e9 81       	ldd	r30, Y+1	; 0x01
    1892:	fa 81       	ldd	r31, Y+2	; 0x02
    1894:	80 85       	ldd	r24, Z+8	; 0x08
    1896:	88 23       	and	r24, r24
    1898:	a9 f0       	breq	.+42     	; 0x18c4 <prvUnlockQueue+0x92>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    189a:	89 81       	ldd	r24, Y+1	; 0x01
    189c:	9a 81       	ldd	r25, Y+2	; 0x02
    189e:	08 96       	adiw	r24, 0x08	; 8
    18a0:	0e 94 51 11 	call	0x22a2	; 0x22a2 <xTaskRemoveFromEventList>
    18a4:	88 23       	and	r24, r24
    18a6:	11 f0       	breq	.+4      	; 0x18ac <prvUnlockQueue+0x7a>
				{
					vTaskMissedYield();
    18a8:	0e 94 2f 12 	call	0x245e	; 0x245e <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    18ac:	e9 81       	ldd	r30, Y+1	; 0x01
    18ae:	fa 81       	ldd	r31, Y+2	; 0x02
    18b0:	85 8d       	ldd	r24, Z+29	; 0x1d
    18b2:	81 50       	subi	r24, 0x01	; 1
    18b4:	e9 81       	ldd	r30, Y+1	; 0x01
    18b6:	fa 81       	ldd	r31, Y+2	; 0x02
    18b8:	85 8f       	std	Z+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    18ba:	e9 81       	ldd	r30, Y+1	; 0x01
    18bc:	fa 81       	ldd	r31, Y+2	; 0x02
    18be:	85 8d       	ldd	r24, Z+29	; 0x1d
    18c0:	18 16       	cp	r1, r24
    18c2:	34 f3       	brlt	.-52     	; 0x1890 <prvUnlockQueue+0x5e>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    18c4:	e9 81       	ldd	r30, Y+1	; 0x01
    18c6:	fa 81       	ldd	r31, Y+2	; 0x02
    18c8:	8f ef       	ldi	r24, 0xFF	; 255
    18ca:	85 8f       	std	Z+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    18cc:	0f 90       	pop	r0
    18ce:	0f be       	out	0x3f, r0	; 63
}
    18d0:	0f 90       	pop	r0
    18d2:	0f 90       	pop	r0
    18d4:	cf 91       	pop	r28
    18d6:	df 91       	pop	r29
    18d8:	08 95       	ret

000018da <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    18da:	df 93       	push	r29
    18dc:	cf 93       	push	r28
    18de:	00 d0       	rcall	.+0      	; 0x18e0 <prvIsQueueEmpty+0x6>
    18e0:	0f 92       	push	r0
    18e2:	cd b7       	in	r28, 0x3d	; 61
    18e4:	de b7       	in	r29, 0x3e	; 62
    18e6:	9b 83       	std	Y+3, r25	; 0x03
    18e8:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    18ea:	0f b6       	in	r0, 0x3f	; 63
    18ec:	f8 94       	cli
    18ee:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    18f0:	ea 81       	ldd	r30, Y+2	; 0x02
    18f2:	fb 81       	ldd	r31, Y+3	; 0x03
    18f4:	82 8d       	ldd	r24, Z+26	; 0x1a
    18f6:	19 82       	std	Y+1, r1	; 0x01
    18f8:	88 23       	and	r24, r24
    18fa:	11 f4       	brne	.+4      	; 0x1900 <prvIsQueueEmpty+0x26>
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    1900:	0f 90       	pop	r0
    1902:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    1904:	89 81       	ldd	r24, Y+1	; 0x01
}
    1906:	0f 90       	pop	r0
    1908:	0f 90       	pop	r0
    190a:	0f 90       	pop	r0
    190c:	cf 91       	pop	r28
    190e:	df 91       	pop	r29
    1910:	08 95       	ret

00001912 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    1912:	df 93       	push	r29
    1914:	cf 93       	push	r28
    1916:	00 d0       	rcall	.+0      	; 0x1918 <xQueueIsQueueEmptyFromISR+0x6>
    1918:	0f 92       	push	r0
    191a:	cd b7       	in	r28, 0x3d	; 61
    191c:	de b7       	in	r29, 0x3e	; 62
    191e:	9b 83       	std	Y+3, r25	; 0x03
    1920:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    1922:	ea 81       	ldd	r30, Y+2	; 0x02
    1924:	fb 81       	ldd	r31, Y+3	; 0x03
    1926:	82 8d       	ldd	r24, Z+26	; 0x1a
    1928:	19 82       	std	Y+1, r1	; 0x01
    192a:	88 23       	and	r24, r24
    192c:	11 f4       	brne	.+4      	; 0x1932 <xQueueIsQueueEmptyFromISR+0x20>
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    1932:	89 81       	ldd	r24, Y+1	; 0x01
}
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	cf 91       	pop	r28
    193c:	df 91       	pop	r29
    193e:	08 95       	ret

00001940 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    1940:	df 93       	push	r29
    1942:	cf 93       	push	r28
    1944:	00 d0       	rcall	.+0      	; 0x1946 <prvIsQueueFull+0x6>
    1946:	0f 92       	push	r0
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
    194c:	9b 83       	std	Y+3, r25	; 0x03
    194e:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    1950:	0f b6       	in	r0, 0x3f	; 63
    1952:	f8 94       	cli
    1954:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    1956:	ea 81       	ldd	r30, Y+2	; 0x02
    1958:	fb 81       	ldd	r31, Y+3	; 0x03
    195a:	92 8d       	ldd	r25, Z+26	; 0x1a
    195c:	ea 81       	ldd	r30, Y+2	; 0x02
    195e:	fb 81       	ldd	r31, Y+3	; 0x03
    1960:	83 8d       	ldd	r24, Z+27	; 0x1b
    1962:	19 82       	std	Y+1, r1	; 0x01
    1964:	98 17       	cp	r25, r24
    1966:	11 f4       	brne	.+4      	; 0x196c <prvIsQueueFull+0x2c>
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    196c:	0f 90       	pop	r0
    196e:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    1970:	89 81       	ldd	r24, Y+1	; 0x01
}
    1972:	0f 90       	pop	r0
    1974:	0f 90       	pop	r0
    1976:	0f 90       	pop	r0
    1978:	cf 91       	pop	r28
    197a:	df 91       	pop	r29
    197c:	08 95       	ret

0000197e <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    197e:	df 93       	push	r29
    1980:	cf 93       	push	r28
    1982:	00 d0       	rcall	.+0      	; 0x1984 <xQueueIsQueueFullFromISR+0x6>
    1984:	0f 92       	push	r0
    1986:	cd b7       	in	r28, 0x3d	; 61
    1988:	de b7       	in	r29, 0x3e	; 62
    198a:	9b 83       	std	Y+3, r25	; 0x03
    198c:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    198e:	ea 81       	ldd	r30, Y+2	; 0x02
    1990:	fb 81       	ldd	r31, Y+3	; 0x03
    1992:	92 8d       	ldd	r25, Z+26	; 0x1a
    1994:	ea 81       	ldd	r30, Y+2	; 0x02
    1996:	fb 81       	ldd	r31, Y+3	; 0x03
    1998:	83 8d       	ldd	r24, Z+27	; 0x1b
    199a:	19 82       	std	Y+1, r1	; 0x01
    199c:	98 17       	cp	r25, r24
    199e:	11 f4       	brne	.+4      	; 0x19a4 <xQueueIsQueueFullFromISR+0x26>
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    19a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	cf 91       	pop	r28
    19ae:	df 91       	pop	r29
    19b0:	08 95       	ret

000019b2 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    19b2:	af 92       	push	r10
    19b4:	bf 92       	push	r11
    19b6:	cf 92       	push	r12
    19b8:	df 92       	push	r13
    19ba:	ef 92       	push	r14
    19bc:	ff 92       	push	r15
    19be:	0f 93       	push	r16
    19c0:	1f 93       	push	r17
    19c2:	df 93       	push	r29
    19c4:	cf 93       	push	r28
    19c6:	cd b7       	in	r28, 0x3d	; 61
    19c8:	de b7       	in	r29, 0x3e	; 62
    19ca:	64 97       	sbiw	r28, 0x14	; 20
    19cc:	0f b6       	in	r0, 0x3f	; 63
    19ce:	f8 94       	cli
    19d0:	de bf       	out	0x3e, r29	; 62
    19d2:	0f be       	out	0x3f, r0	; 63
    19d4:	cd bf       	out	0x3d, r28	; 61
    19d6:	9f 83       	std	Y+7, r25	; 0x07
    19d8:	8e 83       	std	Y+6, r24	; 0x06
    19da:	79 87       	std	Y+9, r23	; 0x09
    19dc:	68 87       	std	Y+8, r22	; 0x08
    19de:	5b 87       	std	Y+11, r21	; 0x0b
    19e0:	4a 87       	std	Y+10, r20	; 0x0a
    19e2:	3d 87       	std	Y+13, r19	; 0x0d
    19e4:	2c 87       	std	Y+12, r18	; 0x0c
    19e6:	0e 87       	std	Y+14, r16	; 0x0e
    19e8:	f8 8a       	std	Y+16, r15	; 0x10
    19ea:	ef 86       	std	Y+15, r14	; 0x0f
    19ec:	da 8a       	std	Y+18, r13	; 0x12
    19ee:	c9 8a       	std	Y+17, r12	; 0x11
    19f0:	bc 8a       	std	Y+20, r11	; 0x14
    19f2:	ab 8a       	std	Y+19, r10	; 0x13
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    19f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    19f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    19f8:	29 89       	ldd	r18, Y+17	; 0x11
    19fa:	3a 89       	ldd	r19, Y+18	; 0x12
    19fc:	b9 01       	movw	r22, r18
    19fe:	0e 94 5e 13 	call	0x26bc	; 0x26bc <prvAllocateTCBAndStack>
    1a02:	9c 83       	std	Y+4, r25	; 0x04
    1a04:	8b 83       	std	Y+3, r24	; 0x03

	if( pxNewTCB != NULL )
    1a06:	8b 81       	ldd	r24, Y+3	; 0x03
    1a08:	9c 81       	ldd	r25, Y+4	; 0x04
    1a0a:	00 97       	sbiw	r24, 0x00	; 0
    1a0c:	09 f4       	brne	.+2      	; 0x1a10 <xTaskGenericCreate+0x5e>
    1a0e:	99 c0       	rjmp	.+306    	; 0x1b42 <xTaskGenericCreate+0x190>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    1a10:	eb 81       	ldd	r30, Y+3	; 0x03
    1a12:	fc 81       	ldd	r31, Y+4	; 0x04
    1a14:	27 89       	ldd	r18, Z+23	; 0x17
    1a16:	30 8d       	ldd	r19, Z+24	; 0x18
    1a18:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a1a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a1c:	01 97       	sbiw	r24, 0x01	; 1
    1a1e:	82 0f       	add	r24, r18
    1a20:	93 1f       	adc	r25, r19
    1a22:	9a 83       	std	Y+2, r25	; 0x02
    1a24:	89 83       	std	Y+1, r24	; 0x01
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    1a26:	8b 81       	ldd	r24, Y+3	; 0x03
    1a28:	9c 81       	ldd	r25, Y+4	; 0x04
    1a2a:	28 85       	ldd	r18, Y+8	; 0x08
    1a2c:	39 85       	ldd	r19, Y+9	; 0x09
    1a2e:	eb 89       	ldd	r30, Y+19	; 0x13
    1a30:	fc 89       	ldd	r31, Y+20	; 0x14
    1a32:	aa 85       	ldd	r26, Y+10	; 0x0a
    1a34:	bb 85       	ldd	r27, Y+11	; 0x0b
    1a36:	b9 01       	movw	r22, r18
    1a38:	4e 85       	ldd	r20, Y+14	; 0x0e
    1a3a:	9f 01       	movw	r18, r30
    1a3c:	8d 01       	movw	r16, r26
    1a3e:	0e 94 43 12 	call	0x2486	; 0x2486 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    1a42:	89 81       	ldd	r24, Y+1	; 0x01
    1a44:	9a 81       	ldd	r25, Y+2	; 0x02
    1a46:	2e 81       	ldd	r18, Y+6	; 0x06
    1a48:	3f 81       	ldd	r19, Y+7	; 0x07
    1a4a:	4c 85       	ldd	r20, Y+12	; 0x0c
    1a4c:	5d 85       	ldd	r21, Y+13	; 0x0d
    1a4e:	b9 01       	movw	r22, r18
    1a50:	0e 94 86 05 	call	0xb0c	; 0xb0c <pxPortInitialiseStack>
    1a54:	eb 81       	ldd	r30, Y+3	; 0x03
    1a56:	fc 81       	ldd	r31, Y+4	; 0x04
    1a58:	91 83       	std	Z+1, r25	; 0x01
    1a5a:	80 83       	st	Z, r24
		#endif

		/* Check the alignment of the initialised stack. */
		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    1a5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a5e:	98 89       	ldd	r25, Y+16	; 0x10
    1a60:	00 97       	sbiw	r24, 0x00	; 0
    1a62:	31 f0       	breq	.+12     	; 0x1a70 <xTaskGenericCreate+0xbe>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    1a64:	ef 85       	ldd	r30, Y+15	; 0x0f
    1a66:	f8 89       	ldd	r31, Y+16	; 0x10
    1a68:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6c:	91 83       	std	Z+1, r25	; 0x01
    1a6e:	80 83       	st	Z, r24
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    1a70:	0f b6       	in	r0, 0x3f	; 63
    1a72:	f8 94       	cli
    1a74:	0f 92       	push	r0
		{
			uxCurrentNumberOfTasks++;
    1a76:	80 91 0b 03 	lds	r24, 0x030B
    1a7a:	8f 5f       	subi	r24, 0xFF	; 255
    1a7c:	80 93 0b 03 	sts	0x030B, r24
			if( pxCurrentTCB == NULL )
    1a80:	80 91 08 03 	lds	r24, 0x0308
    1a84:	90 91 09 03 	lds	r25, 0x0309
    1a88:	00 97       	sbiw	r24, 0x00	; 0
    1a8a:	69 f4       	brne	.+26     	; 0x1aa6 <xTaskGenericCreate+0xf4>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    1a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a90:	90 93 09 03 	sts	0x0309, r25
    1a94:	80 93 08 03 	sts	0x0308, r24

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    1a98:	80 91 0b 03 	lds	r24, 0x030B
    1a9c:	81 30       	cpi	r24, 0x01	; 1
    1a9e:	a9 f4       	brne	.+42     	; 0x1aca <xTaskGenericCreate+0x118>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    1aa0:	0e 94 9a 12 	call	0x2534	; 0x2534 <prvInitialiseTaskLists>
    1aa4:	12 c0       	rjmp	.+36     	; 0x1aca <xTaskGenericCreate+0x118>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    1aa6:	80 91 10 03 	lds	r24, 0x0310
    1aaa:	88 23       	and	r24, r24
    1aac:	71 f4       	brne	.+28     	; 0x1aca <xTaskGenericCreate+0x118>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    1aae:	e0 91 08 03 	lds	r30, 0x0308
    1ab2:	f0 91 09 03 	lds	r31, 0x0309
    1ab6:	96 89       	ldd	r25, Z+22	; 0x16
    1ab8:	8e 85       	ldd	r24, Y+14	; 0x0e
    1aba:	89 17       	cp	r24, r25
    1abc:	30 f0       	brcs	.+12     	; 0x1aca <xTaskGenericCreate+0x118>
					{
						pxCurrentTCB = pxNewTCB;
    1abe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac2:	90 93 09 03 	sts	0x0309, r25
    1ac6:	80 93 08 03 	sts	0x0308, r24
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    1aca:	eb 81       	ldd	r30, Y+3	; 0x03
    1acc:	fc 81       	ldd	r31, Y+4	; 0x04
    1ace:	96 89       	ldd	r25, Z+22	; 0x16
    1ad0:	80 91 0e 03 	lds	r24, 0x030E
    1ad4:	89 17       	cp	r24, r25
    1ad6:	28 f4       	brcc	.+10     	; 0x1ae2 <xTaskGenericCreate+0x130>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    1ad8:	eb 81       	ldd	r30, Y+3	; 0x03
    1ada:	fc 81       	ldd	r31, Y+4	; 0x04
    1adc:	86 89       	ldd	r24, Z+22	; 0x16
    1ade:	80 93 0e 03 	sts	0x030E, r24
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    1ae2:	80 91 15 03 	lds	r24, 0x0315
    1ae6:	8f 5f       	subi	r24, 0xFF	; 255
    1ae8:	80 93 15 03 	sts	0x0315, r24

			prvAddTaskToReadyQueue( pxNewTCB );
    1aec:	eb 81       	ldd	r30, Y+3	; 0x03
    1aee:	fc 81       	ldd	r31, Y+4	; 0x04
    1af0:	96 89       	ldd	r25, Z+22	; 0x16
    1af2:	80 91 0f 03 	lds	r24, 0x030F
    1af6:	89 17       	cp	r24, r25
    1af8:	28 f4       	brcc	.+10     	; 0x1b04 <xTaskGenericCreate+0x152>
    1afa:	eb 81       	ldd	r30, Y+3	; 0x03
    1afc:	fc 81       	ldd	r31, Y+4	; 0x04
    1afe:	86 89       	ldd	r24, Z+22	; 0x16
    1b00:	80 93 0f 03 	sts	0x030F, r24
    1b04:	eb 81       	ldd	r30, Y+3	; 0x03
    1b06:	fc 81       	ldd	r31, Y+4	; 0x04
    1b08:	86 89       	ldd	r24, Z+22	; 0x16
    1b0a:	28 2f       	mov	r18, r24
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	c9 01       	movw	r24, r18
    1b10:	88 0f       	add	r24, r24
    1b12:	99 1f       	adc	r25, r25
    1b14:	88 0f       	add	r24, r24
    1b16:	99 1f       	adc	r25, r25
    1b18:	88 0f       	add	r24, r24
    1b1a:	99 1f       	adc	r25, r25
    1b1c:	82 0f       	add	r24, r18
    1b1e:	93 1f       	adc	r25, r19
    1b20:	ac 01       	movw	r20, r24
    1b22:	4a 5e       	subi	r20, 0xEA	; 234
    1b24:	5c 4f       	sbci	r21, 0xFC	; 252
    1b26:	8b 81       	ldd	r24, Y+3	; 0x03
    1b28:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2a:	9c 01       	movw	r18, r24
    1b2c:	2e 5f       	subi	r18, 0xFE	; 254
    1b2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b30:	ca 01       	movw	r24, r20
    1b32:	b9 01       	movw	r22, r18
    1b34:	0e 94 85 04 	call	0x90a	; 0x90a <vListInsertEnd>

			xReturn = pdPASS;
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	8d 83       	std	Y+5, r24	; 0x05
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    1b3c:	0f 90       	pop	r0
    1b3e:	0f be       	out	0x3f, r0	; 63
    1b40:	02 c0       	rjmp	.+4      	; 0x1b46 <xTaskGenericCreate+0x194>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    1b42:	8f ef       	ldi	r24, 0xFF	; 255
    1b44:	8d 83       	std	Y+5, r24	; 0x05
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    1b46:	8d 81       	ldd	r24, Y+5	; 0x05
    1b48:	81 30       	cpi	r24, 0x01	; 1
    1b4a:	71 f4       	brne	.+28     	; 0x1b68 <xTaskGenericCreate+0x1b6>
	{
		if( xSchedulerRunning != pdFALSE )
    1b4c:	80 91 10 03 	lds	r24, 0x0310
    1b50:	88 23       	and	r24, r24
    1b52:	51 f0       	breq	.+20     	; 0x1b68 <xTaskGenericCreate+0x1b6>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    1b54:	e0 91 08 03 	lds	r30, 0x0308
    1b58:	f0 91 09 03 	lds	r31, 0x0309
    1b5c:	96 89       	ldd	r25, Z+22	; 0x16
    1b5e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b60:	98 17       	cp	r25, r24
    1b62:	10 f4       	brcc	.+4      	; 0x1b68 <xTaskGenericCreate+0x1b6>
			{
				portYIELD_WITHIN_API();
    1b64:	0e 94 45 07 	call	0xe8a	; 0xe8a <vPortYield>
			}
		}
	}

	return xReturn;
    1b68:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1b6a:	64 96       	adiw	r28, 0x14	; 20
    1b6c:	0f b6       	in	r0, 0x3f	; 63
    1b6e:	f8 94       	cli
    1b70:	de bf       	out	0x3e, r29	; 62
    1b72:	0f be       	out	0x3f, r0	; 63
    1b74:	cd bf       	out	0x3d, r28	; 61
    1b76:	cf 91       	pop	r28
    1b78:	df 91       	pop	r29
    1b7a:	1f 91       	pop	r17
    1b7c:	0f 91       	pop	r16
    1b7e:	ff 90       	pop	r15
    1b80:	ef 90       	pop	r14
    1b82:	df 90       	pop	r13
    1b84:	cf 90       	pop	r12
    1b86:	bf 90       	pop	r11
    1b88:	af 90       	pop	r10
    1b8a:	08 95       	ret

00001b8c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    1b8c:	df 93       	push	r29
    1b8e:	cf 93       	push	r28
    1b90:	00 d0       	rcall	.+0      	; 0x1b92 <vTaskDelete+0x6>
    1b92:	00 d0       	rcall	.+0      	; 0x1b94 <vTaskDelete+0x8>
    1b94:	00 d0       	rcall	.+0      	; 0x1b96 <vTaskDelete+0xa>
    1b96:	cd b7       	in	r28, 0x3d	; 61
    1b98:	de b7       	in	r29, 0x3e	; 62
    1b9a:	9c 83       	std	Y+4, r25	; 0x04
    1b9c:	8b 83       	std	Y+3, r24	; 0x03
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    1b9e:	0f b6       	in	r0, 0x3f	; 63
    1ba0:	f8 94       	cli
    1ba2:	0f 92       	push	r0
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    1ba4:	20 91 08 03 	lds	r18, 0x0308
    1ba8:	30 91 09 03 	lds	r19, 0x0309
    1bac:	8b 81       	ldd	r24, Y+3	; 0x03
    1bae:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb0:	82 17       	cp	r24, r18
    1bb2:	93 07       	cpc	r25, r19
    1bb4:	11 f4       	brne	.+4      	; 0x1bba <vTaskDelete+0x2e>
			{
				pxTaskToDelete = NULL;
    1bb6:	1c 82       	std	Y+4, r1	; 0x04
    1bb8:	1b 82       	std	Y+3, r1	; 0x03
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    1bba:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bbe:	00 97       	sbiw	r24, 0x00	; 0
    1bc0:	39 f4       	brne	.+14     	; 0x1bd0 <vTaskDelete+0x44>
    1bc2:	80 91 08 03 	lds	r24, 0x0308
    1bc6:	90 91 09 03 	lds	r25, 0x0309
    1bca:	9e 83       	std	Y+6, r25	; 0x06
    1bcc:	8d 83       	std	Y+5, r24	; 0x05
    1bce:	04 c0       	rjmp	.+8      	; 0x1bd8 <vTaskDelete+0x4c>
    1bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd4:	9e 83       	std	Y+6, r25	; 0x06
    1bd6:	8d 83       	std	Y+5, r24	; 0x05
    1bd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bda:	9e 81       	ldd	r25, Y+6	; 0x06
    1bdc:	9a 83       	std	Y+2, r25	; 0x02
    1bde:	89 83       	std	Y+1, r24	; 0x01

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    1be0:	89 81       	ldd	r24, Y+1	; 0x01
    1be2:	9a 81       	ldd	r25, Y+2	; 0x02
    1be4:	02 96       	adiw	r24, 0x02	; 2
    1be6:	0e 94 3d 05 	call	0xa7a	; 0xa7a <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    1bea:	e9 81       	ldd	r30, Y+1	; 0x01
    1bec:	fa 81       	ldd	r31, Y+2	; 0x02
    1bee:	84 89       	ldd	r24, Z+20	; 0x14
    1bf0:	95 89       	ldd	r25, Z+21	; 0x15
    1bf2:	00 97       	sbiw	r24, 0x00	; 0
    1bf4:	29 f0       	breq	.+10     	; 0x1c00 <vTaskDelete+0x74>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    1bf6:	89 81       	ldd	r24, Y+1	; 0x01
    1bf8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bfa:	0c 96       	adiw	r24, 0x0c	; 12
    1bfc:	0e 94 3d 05 	call	0xa7a	; 0xa7a <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    1c00:	89 81       	ldd	r24, Y+1	; 0x01
    1c02:	9a 81       	ldd	r25, Y+2	; 0x02
    1c04:	9c 01       	movw	r18, r24
    1c06:	2e 5f       	subi	r18, 0xFE	; 254
    1c08:	3f 4f       	sbci	r19, 0xFF	; 255
    1c0a:	82 e6       	ldi	r24, 0x62	; 98
    1c0c:	93 e0       	ldi	r25, 0x03	; 3
    1c0e:	b9 01       	movw	r22, r18
    1c10:	0e 94 85 04 	call	0x90a	; 0x90a <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    1c14:	80 91 0a 03 	lds	r24, 0x030A
    1c18:	8f 5f       	subi	r24, 0xFF	; 255
    1c1a:	80 93 0a 03 	sts	0x030A, r24

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    1c1e:	80 91 15 03 	lds	r24, 0x0315
    1c22:	8f 5f       	subi	r24, 0xFF	; 255
    1c24:	80 93 15 03 	sts	0x0315, r24

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    1c28:	0f 90       	pop	r0
    1c2a:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    1c2c:	80 91 10 03 	lds	r24, 0x0310
    1c30:	88 23       	and	r24, r24
    1c32:	31 f0       	breq	.+12     	; 0x1c40 <vTaskDelete+0xb4>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    1c34:	8b 81       	ldd	r24, Y+3	; 0x03
    1c36:	9c 81       	ldd	r25, Y+4	; 0x04
    1c38:	00 97       	sbiw	r24, 0x00	; 0
    1c3a:	11 f4       	brne	.+4      	; 0x1c40 <vTaskDelete+0xb4>
			{
				portYIELD_WITHIN_API();
    1c3c:	0e 94 45 07 	call	0xe8a	; 0xe8a <vPortYield>
			}
		}
	}
    1c40:	26 96       	adiw	r28, 0x06	; 6
    1c42:	0f b6       	in	r0, 0x3f	; 63
    1c44:	f8 94       	cli
    1c46:	de bf       	out	0x3e, r29	; 62
    1c48:	0f be       	out	0x3f, r0	; 63
    1c4a:	cd bf       	out	0x3d, r28	; 61
    1c4c:	cf 91       	pop	r28
    1c4e:	df 91       	pop	r29
    1c50:	08 95       	ret

00001c52 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    1c52:	df 93       	push	r29
    1c54:	cf 93       	push	r28
    1c56:	cd b7       	in	r28, 0x3d	; 61
    1c58:	de b7       	in	r29, 0x3e	; 62
    1c5a:	28 97       	sbiw	r28, 0x08	; 8
    1c5c:	0f b6       	in	r0, 0x3f	; 63
    1c5e:	f8 94       	cli
    1c60:	de bf       	out	0x3e, r29	; 62
    1c62:	0f be       	out	0x3f, r0	; 63
    1c64:	cd bf       	out	0x3d, r28	; 61
    1c66:	9e 83       	std	Y+6, r25	; 0x06
    1c68:	8d 83       	std	Y+5, r24	; 0x05
    1c6a:	78 87       	std	Y+8, r23	; 0x08
    1c6c:	6f 83       	std	Y+7, r22	; 0x07
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    1c6e:	19 82       	std	Y+1, r1	; 0x01

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    1c70:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    1c74:	ed 81       	ldd	r30, Y+5	; 0x05
    1c76:	fe 81       	ldd	r31, Y+6	; 0x06
    1c78:	20 81       	ld	r18, Z
    1c7a:	31 81       	ldd	r19, Z+1	; 0x01
    1c7c:	8f 81       	ldd	r24, Y+7	; 0x07
    1c7e:	98 85       	ldd	r25, Y+8	; 0x08
    1c80:	82 0f       	add	r24, r18
    1c82:	93 1f       	adc	r25, r19
    1c84:	9c 83       	std	Y+4, r25	; 0x04
    1c86:	8b 83       	std	Y+3, r24	; 0x03

			if( xTickCount < *pxPreviousWakeTime )
    1c88:	ed 81       	ldd	r30, Y+5	; 0x05
    1c8a:	fe 81       	ldd	r31, Y+6	; 0x06
    1c8c:	20 81       	ld	r18, Z
    1c8e:	31 81       	ldd	r19, Z+1	; 0x01
    1c90:	80 91 0c 03 	lds	r24, 0x030C
    1c94:	90 91 0d 03 	lds	r25, 0x030D
    1c98:	82 17       	cp	r24, r18
    1c9a:	93 07       	cpc	r25, r19
    1c9c:	a8 f4       	brcc	.+42     	; 0x1cc8 <vTaskDelayUntil+0x76>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    1c9e:	ed 81       	ldd	r30, Y+5	; 0x05
    1ca0:	fe 81       	ldd	r31, Y+6	; 0x06
    1ca2:	20 81       	ld	r18, Z
    1ca4:	31 81       	ldd	r19, Z+1	; 0x01
    1ca6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca8:	9c 81       	ldd	r25, Y+4	; 0x04
    1caa:	82 17       	cp	r24, r18
    1cac:	93 07       	cpc	r25, r19
    1cae:	00 f5       	brcc	.+64     	; 0x1cf0 <vTaskDelayUntil+0x9e>
    1cb0:	20 91 0c 03 	lds	r18, 0x030C
    1cb4:	30 91 0d 03 	lds	r19, 0x030D
    1cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cba:	9c 81       	ldd	r25, Y+4	; 0x04
    1cbc:	28 17       	cp	r18, r24
    1cbe:	39 07       	cpc	r19, r25
    1cc0:	b8 f4       	brcc	.+46     	; 0x1cf0 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	89 83       	std	Y+1, r24	; 0x01
    1cc6:	14 c0       	rjmp	.+40     	; 0x1cf0 <vTaskDelayUntil+0x9e>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    1cc8:	ed 81       	ldd	r30, Y+5	; 0x05
    1cca:	fe 81       	ldd	r31, Y+6	; 0x06
    1ccc:	20 81       	ld	r18, Z
    1cce:	31 81       	ldd	r19, Z+1	; 0x01
    1cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd4:	82 17       	cp	r24, r18
    1cd6:	93 07       	cpc	r25, r19
    1cd8:	48 f0       	brcs	.+18     	; 0x1cec <vTaskDelayUntil+0x9a>
    1cda:	20 91 0c 03 	lds	r18, 0x030C
    1cde:	30 91 0d 03 	lds	r19, 0x030D
    1ce2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce6:	28 17       	cp	r18, r24
    1ce8:	39 07       	cpc	r19, r25
    1cea:	10 f4       	brcc	.+4      	; 0x1cf0 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	89 83       	std	Y+1, r24	; 0x01
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    1cf0:	ed 81       	ldd	r30, Y+5	; 0x05
    1cf2:	fe 81       	ldd	r31, Y+6	; 0x06
    1cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf8:	91 83       	std	Z+1, r25	; 0x01
    1cfa:	80 83       	st	Z, r24

			if( xShouldDelay != pdFALSE )
    1cfc:	89 81       	ldd	r24, Y+1	; 0x01
    1cfe:	88 23       	and	r24, r24
    1d00:	59 f0       	breq	.+22     	; 0x1d18 <vTaskDelayUntil+0xc6>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    1d02:	80 91 08 03 	lds	r24, 0x0308
    1d06:	90 91 09 03 	lds	r25, 0x0309
    1d0a:	02 96       	adiw	r24, 0x02	; 2
    1d0c:	0e 94 3d 05 	call	0xa7a	; 0xa7a <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    1d10:	8b 81       	ldd	r24, Y+3	; 0x03
    1d12:	9c 81       	ldd	r25, Y+4	; 0x04
    1d14:	0e 94 15 13 	call	0x262a	; 0x262a <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    1d18:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <xTaskResumeAll>
    1d1c:	8a 83       	std	Y+2, r24	; 0x02

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d20:	88 23       	and	r24, r24
    1d22:	11 f4       	brne	.+4      	; 0x1d28 <vTaskDelayUntil+0xd6>
		{
			portYIELD_WITHIN_API();
    1d24:	0e 94 45 07 	call	0xe8a	; 0xe8a <vPortYield>
		}
	}
    1d28:	28 96       	adiw	r28, 0x08	; 8
    1d2a:	0f b6       	in	r0, 0x3f	; 63
    1d2c:	f8 94       	cli
    1d2e:	de bf       	out	0x3e, r29	; 62
    1d30:	0f be       	out	0x3f, r0	; 63
    1d32:	cd bf       	out	0x3d, r28	; 61
    1d34:	cf 91       	pop	r28
    1d36:	df 91       	pop	r29
    1d38:	08 95       	ret

00001d3a <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    1d3a:	df 93       	push	r29
    1d3c:	cf 93       	push	r28
    1d3e:	00 d0       	rcall	.+0      	; 0x1d40 <vTaskDelay+0x6>
    1d40:	00 d0       	rcall	.+0      	; 0x1d42 <vTaskDelay+0x8>
    1d42:	0f 92       	push	r0
    1d44:	cd b7       	in	r28, 0x3d	; 61
    1d46:	de b7       	in	r29, 0x3e	; 62
    1d48:	9d 83       	std	Y+5, r25	; 0x05
    1d4a:	8c 83       	std	Y+4, r24	; 0x04
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    1d4c:	19 82       	std	Y+1, r1	; 0x01

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    1d4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d50:	9d 81       	ldd	r25, Y+5	; 0x05
    1d52:	00 97       	sbiw	r24, 0x00	; 0
    1d54:	d1 f0       	breq	.+52     	; 0x1d8a <vTaskDelay+0x50>
		{
			vTaskSuspendAll();
    1d56:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    1d5a:	20 91 0c 03 	lds	r18, 0x030C
    1d5e:	30 91 0d 03 	lds	r19, 0x030D
    1d62:	8c 81       	ldd	r24, Y+4	; 0x04
    1d64:	9d 81       	ldd	r25, Y+5	; 0x05
    1d66:	82 0f       	add	r24, r18
    1d68:	93 1f       	adc	r25, r19
    1d6a:	9b 83       	std	Y+3, r25	; 0x03
    1d6c:	8a 83       	std	Y+2, r24	; 0x02

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    1d6e:	80 91 08 03 	lds	r24, 0x0308
    1d72:	90 91 09 03 	lds	r25, 0x0309
    1d76:	02 96       	adiw	r24, 0x02	; 2
    1d78:	0e 94 3d 05 	call	0xa7a	; 0xa7a <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    1d7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d80:	0e 94 15 13 	call	0x262a	; 0x262a <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    1d84:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <xTaskResumeAll>
    1d88:	89 83       	std	Y+1, r24	; 0x01
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1d8a:	89 81       	ldd	r24, Y+1	; 0x01
    1d8c:	88 23       	and	r24, r24
    1d8e:	11 f4       	brne	.+4      	; 0x1d94 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
    1d90:	0e 94 45 07 	call	0xe8a	; 0xe8a <vPortYield>
		}
	}
    1d94:	0f 90       	pop	r0
    1d96:	0f 90       	pop	r0
    1d98:	0f 90       	pop	r0
    1d9a:	0f 90       	pop	r0
    1d9c:	0f 90       	pop	r0
    1d9e:	cf 91       	pop	r28
    1da0:	df 91       	pop	r29
    1da2:	08 95       	ret

00001da4 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    1da4:	af 92       	push	r10
    1da6:	bf 92       	push	r11
    1da8:	cf 92       	push	r12
    1daa:	df 92       	push	r13
    1dac:	ef 92       	push	r14
    1dae:	ff 92       	push	r15
    1db0:	0f 93       	push	r16
    1db2:	df 93       	push	r29
    1db4:	cf 93       	push	r28
    1db6:	0f 92       	push	r0
    1db8:	cd b7       	in	r28, 0x3d	; 61
    1dba:	de b7       	in	r29, 0x3e	; 62
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    1dbc:	2c e6       	ldi	r18, 0x6C	; 108
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	89 e3       	ldi	r24, 0x39	; 57
    1dc2:	92 e1       	ldi	r25, 0x12	; 18
    1dc4:	b9 01       	movw	r22, r18
    1dc6:	45 e5       	ldi	r20, 0x55	; 85
    1dc8:	50 e0       	ldi	r21, 0x00	; 0
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	00 e0       	ldi	r16, 0x00	; 0
    1dd0:	ee 24       	eor	r14, r14
    1dd2:	ff 24       	eor	r15, r15
    1dd4:	cc 24       	eor	r12, r12
    1dd6:	dd 24       	eor	r13, r13
    1dd8:	aa 24       	eor	r10, r10
    1dda:	bb 24       	eor	r11, r11
    1ddc:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <xTaskGenericCreate>
    1de0:	89 83       	std	Y+1, r24	; 0x01
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
    1de2:	89 81       	ldd	r24, Y+1	; 0x01
    1de4:	81 30       	cpi	r24, 0x01	; 1
    1de6:	51 f4       	brne	.+20     	; 0x1dfc <vTaskStartScheduler+0x58>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    1de8:	f8 94       	cli

		xSchedulerRunning = pdTRUE;
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	80 93 10 03 	sts	0x0310, r24
		xTickCount = ( portTickType ) 0U;
    1df0:	10 92 0d 03 	sts	0x030D, r1
    1df4:	10 92 0c 03 	sts	0x030C, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    1df8:	0e 94 09 07 	call	0xe12	; 0xe12 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    1dfc:	0f 90       	pop	r0
    1dfe:	cf 91       	pop	r28
    1e00:	df 91       	pop	r29
    1e02:	0f 91       	pop	r16
    1e04:	ff 90       	pop	r15
    1e06:	ef 90       	pop	r14
    1e08:	df 90       	pop	r13
    1e0a:	cf 90       	pop	r12
    1e0c:	bf 90       	pop	r11
    1e0e:	af 90       	pop	r10
    1e10:	08 95       	ret

00001e12 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    1e12:	df 93       	push	r29
    1e14:	cf 93       	push	r28
    1e16:	cd b7       	in	r28, 0x3d	; 61
    1e18:	de b7       	in	r29, 0x3e	; 62
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    1e1a:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    1e1c:	10 92 10 03 	sts	0x0310, r1
	vPortEndScheduler();
    1e20:	0e 94 3e 07 	call	0xe7c	; 0xe7c <vPortEndScheduler>
}
    1e24:	cf 91       	pop	r28
    1e26:	df 91       	pop	r29
    1e28:	08 95       	ret

00001e2a <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    1e2a:	df 93       	push	r29
    1e2c:	cf 93       	push	r28
    1e2e:	cd b7       	in	r28, 0x3d	; 61
    1e30:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    1e32:	80 91 11 03 	lds	r24, 0x0311
    1e36:	8f 5f       	subi	r24, 0xFF	; 255
    1e38:	80 93 11 03 	sts	0x0311, r24
}
    1e3c:	cf 91       	pop	r28
    1e3e:	df 91       	pop	r29
    1e40:	08 95       	ret

00001e42 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    1e42:	df 93       	push	r29
    1e44:	cf 93       	push	r28
    1e46:	00 d0       	rcall	.+0      	; 0x1e48 <xTaskResumeAll+0x6>
    1e48:	00 d0       	rcall	.+0      	; 0x1e4a <xTaskResumeAll+0x8>
    1e4a:	cd b7       	in	r28, 0x3d	; 61
    1e4c:	de b7       	in	r29, 0x3e	; 62
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    1e4e:	1a 82       	std	Y+2, r1	; 0x02
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    1e50:	0f b6       	in	r0, 0x3f	; 63
    1e52:	f8 94       	cli
    1e54:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    1e56:	80 91 11 03 	lds	r24, 0x0311
    1e5a:	81 50       	subi	r24, 0x01	; 1
    1e5c:	80 93 11 03 	sts	0x0311, r24

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    1e60:	80 91 11 03 	lds	r24, 0x0311
    1e64:	88 23       	and	r24, r24
    1e66:	09 f0       	breq	.+2      	; 0x1e6a <xTaskResumeAll+0x28>
    1e68:	6c c0       	rjmp	.+216    	; 0x1f42 <xTaskResumeAll+0x100>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    1e6a:	80 91 0b 03 	lds	r24, 0x030B
    1e6e:	88 23       	and	r24, r24
    1e70:	09 f4       	brne	.+2      	; 0x1e74 <xTaskResumeAll+0x32>
    1e72:	67 c0       	rjmp	.+206    	; 0x1f42 <xTaskResumeAll+0x100>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    1e74:	19 82       	std	Y+1, r1	; 0x01
    1e76:	41 c0       	rjmp	.+130    	; 0x1efa <xTaskResumeAll+0xb8>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    1e78:	e0 91 5e 03 	lds	r30, 0x035E
    1e7c:	f0 91 5f 03 	lds	r31, 0x035F
    1e80:	86 81       	ldd	r24, Z+6	; 0x06
    1e82:	97 81       	ldd	r25, Z+7	; 0x07
    1e84:	9c 83       	std	Y+4, r25	; 0x04
    1e86:	8b 83       	std	Y+3, r24	; 0x03
					vListRemove( &( pxTCB->xEventListItem ) );
    1e88:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e8c:	0c 96       	adiw	r24, 0x0c	; 12
    1e8e:	0e 94 3d 05 	call	0xa7a	; 0xa7a <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    1e92:	8b 81       	ldd	r24, Y+3	; 0x03
    1e94:	9c 81       	ldd	r25, Y+4	; 0x04
    1e96:	02 96       	adiw	r24, 0x02	; 2
    1e98:	0e 94 3d 05 	call	0xa7a	; 0xa7a <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    1e9c:	eb 81       	ldd	r30, Y+3	; 0x03
    1e9e:	fc 81       	ldd	r31, Y+4	; 0x04
    1ea0:	96 89       	ldd	r25, Z+22	; 0x16
    1ea2:	80 91 0f 03 	lds	r24, 0x030F
    1ea6:	89 17       	cp	r24, r25
    1ea8:	28 f4       	brcc	.+10     	; 0x1eb4 <xTaskResumeAll+0x72>
    1eaa:	eb 81       	ldd	r30, Y+3	; 0x03
    1eac:	fc 81       	ldd	r31, Y+4	; 0x04
    1eae:	86 89       	ldd	r24, Z+22	; 0x16
    1eb0:	80 93 0f 03 	sts	0x030F, r24
    1eb4:	eb 81       	ldd	r30, Y+3	; 0x03
    1eb6:	fc 81       	ldd	r31, Y+4	; 0x04
    1eb8:	86 89       	ldd	r24, Z+22	; 0x16
    1eba:	28 2f       	mov	r18, r24
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	c9 01       	movw	r24, r18
    1ec0:	88 0f       	add	r24, r24
    1ec2:	99 1f       	adc	r25, r25
    1ec4:	88 0f       	add	r24, r24
    1ec6:	99 1f       	adc	r25, r25
    1ec8:	88 0f       	add	r24, r24
    1eca:	99 1f       	adc	r25, r25
    1ecc:	82 0f       	add	r24, r18
    1ece:	93 1f       	adc	r25, r19
    1ed0:	8a 5e       	subi	r24, 0xEA	; 234
    1ed2:	9c 4f       	sbci	r25, 0xFC	; 252
    1ed4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ed6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ed8:	2e 5f       	subi	r18, 0xFE	; 254
    1eda:	3f 4f       	sbci	r19, 0xFF	; 255
    1edc:	b9 01       	movw	r22, r18
    1ede:	0e 94 85 04 	call	0x90a	; 0x90a <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1ee2:	eb 81       	ldd	r30, Y+3	; 0x03
    1ee4:	fc 81       	ldd	r31, Y+4	; 0x04
    1ee6:	96 89       	ldd	r25, Z+22	; 0x16
    1ee8:	e0 91 08 03 	lds	r30, 0x0308
    1eec:	f0 91 09 03 	lds	r31, 0x0309
    1ef0:	86 89       	ldd	r24, Z+22	; 0x16
    1ef2:	98 17       	cp	r25, r24
    1ef4:	10 f0       	brcs	.+4      	; 0x1efa <xTaskResumeAll+0xb8>
					{
						xYieldRequired = pdTRUE;
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	89 83       	std	Y+1, r24	; 0x01
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    1efa:	80 91 59 03 	lds	r24, 0x0359
    1efe:	88 23       	and	r24, r24
    1f00:	09 f0       	breq	.+2      	; 0x1f04 <xTaskResumeAll+0xc2>
    1f02:	ba cf       	rjmp	.-140    	; 0x1e78 <xTaskResumeAll+0x36>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    1f04:	80 91 12 03 	lds	r24, 0x0312
    1f08:	88 23       	and	r24, r24
    1f0a:	71 f0       	breq	.+28     	; 0x1f28 <xTaskResumeAll+0xe6>
    1f0c:	07 c0       	rjmp	.+14     	; 0x1f1c <xTaskResumeAll+0xda>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
    1f0e:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <vTaskIncrementTick>
						--uxMissedTicks;
    1f12:	80 91 12 03 	lds	r24, 0x0312
    1f16:	81 50       	subi	r24, 0x01	; 1
    1f18:	80 93 12 03 	sts	0x0312, r24
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    1f1c:	80 91 12 03 	lds	r24, 0x0312
    1f20:	88 23       	and	r24, r24
    1f22:	a9 f7       	brne	.-22     	; 0x1f0e <xTaskResumeAll+0xcc>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	89 83       	std	Y+1, r24	; 0x01
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    1f28:	89 81       	ldd	r24, Y+1	; 0x01
    1f2a:	81 30       	cpi	r24, 0x01	; 1
    1f2c:	21 f0       	breq	.+8      	; 0x1f36 <xTaskResumeAll+0xf4>
    1f2e:	80 91 13 03 	lds	r24, 0x0313
    1f32:	81 30       	cpi	r24, 0x01	; 1
    1f34:	31 f4       	brne	.+12     	; 0x1f42 <xTaskResumeAll+0x100>
				{
					xAlreadyYielded = pdTRUE;
    1f36:	81 e0       	ldi	r24, 0x01	; 1
    1f38:	8a 83       	std	Y+2, r24	; 0x02
					xMissedYield = pdFALSE;
    1f3a:	10 92 13 03 	sts	0x0313, r1
					portYIELD_WITHIN_API();
    1f3e:	0e 94 45 07 	call	0xe8a	; 0xe8a <vPortYield>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    1f42:	0f 90       	pop	r0
    1f44:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
    1f46:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1f48:	0f 90       	pop	r0
    1f4a:	0f 90       	pop	r0
    1f4c:	0f 90       	pop	r0
    1f4e:	0f 90       	pop	r0
    1f50:	cf 91       	pop	r28
    1f52:	df 91       	pop	r29
    1f54:	08 95       	ret

00001f56 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    1f56:	df 93       	push	r29
    1f58:	cf 93       	push	r28
    1f5a:	00 d0       	rcall	.+0      	; 0x1f5c <xTaskGetTickCount+0x6>
    1f5c:	cd b7       	in	r28, 0x3d	; 61
    1f5e:	de b7       	in	r29, 0x3e	; 62
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    1f60:	0f b6       	in	r0, 0x3f	; 63
    1f62:	f8 94       	cli
    1f64:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    1f66:	80 91 0c 03 	lds	r24, 0x030C
    1f6a:	90 91 0d 03 	lds	r25, 0x030D
    1f6e:	9a 83       	std	Y+2, r25	; 0x02
    1f70:	89 83       	std	Y+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
    1f72:	0f 90       	pop	r0
    1f74:	0f be       	out	0x3f, r0	; 63

	return xTicks;
    1f76:	89 81       	ldd	r24, Y+1	; 0x01
    1f78:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1f7a:	0f 90       	pop	r0
    1f7c:	0f 90       	pop	r0
    1f7e:	cf 91       	pop	r28
    1f80:	df 91       	pop	r29
    1f82:	08 95       	ret

00001f84 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    1f84:	df 93       	push	r29
    1f86:	cf 93       	push	r28
    1f88:	00 d0       	rcall	.+0      	; 0x1f8a <xTaskGetTickCountFromISR+0x6>
    1f8a:	0f 92       	push	r0
    1f8c:	cd b7       	in	r28, 0x3d	; 61
    1f8e:	de b7       	in	r29, 0x3e	; 62
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1f90:	19 82       	std	Y+1, r1	; 0x01
	xReturn = xTickCount;
    1f92:	80 91 0c 03 	lds	r24, 0x030C
    1f96:	90 91 0d 03 	lds	r25, 0x030D
    1f9a:	9b 83       	std	Y+3, r25	; 0x03
    1f9c:	8a 83       	std	Y+2, r24	; 0x02
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    1f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa0:	9b 81       	ldd	r25, Y+3	; 0x03
}
    1fa2:	0f 90       	pop	r0
    1fa4:	0f 90       	pop	r0
    1fa6:	0f 90       	pop	r0
    1fa8:	cf 91       	pop	r28
    1faa:	df 91       	pop	r29
    1fac:	08 95       	ret

00001fae <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    1fae:	df 93       	push	r29
    1fb0:	cf 93       	push	r28
    1fb2:	cd b7       	in	r28, 0x3d	; 61
    1fb4:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    1fb6:	80 91 0b 03 	lds	r24, 0x030B
}
    1fba:	cf 91       	pop	r28
    1fbc:	df 91       	pop	r29
    1fbe:	08 95       	ret

00001fc0 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    1fc0:	df 93       	push	r29
    1fc2:	cf 93       	push	r28
    1fc4:	00 d0       	rcall	.+0      	; 0x1fc6 <vTaskIncrementTick+0x6>
    1fc6:	00 d0       	rcall	.+0      	; 0x1fc8 <vTaskIncrementTick+0x8>
    1fc8:	00 d0       	rcall	.+0      	; 0x1fca <vTaskIncrementTick+0xa>
    1fca:	cd b7       	in	r28, 0x3d	; 61
    1fcc:	de b7       	in	r29, 0x3e	; 62
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    1fce:	80 91 11 03 	lds	r24, 0x0311
    1fd2:	88 23       	and	r24, r24
    1fd4:	09 f0       	breq	.+2      	; 0x1fd8 <vTaskIncrementTick+0x18>
    1fd6:	bb c0       	rjmp	.+374    	; 0x214e <vTaskIncrementTick+0x18e>
	{
		++xTickCount;
    1fd8:	80 91 0c 03 	lds	r24, 0x030C
    1fdc:	90 91 0d 03 	lds	r25, 0x030D
    1fe0:	01 96       	adiw	r24, 0x01	; 1
    1fe2:	90 93 0d 03 	sts	0x030D, r25
    1fe6:	80 93 0c 03 	sts	0x030C, r24
		if( xTickCount == ( portTickType ) 0U )
    1fea:	80 91 0c 03 	lds	r24, 0x030C
    1fee:	90 91 0d 03 	lds	r25, 0x030D
    1ff2:	00 97       	sbiw	r24, 0x00	; 0
    1ff4:	d1 f5       	brne	.+116    	; 0x206a <vTaskIncrementTick+0xaa>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    1ff6:	80 91 55 03 	lds	r24, 0x0355
    1ffa:	90 91 56 03 	lds	r25, 0x0356
    1ffe:	9c 83       	std	Y+4, r25	; 0x04
    2000:	8b 83       	std	Y+3, r24	; 0x03
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    2002:	80 91 57 03 	lds	r24, 0x0357
    2006:	90 91 58 03 	lds	r25, 0x0358
    200a:	90 93 56 03 	sts	0x0356, r25
    200e:	80 93 55 03 	sts	0x0355, r24
			pxOverflowDelayedTaskList = pxTemp;
    2012:	8b 81       	ldd	r24, Y+3	; 0x03
    2014:	9c 81       	ldd	r25, Y+4	; 0x04
    2016:	90 93 58 03 	sts	0x0358, r25
    201a:	80 93 57 03 	sts	0x0357, r24
			xNumOfOverflows++;
    201e:	80 91 14 03 	lds	r24, 0x0314
    2022:	8f 5f       	subi	r24, 0xFF	; 255
    2024:	80 93 14 03 	sts	0x0314, r24
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    2028:	e0 91 55 03 	lds	r30, 0x0355
    202c:	f0 91 56 03 	lds	r31, 0x0356
    2030:	80 81       	ld	r24, Z
    2032:	88 23       	and	r24, r24
    2034:	39 f4       	brne	.+14     	; 0x2044 <vTaskIncrementTick+0x84>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    2036:	8f ef       	ldi	r24, 0xFF	; 255
    2038:	9f ef       	ldi	r25, 0xFF	; 255
    203a:	90 93 72 00 	sts	0x0072, r25
    203e:	80 93 71 00 	sts	0x0071, r24
    2042:	13 c0       	rjmp	.+38     	; 0x206a <vTaskIncrementTick+0xaa>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    2044:	e0 91 55 03 	lds	r30, 0x0355
    2048:	f0 91 56 03 	lds	r31, 0x0356
    204c:	05 80       	ldd	r0, Z+5	; 0x05
    204e:	f6 81       	ldd	r31, Z+6	; 0x06
    2050:	e0 2d       	mov	r30, r0
    2052:	86 81       	ldd	r24, Z+6	; 0x06
    2054:	97 81       	ldd	r25, Z+7	; 0x07
    2056:	9e 83       	std	Y+6, r25	; 0x06
    2058:	8d 83       	std	Y+5, r24	; 0x05
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    205a:	ed 81       	ldd	r30, Y+5	; 0x05
    205c:	fe 81       	ldd	r31, Y+6	; 0x06
    205e:	82 81       	ldd	r24, Z+2	; 0x02
    2060:	93 81       	ldd	r25, Z+3	; 0x03
    2062:	90 93 72 00 	sts	0x0072, r25
    2066:	80 93 71 00 	sts	0x0071, r24
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    206a:	20 91 0c 03 	lds	r18, 0x030C
    206e:	30 91 0d 03 	lds	r19, 0x030D
    2072:	80 91 71 00 	lds	r24, 0x0071
    2076:	90 91 72 00 	lds	r25, 0x0072
    207a:	28 17       	cp	r18, r24
    207c:	39 07       	cpc	r19, r25
    207e:	08 f4       	brcc	.+2      	; 0x2082 <vTaskIncrementTick+0xc2>
    2080:	6b c0       	rjmp	.+214    	; 0x2158 <vTaskIncrementTick+0x198>
    2082:	e0 91 55 03 	lds	r30, 0x0355
    2086:	f0 91 56 03 	lds	r31, 0x0356
    208a:	80 81       	ld	r24, Z
    208c:	88 23       	and	r24, r24
    208e:	39 f4       	brne	.+14     	; 0x209e <vTaskIncrementTick+0xde>
    2090:	8f ef       	ldi	r24, 0xFF	; 255
    2092:	9f ef       	ldi	r25, 0xFF	; 255
    2094:	90 93 72 00 	sts	0x0072, r25
    2098:	80 93 71 00 	sts	0x0071, r24
    209c:	5d c0       	rjmp	.+186    	; 0x2158 <vTaskIncrementTick+0x198>
    209e:	e0 91 55 03 	lds	r30, 0x0355
    20a2:	f0 91 56 03 	lds	r31, 0x0356
    20a6:	05 80       	ldd	r0, Z+5	; 0x05
    20a8:	f6 81       	ldd	r31, Z+6	; 0x06
    20aa:	e0 2d       	mov	r30, r0
    20ac:	86 81       	ldd	r24, Z+6	; 0x06
    20ae:	97 81       	ldd	r25, Z+7	; 0x07
    20b0:	9e 83       	std	Y+6, r25	; 0x06
    20b2:	8d 83       	std	Y+5, r24	; 0x05
    20b4:	ed 81       	ldd	r30, Y+5	; 0x05
    20b6:	fe 81       	ldd	r31, Y+6	; 0x06
    20b8:	82 81       	ldd	r24, Z+2	; 0x02
    20ba:	93 81       	ldd	r25, Z+3	; 0x03
    20bc:	9a 83       	std	Y+2, r25	; 0x02
    20be:	89 83       	std	Y+1, r24	; 0x01
    20c0:	20 91 0c 03 	lds	r18, 0x030C
    20c4:	30 91 0d 03 	lds	r19, 0x030D
    20c8:	89 81       	ldd	r24, Y+1	; 0x01
    20ca:	9a 81       	ldd	r25, Y+2	; 0x02
    20cc:	28 17       	cp	r18, r24
    20ce:	39 07       	cpc	r19, r25
    20d0:	38 f4       	brcc	.+14     	; 0x20e0 <vTaskIncrementTick+0x120>
    20d2:	89 81       	ldd	r24, Y+1	; 0x01
    20d4:	9a 81       	ldd	r25, Y+2	; 0x02
    20d6:	90 93 72 00 	sts	0x0072, r25
    20da:	80 93 71 00 	sts	0x0071, r24
    20de:	3c c0       	rjmp	.+120    	; 0x2158 <vTaskIncrementTick+0x198>
    20e0:	8d 81       	ldd	r24, Y+5	; 0x05
    20e2:	9e 81       	ldd	r25, Y+6	; 0x06
    20e4:	02 96       	adiw	r24, 0x02	; 2
    20e6:	0e 94 3d 05 	call	0xa7a	; 0xa7a <vListRemove>
    20ea:	ed 81       	ldd	r30, Y+5	; 0x05
    20ec:	fe 81       	ldd	r31, Y+6	; 0x06
    20ee:	84 89       	ldd	r24, Z+20	; 0x14
    20f0:	95 89       	ldd	r25, Z+21	; 0x15
    20f2:	00 97       	sbiw	r24, 0x00	; 0
    20f4:	29 f0       	breq	.+10     	; 0x2100 <vTaskIncrementTick+0x140>
    20f6:	8d 81       	ldd	r24, Y+5	; 0x05
    20f8:	9e 81       	ldd	r25, Y+6	; 0x06
    20fa:	0c 96       	adiw	r24, 0x0c	; 12
    20fc:	0e 94 3d 05 	call	0xa7a	; 0xa7a <vListRemove>
    2100:	ed 81       	ldd	r30, Y+5	; 0x05
    2102:	fe 81       	ldd	r31, Y+6	; 0x06
    2104:	96 89       	ldd	r25, Z+22	; 0x16
    2106:	80 91 0f 03 	lds	r24, 0x030F
    210a:	89 17       	cp	r24, r25
    210c:	28 f4       	brcc	.+10     	; 0x2118 <vTaskIncrementTick+0x158>
    210e:	ed 81       	ldd	r30, Y+5	; 0x05
    2110:	fe 81       	ldd	r31, Y+6	; 0x06
    2112:	86 89       	ldd	r24, Z+22	; 0x16
    2114:	80 93 0f 03 	sts	0x030F, r24
    2118:	ed 81       	ldd	r30, Y+5	; 0x05
    211a:	fe 81       	ldd	r31, Y+6	; 0x06
    211c:	86 89       	ldd	r24, Z+22	; 0x16
    211e:	28 2f       	mov	r18, r24
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	c9 01       	movw	r24, r18
    2124:	88 0f       	add	r24, r24
    2126:	99 1f       	adc	r25, r25
    2128:	88 0f       	add	r24, r24
    212a:	99 1f       	adc	r25, r25
    212c:	88 0f       	add	r24, r24
    212e:	99 1f       	adc	r25, r25
    2130:	82 0f       	add	r24, r18
    2132:	93 1f       	adc	r25, r19
    2134:	ac 01       	movw	r20, r24
    2136:	4a 5e       	subi	r20, 0xEA	; 234
    2138:	5c 4f       	sbci	r21, 0xFC	; 252
    213a:	8d 81       	ldd	r24, Y+5	; 0x05
    213c:	9e 81       	ldd	r25, Y+6	; 0x06
    213e:	9c 01       	movw	r18, r24
    2140:	2e 5f       	subi	r18, 0xFE	; 254
    2142:	3f 4f       	sbci	r19, 0xFF	; 255
    2144:	ca 01       	movw	r24, r20
    2146:	b9 01       	movw	r22, r18
    2148:	0e 94 85 04 	call	0x90a	; 0x90a <vListInsertEnd>
    214c:	9a cf       	rjmp	.-204    	; 0x2082 <vTaskIncrementTick+0xc2>
	}
	else
	{
		++uxMissedTicks;
    214e:	80 91 12 03 	lds	r24, 0x0312
    2152:	8f 5f       	subi	r24, 0xFF	; 255
    2154:	80 93 12 03 	sts	0x0312, r24
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    2158:	26 96       	adiw	r28, 0x06	; 6
    215a:	0f b6       	in	r0, 0x3f	; 63
    215c:	f8 94       	cli
    215e:	de bf       	out	0x3e, r29	; 62
    2160:	0f be       	out	0x3f, r0	; 63
    2162:	cd bf       	out	0x3d, r28	; 61
    2164:	cf 91       	pop	r28
    2166:	df 91       	pop	r29
    2168:	08 95       	ret

0000216a <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    216a:	df 93       	push	r29
    216c:	cf 93       	push	r28
    216e:	00 d0       	rcall	.+0      	; 0x2170 <vTaskSwitchContext+0x6>
    2170:	cd b7       	in	r28, 0x3d	; 61
    2172:	de b7       	in	r29, 0x3e	; 62
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    2174:	80 91 11 03 	lds	r24, 0x0311
    2178:	88 23       	and	r24, r24
    217a:	49 f0       	breq	.+18     	; 0x218e <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	80 93 13 03 	sts	0x0313, r24
    2182:	54 c0       	rjmp	.+168    	; 0x222c <vTaskSwitchContext+0xc2>
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    2184:	80 91 0f 03 	lds	r24, 0x030F
    2188:	81 50       	subi	r24, 0x01	; 1
    218a:	80 93 0f 03 	sts	0x030F, r24
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    218e:	80 91 0f 03 	lds	r24, 0x030F
    2192:	28 2f       	mov	r18, r24
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	c9 01       	movw	r24, r18
    2198:	88 0f       	add	r24, r24
    219a:	99 1f       	adc	r25, r25
    219c:	88 0f       	add	r24, r24
    219e:	99 1f       	adc	r25, r25
    21a0:	88 0f       	add	r24, r24
    21a2:	99 1f       	adc	r25, r25
    21a4:	82 0f       	add	r24, r18
    21a6:	93 1f       	adc	r25, r19
    21a8:	fc 01       	movw	r30, r24
    21aa:	ea 5e       	subi	r30, 0xEA	; 234
    21ac:	fc 4f       	sbci	r31, 0xFC	; 252
    21ae:	80 81       	ld	r24, Z
    21b0:	88 23       	and	r24, r24
    21b2:	41 f3       	breq	.-48     	; 0x2184 <vTaskSwitchContext+0x1a>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    21b4:	80 91 0f 03 	lds	r24, 0x030F
    21b8:	28 2f       	mov	r18, r24
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	c9 01       	movw	r24, r18
    21be:	88 0f       	add	r24, r24
    21c0:	99 1f       	adc	r25, r25
    21c2:	88 0f       	add	r24, r24
    21c4:	99 1f       	adc	r25, r25
    21c6:	88 0f       	add	r24, r24
    21c8:	99 1f       	adc	r25, r25
    21ca:	82 0f       	add	r24, r18
    21cc:	93 1f       	adc	r25, r19
    21ce:	8a 5e       	subi	r24, 0xEA	; 234
    21d0:	9c 4f       	sbci	r25, 0xFC	; 252
    21d2:	9a 83       	std	Y+2, r25	; 0x02
    21d4:	89 83       	std	Y+1, r24	; 0x01
    21d6:	e9 81       	ldd	r30, Y+1	; 0x01
    21d8:	fa 81       	ldd	r31, Y+2	; 0x02
    21da:	01 80       	ldd	r0, Z+1	; 0x01
    21dc:	f2 81       	ldd	r31, Z+2	; 0x02
    21de:	e0 2d       	mov	r30, r0
    21e0:	82 81       	ldd	r24, Z+2	; 0x02
    21e2:	93 81       	ldd	r25, Z+3	; 0x03
    21e4:	e9 81       	ldd	r30, Y+1	; 0x01
    21e6:	fa 81       	ldd	r31, Y+2	; 0x02
    21e8:	92 83       	std	Z+2, r25	; 0x02
    21ea:	81 83       	std	Z+1, r24	; 0x01
    21ec:	e9 81       	ldd	r30, Y+1	; 0x01
    21ee:	fa 81       	ldd	r31, Y+2	; 0x02
    21f0:	21 81       	ldd	r18, Z+1	; 0x01
    21f2:	32 81       	ldd	r19, Z+2	; 0x02
    21f4:	89 81       	ldd	r24, Y+1	; 0x01
    21f6:	9a 81       	ldd	r25, Y+2	; 0x02
    21f8:	03 96       	adiw	r24, 0x03	; 3
    21fa:	28 17       	cp	r18, r24
    21fc:	39 07       	cpc	r19, r25
    21fe:	59 f4       	brne	.+22     	; 0x2216 <vTaskSwitchContext+0xac>
    2200:	e9 81       	ldd	r30, Y+1	; 0x01
    2202:	fa 81       	ldd	r31, Y+2	; 0x02
    2204:	01 80       	ldd	r0, Z+1	; 0x01
    2206:	f2 81       	ldd	r31, Z+2	; 0x02
    2208:	e0 2d       	mov	r30, r0
    220a:	82 81       	ldd	r24, Z+2	; 0x02
    220c:	93 81       	ldd	r25, Z+3	; 0x03
    220e:	e9 81       	ldd	r30, Y+1	; 0x01
    2210:	fa 81       	ldd	r31, Y+2	; 0x02
    2212:	92 83       	std	Z+2, r25	; 0x02
    2214:	81 83       	std	Z+1, r24	; 0x01
    2216:	e9 81       	ldd	r30, Y+1	; 0x01
    2218:	fa 81       	ldd	r31, Y+2	; 0x02
    221a:	01 80       	ldd	r0, Z+1	; 0x01
    221c:	f2 81       	ldd	r31, Z+2	; 0x02
    221e:	e0 2d       	mov	r30, r0
    2220:	86 81       	ldd	r24, Z+6	; 0x06
    2222:	97 81       	ldd	r25, Z+7	; 0x07
    2224:	90 93 09 03 	sts	0x0309, r25
    2228:	80 93 08 03 	sts	0x0308, r24
	
		traceTASK_SWITCHED_IN();
		vWriteTraceToBuffer();
	}
}
    222c:	0f 90       	pop	r0
    222e:	0f 90       	pop	r0
    2230:	cf 91       	pop	r28
    2232:	df 91       	pop	r29
    2234:	08 95       	ret

00002236 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    2236:	df 93       	push	r29
    2238:	cf 93       	push	r28
    223a:	00 d0       	rcall	.+0      	; 0x223c <vTaskPlaceOnEventList+0x6>
    223c:	00 d0       	rcall	.+0      	; 0x223e <vTaskPlaceOnEventList+0x8>
    223e:	00 d0       	rcall	.+0      	; 0x2240 <vTaskPlaceOnEventList+0xa>
    2240:	cd b7       	in	r28, 0x3d	; 61
    2242:	de b7       	in	r29, 0x3e	; 62
    2244:	9c 83       	std	Y+4, r25	; 0x04
    2246:	8b 83       	std	Y+3, r24	; 0x03
    2248:	7e 83       	std	Y+6, r23	; 0x06
    224a:	6d 83       	std	Y+5, r22	; 0x05
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    224c:	4b 81       	ldd	r20, Y+3	; 0x03
    224e:	5c 81       	ldd	r21, Y+4	; 0x04
    2250:	80 91 08 03 	lds	r24, 0x0308
    2254:	90 91 09 03 	lds	r25, 0x0309
    2258:	9c 01       	movw	r18, r24
    225a:	24 5f       	subi	r18, 0xF4	; 244
    225c:	3f 4f       	sbci	r19, 0xFF	; 255
    225e:	ca 01       	movw	r24, r20
    2260:	b9 01       	movw	r22, r18
    2262:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    2266:	80 91 08 03 	lds	r24, 0x0308
    226a:	90 91 09 03 	lds	r25, 0x0309
    226e:	02 96       	adiw	r24, 0x02	; 2
    2270:	0e 94 3d 05 	call	0xa7a	; 0xa7a <vListRemove>
	}
	#else
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    2274:	20 91 0c 03 	lds	r18, 0x030C
    2278:	30 91 0d 03 	lds	r19, 0x030D
    227c:	8d 81       	ldd	r24, Y+5	; 0x05
    227e:	9e 81       	ldd	r25, Y+6	; 0x06
    2280:	82 0f       	add	r24, r18
    2282:	93 1f       	adc	r25, r19
    2284:	9a 83       	std	Y+2, r25	; 0x02
    2286:	89 83       	std	Y+1, r24	; 0x01
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    2288:	89 81       	ldd	r24, Y+1	; 0x01
    228a:	9a 81       	ldd	r25, Y+2	; 0x02
    228c:	0e 94 15 13 	call	0x262a	; 0x262a <prvAddCurrentTaskToDelayedList>
	}
	#endif
}
    2290:	26 96       	adiw	r28, 0x06	; 6
    2292:	0f b6       	in	r0, 0x3f	; 63
    2294:	f8 94       	cli
    2296:	de bf       	out	0x3e, r29	; 62
    2298:	0f be       	out	0x3f, r0	; 63
    229a:	cd bf       	out	0x3d, r28	; 61
    229c:	cf 91       	pop	r28
    229e:	df 91       	pop	r29
    22a0:	08 95       	ret

000022a2 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    22a2:	df 93       	push	r29
    22a4:	cf 93       	push	r28
    22a6:	00 d0       	rcall	.+0      	; 0x22a8 <xTaskRemoveFromEventList+0x6>
    22a8:	00 d0       	rcall	.+0      	; 0x22aa <xTaskRemoveFromEventList+0x8>
    22aa:	0f 92       	push	r0
    22ac:	cd b7       	in	r28, 0x3d	; 61
    22ae:	de b7       	in	r29, 0x3e	; 62
    22b0:	9d 83       	std	Y+5, r25	; 0x05
    22b2:	8c 83       	std	Y+4, r24	; 0x04
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    22b4:	ec 81       	ldd	r30, Y+4	; 0x04
    22b6:	fd 81       	ldd	r31, Y+5	; 0x05
    22b8:	05 80       	ldd	r0, Z+5	; 0x05
    22ba:	f6 81       	ldd	r31, Z+6	; 0x06
    22bc:	e0 2d       	mov	r30, r0
    22be:	86 81       	ldd	r24, Z+6	; 0x06
    22c0:	97 81       	ldd	r25, Z+7	; 0x07
    22c2:	9b 83       	std	Y+3, r25	; 0x03
    22c4:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    22c6:	8a 81       	ldd	r24, Y+2	; 0x02
    22c8:	9b 81       	ldd	r25, Y+3	; 0x03
    22ca:	0c 96       	adiw	r24, 0x0c	; 12
    22cc:	0e 94 3d 05 	call	0xa7a	; 0xa7a <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    22d0:	80 91 11 03 	lds	r24, 0x0311
    22d4:	88 23       	and	r24, r24
    22d6:	61 f5       	brne	.+88     	; 0x2330 <xTaskRemoveFromEventList+0x8e>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    22d8:	8a 81       	ldd	r24, Y+2	; 0x02
    22da:	9b 81       	ldd	r25, Y+3	; 0x03
    22dc:	02 96       	adiw	r24, 0x02	; 2
    22de:	0e 94 3d 05 	call	0xa7a	; 0xa7a <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    22e2:	ea 81       	ldd	r30, Y+2	; 0x02
    22e4:	fb 81       	ldd	r31, Y+3	; 0x03
    22e6:	96 89       	ldd	r25, Z+22	; 0x16
    22e8:	80 91 0f 03 	lds	r24, 0x030F
    22ec:	89 17       	cp	r24, r25
    22ee:	28 f4       	brcc	.+10     	; 0x22fa <xTaskRemoveFromEventList+0x58>
    22f0:	ea 81       	ldd	r30, Y+2	; 0x02
    22f2:	fb 81       	ldd	r31, Y+3	; 0x03
    22f4:	86 89       	ldd	r24, Z+22	; 0x16
    22f6:	80 93 0f 03 	sts	0x030F, r24
    22fa:	ea 81       	ldd	r30, Y+2	; 0x02
    22fc:	fb 81       	ldd	r31, Y+3	; 0x03
    22fe:	86 89       	ldd	r24, Z+22	; 0x16
    2300:	28 2f       	mov	r18, r24
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	c9 01       	movw	r24, r18
    2306:	88 0f       	add	r24, r24
    2308:	99 1f       	adc	r25, r25
    230a:	88 0f       	add	r24, r24
    230c:	99 1f       	adc	r25, r25
    230e:	88 0f       	add	r24, r24
    2310:	99 1f       	adc	r25, r25
    2312:	82 0f       	add	r24, r18
    2314:	93 1f       	adc	r25, r19
    2316:	ac 01       	movw	r20, r24
    2318:	4a 5e       	subi	r20, 0xEA	; 234
    231a:	5c 4f       	sbci	r21, 0xFC	; 252
    231c:	8a 81       	ldd	r24, Y+2	; 0x02
    231e:	9b 81       	ldd	r25, Y+3	; 0x03
    2320:	9c 01       	movw	r18, r24
    2322:	2e 5f       	subi	r18, 0xFE	; 254
    2324:	3f 4f       	sbci	r19, 0xFF	; 255
    2326:	ca 01       	movw	r24, r20
    2328:	b9 01       	movw	r22, r18
    232a:	0e 94 85 04 	call	0x90a	; 0x90a <vListInsertEnd>
    232e:	0a c0       	rjmp	.+20     	; 0x2344 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    2330:	8a 81       	ldd	r24, Y+2	; 0x02
    2332:	9b 81       	ldd	r25, Y+3	; 0x03
    2334:	9c 01       	movw	r18, r24
    2336:	24 5f       	subi	r18, 0xF4	; 244
    2338:	3f 4f       	sbci	r19, 0xFF	; 255
    233a:	89 e5       	ldi	r24, 0x59	; 89
    233c:	93 e0       	ldi	r25, 0x03	; 3
    233e:	b9 01       	movw	r22, r18
    2340:	0e 94 85 04 	call	0x90a	; 0x90a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    2344:	ea 81       	ldd	r30, Y+2	; 0x02
    2346:	fb 81       	ldd	r31, Y+3	; 0x03
    2348:	96 89       	ldd	r25, Z+22	; 0x16
    234a:	e0 91 08 03 	lds	r30, 0x0308
    234e:	f0 91 09 03 	lds	r31, 0x0309
    2352:	86 89       	ldd	r24, Z+22	; 0x16
    2354:	98 17       	cp	r25, r24
    2356:	18 f0       	brcs	.+6      	; 0x235e <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    2358:	81 e0       	ldi	r24, 0x01	; 1
    235a:	89 83       	std	Y+1, r24	; 0x01
    235c:	01 c0       	rjmp	.+2      	; 0x2360 <xTaskRemoveFromEventList+0xbe>
	}
	else
	{
		xReturn = pdFALSE;
    235e:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    2360:	89 81       	ldd	r24, Y+1	; 0x01
}
    2362:	0f 90       	pop	r0
    2364:	0f 90       	pop	r0
    2366:	0f 90       	pop	r0
    2368:	0f 90       	pop	r0
    236a:	0f 90       	pop	r0
    236c:	cf 91       	pop	r28
    236e:	df 91       	pop	r29
    2370:	08 95       	ret

00002372 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    2372:	df 93       	push	r29
    2374:	cf 93       	push	r28
    2376:	00 d0       	rcall	.+0      	; 0x2378 <vTaskSetTimeOutState+0x6>
    2378:	cd b7       	in	r28, 0x3d	; 61
    237a:	de b7       	in	r29, 0x3e	; 62
    237c:	9a 83       	std	Y+2, r25	; 0x02
    237e:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    2380:	80 91 14 03 	lds	r24, 0x0314
    2384:	e9 81       	ldd	r30, Y+1	; 0x01
    2386:	fa 81       	ldd	r31, Y+2	; 0x02
    2388:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    238a:	80 91 0c 03 	lds	r24, 0x030C
    238e:	90 91 0d 03 	lds	r25, 0x030D
    2392:	e9 81       	ldd	r30, Y+1	; 0x01
    2394:	fa 81       	ldd	r31, Y+2	; 0x02
    2396:	92 83       	std	Z+2, r25	; 0x02
    2398:	81 83       	std	Z+1, r24	; 0x01
}
    239a:	0f 90       	pop	r0
    239c:	0f 90       	pop	r0
    239e:	cf 91       	pop	r28
    23a0:	df 91       	pop	r29
    23a2:	08 95       	ret

000023a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    23a4:	df 93       	push	r29
    23a6:	cf 93       	push	r28
    23a8:	00 d0       	rcall	.+0      	; 0x23aa <xTaskCheckForTimeOut+0x6>
    23aa:	00 d0       	rcall	.+0      	; 0x23ac <xTaskCheckForTimeOut+0x8>
    23ac:	0f 92       	push	r0
    23ae:	cd b7       	in	r28, 0x3d	; 61
    23b0:	de b7       	in	r29, 0x3e	; 62
    23b2:	9b 83       	std	Y+3, r25	; 0x03
    23b4:	8a 83       	std	Y+2, r24	; 0x02
    23b6:	7d 83       	std	Y+5, r23	; 0x05
    23b8:	6c 83       	std	Y+4, r22	; 0x04
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    23ba:	0f b6       	in	r0, 0x3f	; 63
    23bc:	f8 94       	cli
    23be:	0f 92       	push	r0
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    23c0:	ea 81       	ldd	r30, Y+2	; 0x02
    23c2:	fb 81       	ldd	r31, Y+3	; 0x03
    23c4:	90 81       	ld	r25, Z
    23c6:	80 91 14 03 	lds	r24, 0x0314
    23ca:	98 17       	cp	r25, r24
    23cc:	71 f0       	breq	.+28     	; 0x23ea <xTaskCheckForTimeOut+0x46>
    23ce:	ea 81       	ldd	r30, Y+2	; 0x02
    23d0:	fb 81       	ldd	r31, Y+3	; 0x03
    23d2:	21 81       	ldd	r18, Z+1	; 0x01
    23d4:	32 81       	ldd	r19, Z+2	; 0x02
    23d6:	80 91 0c 03 	lds	r24, 0x030C
    23da:	90 91 0d 03 	lds	r25, 0x030D
    23de:	82 17       	cp	r24, r18
    23e0:	93 07       	cpc	r25, r19
    23e2:	18 f0       	brcs	.+6      	; 0x23ea <xTaskCheckForTimeOut+0x46>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    23e4:	81 e0       	ldi	r24, 0x01	; 1
    23e6:	89 83       	std	Y+1, r24	; 0x01
    23e8:	2f c0       	rjmp	.+94     	; 0x2448 <xTaskCheckForTimeOut+0xa4>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    23ea:	20 91 0c 03 	lds	r18, 0x030C
    23ee:	30 91 0d 03 	lds	r19, 0x030D
    23f2:	ea 81       	ldd	r30, Y+2	; 0x02
    23f4:	fb 81       	ldd	r31, Y+3	; 0x03
    23f6:	81 81       	ldd	r24, Z+1	; 0x01
    23f8:	92 81       	ldd	r25, Z+2	; 0x02
    23fa:	28 1b       	sub	r18, r24
    23fc:	39 0b       	sbc	r19, r25
    23fe:	ec 81       	ldd	r30, Y+4	; 0x04
    2400:	fd 81       	ldd	r31, Y+5	; 0x05
    2402:	80 81       	ld	r24, Z
    2404:	91 81       	ldd	r25, Z+1	; 0x01
    2406:	28 17       	cp	r18, r24
    2408:	39 07       	cpc	r19, r25
    240a:	e0 f4       	brcc	.+56     	; 0x2444 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    240c:	ec 81       	ldd	r30, Y+4	; 0x04
    240e:	fd 81       	ldd	r31, Y+5	; 0x05
    2410:	40 81       	ld	r20, Z
    2412:	51 81       	ldd	r21, Z+1	; 0x01
    2414:	ea 81       	ldd	r30, Y+2	; 0x02
    2416:	fb 81       	ldd	r31, Y+3	; 0x03
    2418:	21 81       	ldd	r18, Z+1	; 0x01
    241a:	32 81       	ldd	r19, Z+2	; 0x02
    241c:	80 91 0c 03 	lds	r24, 0x030C
    2420:	90 91 0d 03 	lds	r25, 0x030D
    2424:	b9 01       	movw	r22, r18
    2426:	68 1b       	sub	r22, r24
    2428:	79 0b       	sbc	r23, r25
    242a:	cb 01       	movw	r24, r22
    242c:	84 0f       	add	r24, r20
    242e:	95 1f       	adc	r25, r21
    2430:	ec 81       	ldd	r30, Y+4	; 0x04
    2432:	fd 81       	ldd	r31, Y+5	; 0x05
    2434:	91 83       	std	Z+1, r25	; 0x01
    2436:	80 83       	st	Z, r24
			vTaskSetTimeOutState( pxTimeOut );
    2438:	8a 81       	ldd	r24, Y+2	; 0x02
    243a:	9b 81       	ldd	r25, Y+3	; 0x03
    243c:	0e 94 b9 11 	call	0x2372	; 0x2372 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    2440:	19 82       	std	Y+1, r1	; 0x01
    2442:	02 c0       	rjmp	.+4      	; 0x2448 <xTaskCheckForTimeOut+0xa4>
		}
		else
		{
			xReturn = pdTRUE;
    2444:	81 e0       	ldi	r24, 0x01	; 1
    2446:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    2448:	0f 90       	pop	r0
    244a:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    244c:	89 81       	ldd	r24, Y+1	; 0x01
}
    244e:	0f 90       	pop	r0
    2450:	0f 90       	pop	r0
    2452:	0f 90       	pop	r0
    2454:	0f 90       	pop	r0
    2456:	0f 90       	pop	r0
    2458:	cf 91       	pop	r28
    245a:	df 91       	pop	r29
    245c:	08 95       	ret

0000245e <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    245e:	df 93       	push	r29
    2460:	cf 93       	push	r28
    2462:	cd b7       	in	r28, 0x3d	; 61
    2464:	de b7       	in	r29, 0x3e	; 62
	xMissedYield = pdTRUE;
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	80 93 13 03 	sts	0x0313, r24
}
    246c:	cf 91       	pop	r28
    246e:	df 91       	pop	r29
    2470:	08 95       	ret

00002472 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    2472:	df 93       	push	r29
    2474:	cf 93       	push	r28
    2476:	00 d0       	rcall	.+0      	; 0x2478 <prvIdleTask+0x6>
    2478:	cd b7       	in	r28, 0x3d	; 61
    247a:	de b7       	in	r29, 0x3e	; 62
    247c:	9a 83       	std	Y+2, r25	; 0x02
    247e:	89 83       	std	Y+1, r24	; 0x01
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    2480:	0e 94 d7 12 	call	0x25ae	; 0x25ae <prvCheckTasksWaitingTermination>
    2484:	fd cf       	rjmp	.-6      	; 0x2480 <prvIdleTask+0xe>

00002486 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    2486:	0f 93       	push	r16
    2488:	1f 93       	push	r17
    248a:	df 93       	push	r29
    248c:	cf 93       	push	r28
    248e:	cd b7       	in	r28, 0x3d	; 61
    2490:	de b7       	in	r29, 0x3e	; 62
    2492:	29 97       	sbiw	r28, 0x09	; 9
    2494:	0f b6       	in	r0, 0x3f	; 63
    2496:	f8 94       	cli
    2498:	de bf       	out	0x3e, r29	; 62
    249a:	0f be       	out	0x3f, r0	; 63
    249c:	cd bf       	out	0x3d, r28	; 61
    249e:	9a 83       	std	Y+2, r25	; 0x02
    24a0:	89 83       	std	Y+1, r24	; 0x01
    24a2:	7c 83       	std	Y+4, r23	; 0x04
    24a4:	6b 83       	std	Y+3, r22	; 0x03
    24a6:	4d 83       	std	Y+5, r20	; 0x05
    24a8:	3f 83       	std	Y+7, r19	; 0x07
    24aa:	2e 83       	std	Y+6, r18	; 0x06
    24ac:	19 87       	std	Y+9, r17	; 0x09
    24ae:	08 87       	std	Y+8, r16	; 0x08
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    24b0:	89 81       	ldd	r24, Y+1	; 0x01
    24b2:	9a 81       	ldd	r25, Y+2	; 0x02
    24b4:	49 96       	adiw	r24, 0x19	; 25
    24b6:	2b 81       	ldd	r18, Y+3	; 0x03
    24b8:	3c 81       	ldd	r19, Y+4	; 0x04
    24ba:	b9 01       	movw	r22, r18
    24bc:	48 e0       	ldi	r20, 0x08	; 8
    24be:	50 e0       	ldi	r21, 0x00	; 0
    24c0:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    24c4:	e9 81       	ldd	r30, Y+1	; 0x01
    24c6:	fa 81       	ldd	r31, Y+2	; 0x02
    24c8:	10 a2       	std	Z+32, r1	; 0x20

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    24ca:	8d 81       	ldd	r24, Y+5	; 0x05
    24cc:	85 30       	cpi	r24, 0x05	; 5
    24ce:	10 f0       	brcs	.+4      	; 0x24d4 <prvInitialiseTCBVariables+0x4e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    24d0:	84 e0       	ldi	r24, 0x04	; 4
    24d2:	8d 83       	std	Y+5, r24	; 0x05
	}

	pxTCB->uxPriority = uxPriority;
    24d4:	e9 81       	ldd	r30, Y+1	; 0x01
    24d6:	fa 81       	ldd	r31, Y+2	; 0x02
    24d8:	8d 81       	ldd	r24, Y+5	; 0x05
    24da:	86 8b       	std	Z+22, r24	; 0x16
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    24dc:	89 81       	ldd	r24, Y+1	; 0x01
    24de:	9a 81       	ldd	r25, Y+2	; 0x02
    24e0:	02 96       	adiw	r24, 0x02	; 2
    24e2:	0e 94 75 04 	call	0x8ea	; 0x8ea <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    24e6:	89 81       	ldd	r24, Y+1	; 0x01
    24e8:	9a 81       	ldd	r25, Y+2	; 0x02
    24ea:	0c 96       	adiw	r24, 0x0c	; 12
    24ec:	0e 94 75 04 	call	0x8ea	; 0x8ea <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    24f0:	e9 81       	ldd	r30, Y+1	; 0x01
    24f2:	fa 81       	ldd	r31, Y+2	; 0x02
    24f4:	89 81       	ldd	r24, Y+1	; 0x01
    24f6:	9a 81       	ldd	r25, Y+2	; 0x02
    24f8:	91 87       	std	Z+9, r25	; 0x09
    24fa:	80 87       	std	Z+8, r24	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    24fc:	8d 81       	ldd	r24, Y+5	; 0x05
    24fe:	28 2f       	mov	r18, r24
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	85 e0       	ldi	r24, 0x05	; 5
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	82 1b       	sub	r24, r18
    2508:	93 0b       	sbc	r25, r19
    250a:	e9 81       	ldd	r30, Y+1	; 0x01
    250c:	fa 81       	ldd	r31, Y+2	; 0x02
    250e:	95 87       	std	Z+13, r25	; 0x0d
    2510:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    2512:	e9 81       	ldd	r30, Y+1	; 0x01
    2514:	fa 81       	ldd	r31, Y+2	; 0x02
    2516:	89 81       	ldd	r24, Y+1	; 0x01
    2518:	9a 81       	ldd	r25, Y+2	; 0x02
    251a:	93 8b       	std	Z+19, r25	; 0x13
    251c:	82 8b       	std	Z+18, r24	; 0x12
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    251e:	29 96       	adiw	r28, 0x09	; 9
    2520:	0f b6       	in	r0, 0x3f	; 63
    2522:	f8 94       	cli
    2524:	de bf       	out	0x3e, r29	; 62
    2526:	0f be       	out	0x3f, r0	; 63
    2528:	cd bf       	out	0x3d, r28	; 61
    252a:	cf 91       	pop	r28
    252c:	df 91       	pop	r29
    252e:	1f 91       	pop	r17
    2530:	0f 91       	pop	r16
    2532:	08 95       	ret

00002534 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    2534:	df 93       	push	r29
    2536:	cf 93       	push	r28
    2538:	0f 92       	push	r0
    253a:	cd b7       	in	r28, 0x3d	; 61
    253c:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    253e:	19 82       	std	Y+1, r1	; 0x01
    2540:	13 c0       	rjmp	.+38     	; 0x2568 <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    2542:	89 81       	ldd	r24, Y+1	; 0x01
    2544:	28 2f       	mov	r18, r24
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	c9 01       	movw	r24, r18
    254a:	88 0f       	add	r24, r24
    254c:	99 1f       	adc	r25, r25
    254e:	88 0f       	add	r24, r24
    2550:	99 1f       	adc	r25, r25
    2552:	88 0f       	add	r24, r24
    2554:	99 1f       	adc	r25, r25
    2556:	82 0f       	add	r24, r18
    2558:	93 1f       	adc	r25, r19
    255a:	8a 5e       	subi	r24, 0xEA	; 234
    255c:	9c 4f       	sbci	r25, 0xFC	; 252
    255e:	0e 94 4b 04 	call	0x896	; 0x896 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    2562:	89 81       	ldd	r24, Y+1	; 0x01
    2564:	8f 5f       	subi	r24, 0xFF	; 255
    2566:	89 83       	std	Y+1, r24	; 0x01
    2568:	89 81       	ldd	r24, Y+1	; 0x01
    256a:	85 30       	cpi	r24, 0x05	; 5
    256c:	50 f3       	brcs	.-44     	; 0x2542 <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    256e:	83 e4       	ldi	r24, 0x43	; 67
    2570:	93 e0       	ldi	r25, 0x03	; 3
    2572:	0e 94 4b 04 	call	0x896	; 0x896 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    2576:	8c e4       	ldi	r24, 0x4C	; 76
    2578:	93 e0       	ldi	r25, 0x03	; 3
    257a:	0e 94 4b 04 	call	0x896	; 0x896 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    257e:	89 e5       	ldi	r24, 0x59	; 89
    2580:	93 e0       	ldi	r25, 0x03	; 3
    2582:	0e 94 4b 04 	call	0x896	; 0x896 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    2586:	82 e6       	ldi	r24, 0x62	; 98
    2588:	93 e0       	ldi	r25, 0x03	; 3
    258a:	0e 94 4b 04 	call	0x896	; 0x896 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    258e:	83 e4       	ldi	r24, 0x43	; 67
    2590:	93 e0       	ldi	r25, 0x03	; 3
    2592:	90 93 56 03 	sts	0x0356, r25
    2596:	80 93 55 03 	sts	0x0355, r24
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    259a:	8c e4       	ldi	r24, 0x4C	; 76
    259c:	93 e0       	ldi	r25, 0x03	; 3
    259e:	90 93 58 03 	sts	0x0358, r25
    25a2:	80 93 57 03 	sts	0x0357, r24
}
    25a6:	0f 90       	pop	r0
    25a8:	cf 91       	pop	r28
    25aa:	df 91       	pop	r29
    25ac:	08 95       	ret

000025ae <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    25ae:	df 93       	push	r29
    25b0:	cf 93       	push	r28
    25b2:	00 d0       	rcall	.+0      	; 0x25b4 <prvCheckTasksWaitingTermination+0x6>
    25b4:	0f 92       	push	r0
    25b6:	cd b7       	in	r28, 0x3d	; 61
    25b8:	de b7       	in	r29, 0x3e	; 62
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    25ba:	80 91 0a 03 	lds	r24, 0x030A
    25be:	88 23       	and	r24, r24
    25c0:	71 f1       	breq	.+92     	; 0x261e <prvCheckTasksWaitingTermination+0x70>
		{
			vTaskSuspendAll();
    25c2:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    25c6:	80 91 62 03 	lds	r24, 0x0362
    25ca:	1b 82       	std	Y+3, r1	; 0x03
    25cc:	88 23       	and	r24, r24
    25ce:	11 f4       	brne	.+4      	; 0x25d4 <prvCheckTasksWaitingTermination+0x26>
    25d0:	81 e0       	ldi	r24, 0x01	; 1
    25d2:	8b 83       	std	Y+3, r24	; 0x03
			xTaskResumeAll();
    25d4:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    25d8:	8b 81       	ldd	r24, Y+3	; 0x03
    25da:	88 23       	and	r24, r24
    25dc:	01 f5       	brne	.+64     	; 0x261e <prvCheckTasksWaitingTermination+0x70>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    25de:	0f b6       	in	r0, 0x3f	; 63
    25e0:	f8 94       	cli
    25e2:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    25e4:	e0 91 67 03 	lds	r30, 0x0367
    25e8:	f0 91 68 03 	lds	r31, 0x0368
    25ec:	86 81       	ldd	r24, Z+6	; 0x06
    25ee:	97 81       	ldd	r25, Z+7	; 0x07
    25f0:	9a 83       	std	Y+2, r25	; 0x02
    25f2:	89 83       	std	Y+1, r24	; 0x01
					vListRemove( &( pxTCB->xGenericListItem ) );
    25f4:	89 81       	ldd	r24, Y+1	; 0x01
    25f6:	9a 81       	ldd	r25, Y+2	; 0x02
    25f8:	02 96       	adiw	r24, 0x02	; 2
    25fa:	0e 94 3d 05 	call	0xa7a	; 0xa7a <vListRemove>
					--uxCurrentNumberOfTasks;
    25fe:	80 91 0b 03 	lds	r24, 0x030B
    2602:	81 50       	subi	r24, 0x01	; 1
    2604:	80 93 0b 03 	sts	0x030B, r24
					--uxTasksDeleted;
    2608:	80 91 0a 03 	lds	r24, 0x030A
    260c:	81 50       	subi	r24, 0x01	; 1
    260e:	80 93 0a 03 	sts	0x030A, r24
				}
				taskEXIT_CRITICAL();
    2612:	0f 90       	pop	r0
    2614:	0f be       	out	0x3f, r0	; 63

				prvDeleteTCB( pxTCB );
    2616:	89 81       	ldd	r24, Y+1	; 0x01
    2618:	9a 81       	ldd	r25, Y+2	; 0x02
    261a:	0e 94 ae 13 	call	0x275c	; 0x275c <prvDeleteTCB>
			}
		}
	}
	#endif
}
    261e:	0f 90       	pop	r0
    2620:	0f 90       	pop	r0
    2622:	0f 90       	pop	r0
    2624:	cf 91       	pop	r28
    2626:	df 91       	pop	r29
    2628:	08 95       	ret

0000262a <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    262a:	df 93       	push	r29
    262c:	cf 93       	push	r28
    262e:	00 d0       	rcall	.+0      	; 0x2630 <prvAddCurrentTaskToDelayedList+0x6>
    2630:	cd b7       	in	r28, 0x3d	; 61
    2632:	de b7       	in	r29, 0x3e	; 62
    2634:	9a 83       	std	Y+2, r25	; 0x02
    2636:	89 83       	std	Y+1, r24	; 0x01
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    2638:	e0 91 08 03 	lds	r30, 0x0308
    263c:	f0 91 09 03 	lds	r31, 0x0309
    2640:	89 81       	ldd	r24, Y+1	; 0x01
    2642:	9a 81       	ldd	r25, Y+2	; 0x02
    2644:	93 83       	std	Z+3, r25	; 0x03
    2646:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xTickCount )
    2648:	20 91 0c 03 	lds	r18, 0x030C
    264c:	30 91 0d 03 	lds	r19, 0x030D
    2650:	89 81       	ldd	r24, Y+1	; 0x01
    2652:	9a 81       	ldd	r25, Y+2	; 0x02
    2654:	82 17       	cp	r24, r18
    2656:	93 07       	cpc	r25, r19
    2658:	70 f4       	brcc	.+28     	; 0x2676 <prvAddCurrentTaskToDelayedList+0x4c>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    265a:	80 91 57 03 	lds	r24, 0x0357
    265e:	90 91 58 03 	lds	r25, 0x0358
    2662:	20 91 08 03 	lds	r18, 0x0308
    2666:	30 91 09 03 	lds	r19, 0x0309
    266a:	2e 5f       	subi	r18, 0xFE	; 254
    266c:	3f 4f       	sbci	r19, 0xFF	; 255
    266e:	b9 01       	movw	r22, r18
    2670:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <vListInsert>
    2674:	1e c0       	rjmp	.+60     	; 0x26b2 <prvAddCurrentTaskToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    2676:	40 91 55 03 	lds	r20, 0x0355
    267a:	50 91 56 03 	lds	r21, 0x0356
    267e:	80 91 08 03 	lds	r24, 0x0308
    2682:	90 91 09 03 	lds	r25, 0x0309
    2686:	9c 01       	movw	r18, r24
    2688:	2e 5f       	subi	r18, 0xFE	; 254
    268a:	3f 4f       	sbci	r19, 0xFF	; 255
    268c:	ca 01       	movw	r24, r20
    268e:	b9 01       	movw	r22, r18
    2690:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    2694:	20 91 71 00 	lds	r18, 0x0071
    2698:	30 91 72 00 	lds	r19, 0x0072
    269c:	89 81       	ldd	r24, Y+1	; 0x01
    269e:	9a 81       	ldd	r25, Y+2	; 0x02
    26a0:	82 17       	cp	r24, r18
    26a2:	93 07       	cpc	r25, r19
    26a4:	30 f4       	brcc	.+12     	; 0x26b2 <prvAddCurrentTaskToDelayedList+0x88>
		{
			xNextTaskUnblockTime = xTimeToWake;
    26a6:	89 81       	ldd	r24, Y+1	; 0x01
    26a8:	9a 81       	ldd	r25, Y+2	; 0x02
    26aa:	90 93 72 00 	sts	0x0072, r25
    26ae:	80 93 71 00 	sts	0x0071, r24
		}
	}
}
    26b2:	0f 90       	pop	r0
    26b4:	0f 90       	pop	r0
    26b6:	cf 91       	pop	r28
    26b8:	df 91       	pop	r29
    26ba:	08 95       	ret

000026bc <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    26bc:	df 93       	push	r29
    26be:	cf 93       	push	r28
    26c0:	cd b7       	in	r28, 0x3d	; 61
    26c2:	de b7       	in	r29, 0x3e	; 62
    26c4:	28 97       	sbiw	r28, 0x08	; 8
    26c6:	0f b6       	in	r0, 0x3f	; 63
    26c8:	f8 94       	cli
    26ca:	de bf       	out	0x3e, r29	; 62
    26cc:	0f be       	out	0x3f, r0	; 63
    26ce:	cd bf       	out	0x3d, r28	; 61
    26d0:	9c 83       	std	Y+4, r25	; 0x04
    26d2:	8b 83       	std	Y+3, r24	; 0x03
    26d4:	7e 83       	std	Y+6, r23	; 0x06
    26d6:	6d 83       	std	Y+5, r22	; 0x05
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    26d8:	81 e2       	ldi	r24, 0x21	; 33
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	0e 94 df 03 	call	0x7be	; 0x7be <pvPortMalloc>
    26e0:	9a 83       	std	Y+2, r25	; 0x02
    26e2:	89 83       	std	Y+1, r24	; 0x01

	if( pxNewTCB != NULL )
    26e4:	89 81       	ldd	r24, Y+1	; 0x01
    26e6:	9a 81       	ldd	r25, Y+2	; 0x02
    26e8:	00 97       	sbiw	r24, 0x00	; 0
    26ea:	69 f1       	breq	.+90     	; 0x2746 <prvAllocateTCBAndStack+0x8a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    26ec:	8d 81       	ldd	r24, Y+5	; 0x05
    26ee:	9e 81       	ldd	r25, Y+6	; 0x06
    26f0:	00 97       	sbiw	r24, 0x00	; 0
    26f2:	39 f4       	brne	.+14     	; 0x2702 <prvAllocateTCBAndStack+0x46>
    26f4:	8b 81       	ldd	r24, Y+3	; 0x03
    26f6:	9c 81       	ldd	r25, Y+4	; 0x04
    26f8:	0e 94 df 03 	call	0x7be	; 0x7be <pvPortMalloc>
    26fc:	98 87       	std	Y+8, r25	; 0x08
    26fe:	8f 83       	std	Y+7, r24	; 0x07
    2700:	04 c0       	rjmp	.+8      	; 0x270a <prvAllocateTCBAndStack+0x4e>
    2702:	8d 81       	ldd	r24, Y+5	; 0x05
    2704:	9e 81       	ldd	r25, Y+6	; 0x06
    2706:	98 87       	std	Y+8, r25	; 0x08
    2708:	8f 83       	std	Y+7, r24	; 0x07
    270a:	e9 81       	ldd	r30, Y+1	; 0x01
    270c:	fa 81       	ldd	r31, Y+2	; 0x02
    270e:	8f 81       	ldd	r24, Y+7	; 0x07
    2710:	98 85       	ldd	r25, Y+8	; 0x08
    2712:	90 8f       	std	Z+24, r25	; 0x18
    2714:	87 8b       	std	Z+23, r24	; 0x17

		if( pxNewTCB->pxStack == NULL )
    2716:	e9 81       	ldd	r30, Y+1	; 0x01
    2718:	fa 81       	ldd	r31, Y+2	; 0x02
    271a:	87 89       	ldd	r24, Z+23	; 0x17
    271c:	90 8d       	ldd	r25, Z+24	; 0x18
    271e:	00 97       	sbiw	r24, 0x00	; 0
    2720:	39 f4       	brne	.+14     	; 0x2730 <prvAllocateTCBAndStack+0x74>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    2722:	89 81       	ldd	r24, Y+1	; 0x01
    2724:	9a 81       	ldd	r25, Y+2	; 0x02
    2726:	0e 94 25 04 	call	0x84a	; 0x84a <vPortFree>
			pxNewTCB = NULL;
    272a:	1a 82       	std	Y+2, r1	; 0x02
    272c:	19 82       	std	Y+1, r1	; 0x01
    272e:	0b c0       	rjmp	.+22     	; 0x2746 <prvAllocateTCBAndStack+0x8a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    2730:	e9 81       	ldd	r30, Y+1	; 0x01
    2732:	fa 81       	ldd	r31, Y+2	; 0x02
    2734:	87 89       	ldd	r24, Z+23	; 0x17
    2736:	90 8d       	ldd	r25, Z+24	; 0x18
    2738:	2b 81       	ldd	r18, Y+3	; 0x03
    273a:	3c 81       	ldd	r19, Y+4	; 0x04
    273c:	65 ea       	ldi	r22, 0xA5	; 165
    273e:	70 e0       	ldi	r23, 0x00	; 0
    2740:	a9 01       	movw	r20, r18
    2742:	0e 94 cd 13 	call	0x279a	; 0x279a <memset>
		}
	}

	return pxNewTCB;
    2746:	89 81       	ldd	r24, Y+1	; 0x01
    2748:	9a 81       	ldd	r25, Y+2	; 0x02
}
    274a:	28 96       	adiw	r28, 0x08	; 8
    274c:	0f b6       	in	r0, 0x3f	; 63
    274e:	f8 94       	cli
    2750:	de bf       	out	0x3e, r29	; 62
    2752:	0f be       	out	0x3f, r0	; 63
    2754:	cd bf       	out	0x3d, r28	; 61
    2756:	cf 91       	pop	r28
    2758:	df 91       	pop	r29
    275a:	08 95       	ret

0000275c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    275c:	df 93       	push	r29
    275e:	cf 93       	push	r28
    2760:	00 d0       	rcall	.+0      	; 0x2762 <prvDeleteTCB+0x6>
    2762:	cd b7       	in	r28, 0x3d	; 61
    2764:	de b7       	in	r29, 0x3e	; 62
    2766:	9a 83       	std	Y+2, r25	; 0x02
    2768:	89 83       	std	Y+1, r24	; 0x01
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    276a:	e9 81       	ldd	r30, Y+1	; 0x01
    276c:	fa 81       	ldd	r31, Y+2	; 0x02
    276e:	87 89       	ldd	r24, Z+23	; 0x17
    2770:	90 8d       	ldd	r25, Z+24	; 0x18
    2772:	0e 94 25 04 	call	0x84a	; 0x84a <vPortFree>
		vPortFree( pxTCB );
    2776:	89 81       	ldd	r24, Y+1	; 0x01
    2778:	9a 81       	ldd	r25, Y+2	; 0x02
    277a:	0e 94 25 04 	call	0x84a	; 0x84a <vPortFree>
	}
    277e:	0f 90       	pop	r0
    2780:	0f 90       	pop	r0
    2782:	cf 91       	pop	r28
    2784:	df 91       	pop	r29
    2786:	08 95       	ret

00002788 <memcpy>:
    2788:	fb 01       	movw	r30, r22
    278a:	dc 01       	movw	r26, r24
    278c:	02 c0       	rjmp	.+4      	; 0x2792 <memcpy+0xa>
    278e:	01 90       	ld	r0, Z+
    2790:	0d 92       	st	X+, r0
    2792:	41 50       	subi	r20, 0x01	; 1
    2794:	50 40       	sbci	r21, 0x00	; 0
    2796:	d8 f7       	brcc	.-10     	; 0x278e <memcpy+0x6>
    2798:	08 95       	ret

0000279a <memset>:
    279a:	dc 01       	movw	r26, r24
    279c:	01 c0       	rjmp	.+2      	; 0x27a0 <memset+0x6>
    279e:	6d 93       	st	X+, r22
    27a0:	41 50       	subi	r20, 0x01	; 1
    27a2:	50 40       	sbci	r21, 0x00	; 0
    27a4:	e0 f7       	brcc	.-8      	; 0x279e <memset+0x4>
    27a6:	08 95       	ret

000027a8 <strncpy>:
    27a8:	fb 01       	movw	r30, r22
    27aa:	dc 01       	movw	r26, r24
    27ac:	41 50       	subi	r20, 0x01	; 1
    27ae:	50 40       	sbci	r21, 0x00	; 0
    27b0:	48 f0       	brcs	.+18     	; 0x27c4 <strncpy+0x1c>
    27b2:	01 90       	ld	r0, Z+
    27b4:	0d 92       	st	X+, r0
    27b6:	00 20       	and	r0, r0
    27b8:	c9 f7       	brne	.-14     	; 0x27ac <strncpy+0x4>
    27ba:	01 c0       	rjmp	.+2      	; 0x27be <strncpy+0x16>
    27bc:	1d 92       	st	X+, r1
    27be:	41 50       	subi	r20, 0x01	; 1
    27c0:	50 40       	sbci	r21, 0x00	; 0
    27c2:	e0 f7       	brcc	.-8      	; 0x27bc <strncpy+0x14>
    27c4:	08 95       	ret

000027c6 <_exit>:
    27c6:	f8 94       	cli

000027c8 <__stop_program>:
    27c8:	ff cf       	rjmp	.-2      	; 0x27c8 <__stop_program>
