
Timer_APP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002132  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00002132  000021c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800168  00800168  000022ce  2**0
                  ALLOC
  3 .stab         0000192c  00000000  00000000  000022d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f0b  00000000  00000000  00003bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00004b07  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  00004ca7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  00004e97  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  000072a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  0000861a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  000097f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  000099b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  00009ca7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a675  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 e9 0c 	jmp	0x19d2	; 0x19d2 <__vector_10>
      2c:	0c 94 ed 0b 	jmp	0x17da	; 0x17da <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a6 37       	cpi	r26, 0x76	; 118
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e2 e3       	ldi	r30, 0x32	; 50
      78:	f1 e2       	ldi	r31, 0x21	; 33
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <main>
      8a:	0c 94 97 10 	jmp	0x212e	; 0x212e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 60 10 	jmp	0x20c0	; 0x20c0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7c 10 	jmp	0x20f8	; 0x20f8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6c 10 	jmp	0x20d8	; 0x20d8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 88 10 	jmp	0x2110	; 0x2110 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6c 10 	jmp	0x20d8	; 0x20d8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 88 10 	jmp	0x2110	; 0x2110 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 60 10 	jmp	0x20c0	; 0x20c0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7c 10 	jmp	0x20f8	; 0x20f8 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 68 10 	jmp	0x20d0	; 0x20d0 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 84 10 	jmp	0x2108	; 0x2108 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 6c 10 	jmp	0x20d8	; 0x20d8 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 88 10 	jmp	0x2110	; 0x2110 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 6c 10 	jmp	0x20d8	; 0x20d8 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 88 10 	jmp	0x2110	; 0x2110 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 6c 10 	jmp	0x20d8	; 0x20d8 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 88 10 	jmp	0x2110	; 0x2110 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 85 10 	jmp	0x210a	; 0x210a <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 70 10 	jmp	0x20e0	; 0x20e0 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 8c 10 	jmp	0x2118	; 0x2118 <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	e8 59       	subi	r30, 0x98	; 152
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <DIO_vidPortIdentification>:
u8* Global_pu8DIOPIN=0;
u8* Global_pu8DIOPORT=0;

/*Port Identification from pin number or nibbles number or ports ids*/
void DIO_vidPortIdentification(u8 Copy_u8PinNibblePortNumber)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	00 d0       	rcall	.+0      	; 0xdfe <DIO_vidPortIdentification+0x6>
     dfe:	00 d0       	rcall	.+0      	; 0xe00 <DIO_vidPortIdentification+0x8>
     e00:	cd b7       	in	r28, 0x3d	; 61
     e02:	de b7       	in	r29, 0x3e	; 62
     e04:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8DIOPortId;
	Local_u8DIOPortId=Copy_u8PinNibblePortNumber/8;
     e06:	8a 81       	ldd	r24, Y+2	; 0x02
     e08:	86 95       	lsr	r24
     e0a:	86 95       	lsr	r24
     e0c:	86 95       	lsr	r24
     e0e:	89 83       	std	Y+1, r24	; 0x01

	switch(Local_u8DIOPortId)
     e10:	89 81       	ldd	r24, Y+1	; 0x01
     e12:	28 2f       	mov	r18, r24
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	3c 83       	std	Y+4, r19	; 0x04
     e18:	2b 83       	std	Y+3, r18	; 0x03
     e1a:	8b 81       	ldd	r24, Y+3	; 0x03
     e1c:	9c 81       	ldd	r25, Y+4	; 0x04
     e1e:	81 30       	cpi	r24, 0x01	; 1
     e20:	91 05       	cpc	r25, r1
     e22:	41 f1       	breq	.+80     	; 0xe74 <DIO_vidPortIdentification+0x7c>
     e24:	2b 81       	ldd	r18, Y+3	; 0x03
     e26:	3c 81       	ldd	r19, Y+4	; 0x04
     e28:	22 30       	cpi	r18, 0x02	; 2
     e2a:	31 05       	cpc	r19, r1
     e2c:	2c f4       	brge	.+10     	; 0xe38 <DIO_vidPortIdentification+0x40>
     e2e:	8b 81       	ldd	r24, Y+3	; 0x03
     e30:	9c 81       	ldd	r25, Y+4	; 0x04
     e32:	00 97       	sbiw	r24, 0x00	; 0
     e34:	61 f0       	breq	.+24     	; 0xe4e <DIO_vidPortIdentification+0x56>
     e36:	56 c0       	rjmp	.+172    	; 0xee4 <DIO_vidPortIdentification+0xec>
     e38:	2b 81       	ldd	r18, Y+3	; 0x03
     e3a:	3c 81       	ldd	r19, Y+4	; 0x04
     e3c:	22 30       	cpi	r18, 0x02	; 2
     e3e:	31 05       	cpc	r19, r1
     e40:	61 f1       	breq	.+88     	; 0xe9a <DIO_vidPortIdentification+0xa2>
     e42:	8b 81       	ldd	r24, Y+3	; 0x03
     e44:	9c 81       	ldd	r25, Y+4	; 0x04
     e46:	83 30       	cpi	r24, 0x03	; 3
     e48:	91 05       	cpc	r25, r1
     e4a:	d1 f1       	breq	.+116    	; 0xec0 <DIO_vidPortIdentification+0xc8>
     e4c:	4b c0       	rjmp	.+150    	; 0xee4 <DIO_vidPortIdentification+0xec>
	{
		/*port A*/
		case 0 : 
		{
			Global_pu8DIODDR=(u8*)&DDRA;
     e4e:	8a e3       	ldi	r24, 0x3A	; 58
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	90 93 69 01 	sts	0x0169, r25
     e56:	80 93 68 01 	sts	0x0168, r24
			Global_pu8DIOPIN=(u8*)&PINA;
     e5a:	89 e3       	ldi	r24, 0x39	; 57
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	90 93 6b 01 	sts	0x016B, r25
     e62:	80 93 6a 01 	sts	0x016A, r24
			Global_pu8DIOPORT=(u8*)&PORTA;
     e66:	8b e3       	ldi	r24, 0x3B	; 59
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	90 93 6d 01 	sts	0x016D, r25
     e6e:	80 93 6c 01 	sts	0x016C, r24
     e72:	38 c0       	rjmp	.+112    	; 0xee4 <DIO_vidPortIdentification+0xec>

		}
		/*port B*/
		case 1 : 
		{
			Global_pu8DIODDR=(u8*)&DDRB;
     e74:	87 e3       	ldi	r24, 0x37	; 55
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	90 93 69 01 	sts	0x0169, r25
     e7c:	80 93 68 01 	sts	0x0168, r24
			Global_pu8DIOPIN=(u8*)&PINB;
     e80:	86 e3       	ldi	r24, 0x36	; 54
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	90 93 6b 01 	sts	0x016B, r25
     e88:	80 93 6a 01 	sts	0x016A, r24
			Global_pu8DIOPORT=(u8*)&PORTB;
     e8c:	88 e3       	ldi	r24, 0x38	; 56
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	90 93 6d 01 	sts	0x016D, r25
     e94:	80 93 6c 01 	sts	0x016C, r24
     e98:	25 c0       	rjmp	.+74     	; 0xee4 <DIO_vidPortIdentification+0xec>

		}
		/*port C*/
		case 2 : 
		{
			Global_pu8DIODDR=(u8*)&DDRC;
     e9a:	84 e3       	ldi	r24, 0x34	; 52
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	90 93 69 01 	sts	0x0169, r25
     ea2:	80 93 68 01 	sts	0x0168, r24
			Global_pu8DIOPIN=(u8*)&PINC;
     ea6:	83 e3       	ldi	r24, 0x33	; 51
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	90 93 6b 01 	sts	0x016B, r25
     eae:	80 93 6a 01 	sts	0x016A, r24
			Global_pu8DIOPORT=(u8*)&PORTC;
     eb2:	85 e3       	ldi	r24, 0x35	; 53
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	90 93 6d 01 	sts	0x016D, r25
     eba:	80 93 6c 01 	sts	0x016C, r24
     ebe:	12 c0       	rjmp	.+36     	; 0xee4 <DIO_vidPortIdentification+0xec>

		}
		/*port D*/
		case 3 : 
		{
			Global_pu8DIODDR=(u8*)&DDRD;
     ec0:	81 e3       	ldi	r24, 0x31	; 49
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	90 93 69 01 	sts	0x0169, r25
     ec8:	80 93 68 01 	sts	0x0168, r24
			Global_pu8DIOPIN=(u8*)&PIND;
     ecc:	80 e3       	ldi	r24, 0x30	; 48
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	90 93 6b 01 	sts	0x016B, r25
     ed4:	80 93 6a 01 	sts	0x016A, r24
			Global_pu8DIOPORT=(u8*)&PORTD;
     ed8:	82 e3       	ldi	r24, 0x32	; 50
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	90 93 6d 01 	sts	0x016D, r25
     ee0:	80 93 6c 01 	sts	0x016C, r24
		}
		/*useless*/
		default : 
		{}
	}
}
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <DIO_vidSetPinDirection>:

/*Set Pin Direction*/
void DIO_vidSetPinDirection(u8 Copy_u8PinNumber,u8 copy_u8PinDirection)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <DIO_vidSetPinDirection+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <DIO_vidSetPinDirection+0x8>
     efa:	0f 92       	push	r0
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	8a 83       	std	Y+2, r24	; 0x02
     f02:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8DIOPinNumber;
	Local_u8DIOPinNumber=Copy_u8PinNumber%8;
     f04:	8a 81       	ldd	r24, Y+2	; 0x02
     f06:	87 70       	andi	r24, 0x07	; 7
     f08:	89 83       	std	Y+1, r24	; 0x01

	/*Port Identification from pin number*/
	DIO_vidPortIdentification(Copy_u8PinNumber);
     f0a:	8a 81       	ldd	r24, Y+2	; 0x02
     f0c:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_vidPortIdentification>

	switch(copy_u8PinDirection)
     f10:	8b 81       	ldd	r24, Y+3	; 0x03
     f12:	28 2f       	mov	r18, r24
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	3d 83       	std	Y+5, r19	; 0x05
     f18:	2c 83       	std	Y+4, r18	; 0x04
     f1a:	8c 81       	ldd	r24, Y+4	; 0x04
     f1c:	9d 81       	ldd	r25, Y+5	; 0x05
     f1e:	81 30       	cpi	r24, 0x01	; 1
     f20:	91 05       	cpc	r25, r1
     f22:	19 f1       	breq	.+70     	; 0xf6a <DIO_vidSetPinDirection+0x78>
     f24:	2c 81       	ldd	r18, Y+4	; 0x04
     f26:	3d 81       	ldd	r19, Y+5	; 0x05
     f28:	22 30       	cpi	r18, 0x02	; 2
     f2a:	31 05       	cpc	r19, r1
     f2c:	09 f4       	brne	.+2      	; 0xf30 <DIO_vidSetPinDirection+0x3e>
     f2e:	4c c0       	rjmp	.+152    	; 0xfc8 <DIO_vidSetPinDirection+0xd6>
     f30:	8c 81       	ldd	r24, Y+4	; 0x04
     f32:	9d 81       	ldd	r25, Y+5	; 0x05
     f34:	00 97       	sbiw	r24, 0x00	; 0
     f36:	09 f0       	breq	.+2      	; 0xf3a <DIO_vidSetPinDirection+0x48>
     f38:	76 c0       	rjmp	.+236    	; 0x1026 <DIO_vidSetPinDirection+0x134>
	{
		/*output*/
		case OUTPUT :
		{
			SET_BIT(DDR,Local_u8DIOPinNumber);
     f3a:	a0 91 68 01 	lds	r26, 0x0168
     f3e:	b0 91 69 01 	lds	r27, 0x0169
     f42:	e0 91 68 01 	lds	r30, 0x0168
     f46:	f0 91 69 01 	lds	r31, 0x0169
     f4a:	80 81       	ld	r24, Z
     f4c:	48 2f       	mov	r20, r24
     f4e:	89 81       	ldd	r24, Y+1	; 0x01
     f50:	28 2f       	mov	r18, r24
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	02 2e       	mov	r0, r18
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <DIO_vidSetPinDirection+0x6e>
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	0a 94       	dec	r0
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <DIO_vidSetPinDirection+0x6a>
     f64:	84 2b       	or	r24, r20
     f66:	8c 93       	st	X, r24
     f68:	5e c0       	rjmp	.+188    	; 0x1026 <DIO_vidSetPinDirection+0x134>
			break;
		}
		/*input with pull up*/
		case INPUT_PULL_UP :
		{
			CLEAR_BIT(DDR,Local_u8DIOPinNumber);
     f6a:	a0 91 68 01 	lds	r26, 0x0168
     f6e:	b0 91 69 01 	lds	r27, 0x0169
     f72:	e0 91 68 01 	lds	r30, 0x0168
     f76:	f0 91 69 01 	lds	r31, 0x0169
     f7a:	80 81       	ld	r24, Z
     f7c:	48 2f       	mov	r20, r24
     f7e:	89 81       	ldd	r24, Y+1	; 0x01
     f80:	28 2f       	mov	r18, r24
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <DIO_vidSetPinDirection+0x9c>
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	2a 95       	dec	r18
     f90:	e2 f7       	brpl	.-8      	; 0xf8a <DIO_vidSetPinDirection+0x98>
     f92:	80 95       	com	r24
     f94:	84 23       	and	r24, r20
     f96:	8c 93       	st	X, r24
			SET_BIT(PORT,Local_u8DIOPinNumber);
     f98:	a0 91 6c 01 	lds	r26, 0x016C
     f9c:	b0 91 6d 01 	lds	r27, 0x016D
     fa0:	e0 91 6c 01 	lds	r30, 0x016C
     fa4:	f0 91 6d 01 	lds	r31, 0x016D
     fa8:	80 81       	ld	r24, Z
     faa:	48 2f       	mov	r20, r24
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	02 2e       	mov	r0, r18
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <DIO_vidSetPinDirection+0xcc>
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	0a 94       	dec	r0
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <DIO_vidSetPinDirection+0xc8>
     fc2:	84 2b       	or	r24, r20
     fc4:	8c 93       	st	X, r24
     fc6:	2f c0       	rjmp	.+94     	; 0x1026 <DIO_vidSetPinDirection+0x134>
			break;
		}
		/*input with high impedance*/
		case INPUT_HIGH_Z :
		{
			CLEAR_BIT(DDR,Local_u8DIOPinNumber);
     fc8:	a0 91 68 01 	lds	r26, 0x0168
     fcc:	b0 91 69 01 	lds	r27, 0x0169
     fd0:	e0 91 68 01 	lds	r30, 0x0168
     fd4:	f0 91 69 01 	lds	r31, 0x0169
     fd8:	80 81       	ld	r24, Z
     fda:	48 2f       	mov	r20, r24
     fdc:	89 81       	ldd	r24, Y+1	; 0x01
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <DIO_vidSetPinDirection+0xfa>
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	2a 95       	dec	r18
     fee:	e2 f7       	brpl	.-8      	; 0xfe8 <DIO_vidSetPinDirection+0xf6>
     ff0:	80 95       	com	r24
     ff2:	84 23       	and	r24, r20
     ff4:	8c 93       	st	X, r24
			CLEAR_BIT(PORT,Local_u8DIOPinNumber);
     ff6:	a0 91 6c 01 	lds	r26, 0x016C
     ffa:	b0 91 6d 01 	lds	r27, 0x016D
     ffe:	e0 91 6c 01 	lds	r30, 0x016C
    1002:	f0 91 6d 01 	lds	r31, 0x016D
    1006:	80 81       	ld	r24, Z
    1008:	48 2f       	mov	r20, r24
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	02 2e       	mov	r0, r18
    1016:	02 c0       	rjmp	.+4      	; 0x101c <DIO_vidSetPinDirection+0x12a>
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	0a 94       	dec	r0
    101e:	e2 f7       	brpl	.-8      	; 0x1018 <DIO_vidSetPinDirection+0x126>
    1020:	80 95       	com	r24
    1022:	84 23       	and	r24, r20
    1024:	8c 93       	st	X, r24
		}
		/*useless*/
		default : 
		{}
	}
}
    1026:	0f 90       	pop	r0
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	cf 91       	pop	r28
    1032:	df 91       	pop	r29
    1034:	08 95       	ret

00001036 <DIO_vidSetLowNibbleDirection>:

/*Set Low Nibble Direction*/
void DIO_vidSetLowNibbleDirection(u8 Copy_u8LowNibbleNumber,u8 copy_u8LowNibbleDirection)
{
    1036:	df 93       	push	r29
    1038:	cf 93       	push	r28
    103a:	00 d0       	rcall	.+0      	; 0x103c <DIO_vidSetLowNibbleDirection+0x6>
    103c:	00 d0       	rcall	.+0      	; 0x103e <DIO_vidSetLowNibbleDirection+0x8>
    103e:	cd b7       	in	r28, 0x3d	; 61
    1040:	de b7       	in	r29, 0x3e	; 62
    1042:	89 83       	std	Y+1, r24	; 0x01
    1044:	6a 83       	std	Y+2, r22	; 0x02
	/*Port Identification from Low Nibble Number*/
	DIO_vidPortIdentification(Copy_u8LowNibbleNumber);
    1046:	89 81       	ldd	r24, Y+1	; 0x01
    1048:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_vidPortIdentification>

	switch(copy_u8LowNibbleDirection)
    104c:	8a 81       	ldd	r24, Y+2	; 0x02
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	3c 83       	std	Y+4, r19	; 0x04
    1054:	2b 83       	std	Y+3, r18	; 0x03
    1056:	8b 81       	ldd	r24, Y+3	; 0x03
    1058:	9c 81       	ldd	r25, Y+4	; 0x04
    105a:	81 30       	cpi	r24, 0x01	; 1
    105c:	91 05       	cpc	r25, r1
    105e:	a9 f0       	breq	.+42     	; 0x108a <DIO_vidSetLowNibbleDirection+0x54>
    1060:	2b 81       	ldd	r18, Y+3	; 0x03
    1062:	3c 81       	ldd	r19, Y+4	; 0x04
    1064:	22 30       	cpi	r18, 0x02	; 2
    1066:	31 05       	cpc	r19, r1
    1068:	39 f1       	breq	.+78     	; 0x10b8 <DIO_vidSetLowNibbleDirection+0x82>
    106a:	8b 81       	ldd	r24, Y+3	; 0x03
    106c:	9c 81       	ldd	r25, Y+4	; 0x04
    106e:	00 97       	sbiw	r24, 0x00	; 0
    1070:	c9 f5       	brne	.+114    	; 0x10e4 <DIO_vidSetLowNibbleDirection+0xae>
	{
		/*output*/
		case OUTPUT :
		{
			SET_LOW_NIBBLE(DDR);
    1072:	a0 91 68 01 	lds	r26, 0x0168
    1076:	b0 91 69 01 	lds	r27, 0x0169
    107a:	e0 91 68 01 	lds	r30, 0x0168
    107e:	f0 91 69 01 	lds	r31, 0x0169
    1082:	80 81       	ld	r24, Z
    1084:	8f 60       	ori	r24, 0x0F	; 15
    1086:	8c 93       	st	X, r24
    1088:	2d c0       	rjmp	.+90     	; 0x10e4 <DIO_vidSetLowNibbleDirection+0xae>
			break;
		}
		/*input with pull up*/
		case INPUT_PULL_UP :
		{
			CLEAR_LOW_NIBBLE(DDR);
    108a:	a0 91 68 01 	lds	r26, 0x0168
    108e:	b0 91 69 01 	lds	r27, 0x0169
    1092:	e0 91 68 01 	lds	r30, 0x0168
    1096:	f0 91 69 01 	lds	r31, 0x0169
    109a:	80 81       	ld	r24, Z
    109c:	80 7f       	andi	r24, 0xF0	; 240
    109e:	8c 93       	st	X, r24
			SET_LOW_NIBBLE(PORT);
    10a0:	a0 91 6c 01 	lds	r26, 0x016C
    10a4:	b0 91 6d 01 	lds	r27, 0x016D
    10a8:	e0 91 6c 01 	lds	r30, 0x016C
    10ac:	f0 91 6d 01 	lds	r31, 0x016D
    10b0:	80 81       	ld	r24, Z
    10b2:	8f 60       	ori	r24, 0x0F	; 15
    10b4:	8c 93       	st	X, r24
    10b6:	16 c0       	rjmp	.+44     	; 0x10e4 <DIO_vidSetLowNibbleDirection+0xae>
			break;
		}
		/*input with high impedance*/
		case INPUT_HIGH_Z :
		{
			CLEAR_LOW_NIBBLE(DDR);
    10b8:	a0 91 68 01 	lds	r26, 0x0168
    10bc:	b0 91 69 01 	lds	r27, 0x0169
    10c0:	e0 91 68 01 	lds	r30, 0x0168
    10c4:	f0 91 69 01 	lds	r31, 0x0169
    10c8:	80 81       	ld	r24, Z
    10ca:	80 7f       	andi	r24, 0xF0	; 240
    10cc:	8c 93       	st	X, r24
			CLEAR_LOW_NIBBLE(PORT);
    10ce:	a0 91 6c 01 	lds	r26, 0x016C
    10d2:	b0 91 6d 01 	lds	r27, 0x016D
    10d6:	e0 91 6c 01 	lds	r30, 0x016C
    10da:	f0 91 6d 01 	lds	r31, 0x016D
    10de:	80 81       	ld	r24, Z
    10e0:	80 7f       	andi	r24, 0xF0	; 240
    10e2:	8c 93       	st	X, r24
		}
		/*useless*/
		default : 
		{}
	}
}
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	0f 90       	pop	r0
    10ea:	0f 90       	pop	r0
    10ec:	cf 91       	pop	r28
    10ee:	df 91       	pop	r29
    10f0:	08 95       	ret

000010f2 <DIO_vidSetHighNibbleDirection>:

/*Set High Nibble Direction*/
void DIO_vidSetHighNibbleDirection(u8 Copy_u8HighNibbleNumber,u8 copy_u8HighNibbleDirection)
{
    10f2:	df 93       	push	r29
    10f4:	cf 93       	push	r28
    10f6:	00 d0       	rcall	.+0      	; 0x10f8 <DIO_vidSetHighNibbleDirection+0x6>
    10f8:	00 d0       	rcall	.+0      	; 0x10fa <DIO_vidSetHighNibbleDirection+0x8>
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
    10fe:	89 83       	std	Y+1, r24	; 0x01
    1100:	6a 83       	std	Y+2, r22	; 0x02
	/*Port Identification from High Nibble Number*/
	DIO_vidPortIdentification(Copy_u8HighNibbleNumber);
    1102:	89 81       	ldd	r24, Y+1	; 0x01
    1104:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_vidPortIdentification>

	switch(copy_u8HighNibbleDirection)
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	3c 83       	std	Y+4, r19	; 0x04
    1110:	2b 83       	std	Y+3, r18	; 0x03
    1112:	8b 81       	ldd	r24, Y+3	; 0x03
    1114:	9c 81       	ldd	r25, Y+4	; 0x04
    1116:	81 30       	cpi	r24, 0x01	; 1
    1118:	91 05       	cpc	r25, r1
    111a:	a9 f0       	breq	.+42     	; 0x1146 <DIO_vidSetHighNibbleDirection+0x54>
    111c:	2b 81       	ldd	r18, Y+3	; 0x03
    111e:	3c 81       	ldd	r19, Y+4	; 0x04
    1120:	22 30       	cpi	r18, 0x02	; 2
    1122:	31 05       	cpc	r19, r1
    1124:	39 f1       	breq	.+78     	; 0x1174 <DIO_vidSetHighNibbleDirection+0x82>
    1126:	8b 81       	ldd	r24, Y+3	; 0x03
    1128:	9c 81       	ldd	r25, Y+4	; 0x04
    112a:	00 97       	sbiw	r24, 0x00	; 0
    112c:	c9 f5       	brne	.+114    	; 0x11a0 <DIO_vidSetHighNibbleDirection+0xae>
	{
		/*output*/
		case OUTPUT :
		{
			SET_HIGH_NIBBLE(DDR);
    112e:	a0 91 68 01 	lds	r26, 0x0168
    1132:	b0 91 69 01 	lds	r27, 0x0169
    1136:	e0 91 68 01 	lds	r30, 0x0168
    113a:	f0 91 69 01 	lds	r31, 0x0169
    113e:	80 81       	ld	r24, Z
    1140:	80 6f       	ori	r24, 0xF0	; 240
    1142:	8c 93       	st	X, r24
    1144:	2d c0       	rjmp	.+90     	; 0x11a0 <DIO_vidSetHighNibbleDirection+0xae>
			break;
		}
		/*input with pull up*/
		case INPUT_PULL_UP :
		{
			CLEAR_HIGH_NIBBLE(DDR);
    1146:	a0 91 68 01 	lds	r26, 0x0168
    114a:	b0 91 69 01 	lds	r27, 0x0169
    114e:	e0 91 68 01 	lds	r30, 0x0168
    1152:	f0 91 69 01 	lds	r31, 0x0169
    1156:	80 81       	ld	r24, Z
    1158:	8f 70       	andi	r24, 0x0F	; 15
    115a:	8c 93       	st	X, r24
			SET_HIGH_NIBBLE(PORT);
    115c:	a0 91 6c 01 	lds	r26, 0x016C
    1160:	b0 91 6d 01 	lds	r27, 0x016D
    1164:	e0 91 6c 01 	lds	r30, 0x016C
    1168:	f0 91 6d 01 	lds	r31, 0x016D
    116c:	80 81       	ld	r24, Z
    116e:	80 6f       	ori	r24, 0xF0	; 240
    1170:	8c 93       	st	X, r24
    1172:	16 c0       	rjmp	.+44     	; 0x11a0 <DIO_vidSetHighNibbleDirection+0xae>
			break;
		}
		/*input with high impedance*/
		case INPUT_HIGH_Z :
		{
			CLEAR_HIGH_NIBBLE(DDR);
    1174:	a0 91 68 01 	lds	r26, 0x0168
    1178:	b0 91 69 01 	lds	r27, 0x0169
    117c:	e0 91 68 01 	lds	r30, 0x0168
    1180:	f0 91 69 01 	lds	r31, 0x0169
    1184:	80 81       	ld	r24, Z
    1186:	8f 70       	andi	r24, 0x0F	; 15
    1188:	8c 93       	st	X, r24
			CLEAR_HIGH_NIBBLE(PORT);
    118a:	a0 91 6c 01 	lds	r26, 0x016C
    118e:	b0 91 6d 01 	lds	r27, 0x016D
    1192:	e0 91 6c 01 	lds	r30, 0x016C
    1196:	f0 91 6d 01 	lds	r31, 0x016D
    119a:	80 81       	ld	r24, Z
    119c:	8f 70       	andi	r24, 0x0F	; 15
    119e:	8c 93       	st	X, r24
		}
		/*useless*/
		default : 
		{}
	}
}
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	cf 91       	pop	r28
    11aa:	df 91       	pop	r29
    11ac:	08 95       	ret

000011ae <DIO_vidSetPortDirection>:

/*Set Port Direction*/
void DIO_vidSetPortDirection(u8 Copy_u8PortId,u8 copy_u8PortDirection)
{
    11ae:	df 93       	push	r29
    11b0:	cf 93       	push	r28
    11b2:	00 d0       	rcall	.+0      	; 0x11b4 <DIO_vidSetPortDirection+0x6>
    11b4:	00 d0       	rcall	.+0      	; 0x11b6 <DIO_vidSetPortDirection+0x8>
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
    11ba:	89 83       	std	Y+1, r24	; 0x01
    11bc:	6a 83       	std	Y+2, r22	; 0x02
	/*Port Identification from Port Id*/
	DIO_vidPortIdentification(Copy_u8PortId);
    11be:	89 81       	ldd	r24, Y+1	; 0x01
    11c0:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_vidPortIdentification>

	switch(copy_u8PortDirection)
    11c4:	8a 81       	ldd	r24, Y+2	; 0x02
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	3c 83       	std	Y+4, r19	; 0x04
    11cc:	2b 83       	std	Y+3, r18	; 0x03
    11ce:	8b 81       	ldd	r24, Y+3	; 0x03
    11d0:	9c 81       	ldd	r25, Y+4	; 0x04
    11d2:	81 30       	cpi	r24, 0x01	; 1
    11d4:	91 05       	cpc	r25, r1
    11d6:	81 f0       	breq	.+32     	; 0x11f8 <DIO_vidSetPortDirection+0x4a>
    11d8:	2b 81       	ldd	r18, Y+3	; 0x03
    11da:	3c 81       	ldd	r19, Y+4	; 0x04
    11dc:	22 30       	cpi	r18, 0x02	; 2
    11de:	31 05       	cpc	r19, r1
    11e0:	b9 f0       	breq	.+46     	; 0x1210 <DIO_vidSetPortDirection+0x62>
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	9c 81       	ldd	r25, Y+4	; 0x04
    11e6:	00 97       	sbiw	r24, 0x00	; 0
    11e8:	e9 f4       	brne	.+58     	; 0x1224 <DIO_vidSetPortDirection+0x76>
	{
		/*output*/
		case OUTPUT :
		{
			SET_PORT(DDR);
    11ea:	e0 91 68 01 	lds	r30, 0x0168
    11ee:	f0 91 69 01 	lds	r31, 0x0169
    11f2:	8f ef       	ldi	r24, 0xFF	; 255
    11f4:	80 83       	st	Z, r24
    11f6:	16 c0       	rjmp	.+44     	; 0x1224 <DIO_vidSetPortDirection+0x76>
			break;
		}
		/*input with pull up*/
		case INPUT_PULL_UP :
		{
			CLEAR_PORT(DDR);
    11f8:	e0 91 68 01 	lds	r30, 0x0168
    11fc:	f0 91 69 01 	lds	r31, 0x0169
    1200:	10 82       	st	Z, r1
			SET_PORT(PORT);
    1202:	e0 91 6c 01 	lds	r30, 0x016C
    1206:	f0 91 6d 01 	lds	r31, 0x016D
    120a:	8f ef       	ldi	r24, 0xFF	; 255
    120c:	80 83       	st	Z, r24
    120e:	0a c0       	rjmp	.+20     	; 0x1224 <DIO_vidSetPortDirection+0x76>
			break;
		}
		/*input with high impedance*/
		case INPUT_HIGH_Z :
		{
			CLEAR_PORT(DDR);
    1210:	e0 91 68 01 	lds	r30, 0x0168
    1214:	f0 91 69 01 	lds	r31, 0x0169
    1218:	10 82       	st	Z, r1
			CLEAR_PORT(PORT);
    121a:	e0 91 6c 01 	lds	r30, 0x016C
    121e:	f0 91 6d 01 	lds	r31, 0x016D
    1222:	10 82       	st	Z, r1
		}
		/*useless*/
		default : 
		{}
	}
}
    1224:	0f 90       	pop	r0
    1226:	0f 90       	pop	r0
    1228:	0f 90       	pop	r0
    122a:	0f 90       	pop	r0
    122c:	cf 91       	pop	r28
    122e:	df 91       	pop	r29
    1230:	08 95       	ret

00001232 <DIO_vidSetPinValue>:

/*Set Pin Value in case of output*/
void DIO_vidSetPinValue(u8 Copy_u8PinNumber,u8 copy_u8PinValue)
{
    1232:	df 93       	push	r29
    1234:	cf 93       	push	r28
    1236:	00 d0       	rcall	.+0      	; 0x1238 <DIO_vidSetPinValue+0x6>
    1238:	0f 92       	push	r0
    123a:	cd b7       	in	r28, 0x3d	; 61
    123c:	de b7       	in	r29, 0x3e	; 62
    123e:	8a 83       	std	Y+2, r24	; 0x02
    1240:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8DIOPinNumber;
	Local_u8DIOPinNumber=Copy_u8PinNumber%8;
    1242:	8a 81       	ldd	r24, Y+2	; 0x02
    1244:	87 70       	andi	r24, 0x07	; 7
    1246:	89 83       	std	Y+1, r24	; 0x01

	/*Port Identification from pin number*/
	DIO_vidPortIdentification(Copy_u8PinNumber);
    1248:	8a 81       	ldd	r24, Y+2	; 0x02
    124a:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_vidPortIdentification>

	/*low - 0v*/
	if(copy_u8PinValue==LOW)
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	88 23       	and	r24, r24
    1252:	c9 f4       	brne	.+50     	; 0x1286 <DIO_vidSetPinValue+0x54>
	{
		CLEAR_BIT(PORT,Local_u8DIOPinNumber);
    1254:	a0 91 6c 01 	lds	r26, 0x016C
    1258:	b0 91 6d 01 	lds	r27, 0x016D
    125c:	e0 91 6c 01 	lds	r30, 0x016C
    1260:	f0 91 6d 01 	lds	r31, 0x016D
    1264:	80 81       	ld	r24, Z
    1266:	48 2f       	mov	r20, r24
    1268:	89 81       	ldd	r24, Y+1	; 0x01
    126a:	28 2f       	mov	r18, r24
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	02 2e       	mov	r0, r18
    1274:	02 c0       	rjmp	.+4      	; 0x127a <DIO_vidSetPinValue+0x48>
    1276:	88 0f       	add	r24, r24
    1278:	99 1f       	adc	r25, r25
    127a:	0a 94       	dec	r0
    127c:	e2 f7       	brpl	.-8      	; 0x1276 <DIO_vidSetPinValue+0x44>
    127e:	80 95       	com	r24
    1280:	84 23       	and	r24, r20
    1282:	8c 93       	st	X, r24
    1284:	1a c0       	rjmp	.+52     	; 0x12ba <DIO_vidSetPinValue+0x88>
	}
	/*high - 5v*/
	else if(copy_u8PinValue==HIGH)
    1286:	8b 81       	ldd	r24, Y+3	; 0x03
    1288:	81 30       	cpi	r24, 0x01	; 1
    128a:	b9 f4       	brne	.+46     	; 0x12ba <DIO_vidSetPinValue+0x88>
	{
		SET_BIT(PORT,Local_u8DIOPinNumber);
    128c:	a0 91 6c 01 	lds	r26, 0x016C
    1290:	b0 91 6d 01 	lds	r27, 0x016D
    1294:	e0 91 6c 01 	lds	r30, 0x016C
    1298:	f0 91 6d 01 	lds	r31, 0x016D
    129c:	80 81       	ld	r24, Z
    129e:	48 2f       	mov	r20, r24
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
    12a2:	28 2f       	mov	r18, r24
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	02 2e       	mov	r0, r18
    12ac:	02 c0       	rjmp	.+4      	; 0x12b2 <DIO_vidSetPinValue+0x80>
    12ae:	88 0f       	add	r24, r24
    12b0:	99 1f       	adc	r25, r25
    12b2:	0a 94       	dec	r0
    12b4:	e2 f7       	brpl	.-8      	; 0x12ae <DIO_vidSetPinValue+0x7c>
    12b6:	84 2b       	or	r24, r20
    12b8:	8c 93       	st	X, r24
	}
	/*useless*/
	else
	{}
}
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	cf 91       	pop	r28
    12c2:	df 91       	pop	r29
    12c4:	08 95       	ret

000012c6 <DIO_vidTogglePinValue>:

/*Toggle Pin Value in case of output*/
void DIO_vidTogglePinValue(u8 Copy_u8PinNumber)
{
    12c6:	df 93       	push	r29
    12c8:	cf 93       	push	r28
    12ca:	00 d0       	rcall	.+0      	; 0x12cc <DIO_vidTogglePinValue+0x6>
    12cc:	cd b7       	in	r28, 0x3d	; 61
    12ce:	de b7       	in	r29, 0x3e	; 62
    12d0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8DIOPinNumber;
	Local_u8DIOPinNumber=Copy_u8PinNumber%8;
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	87 70       	andi	r24, 0x07	; 7
    12d6:	89 83       	std	Y+1, r24	; 0x01

	/*Port Identification from pin number*/
	DIO_vidPortIdentification(Copy_u8PinNumber);
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_vidPortIdentification>

	/*Toggle Pin Value*/
	TOGGLE_BIT(PORT,Local_u8DIOPinNumber);
    12de:	a0 91 6c 01 	lds	r26, 0x016C
    12e2:	b0 91 6d 01 	lds	r27, 0x016D
    12e6:	e0 91 6c 01 	lds	r30, 0x016C
    12ea:	f0 91 6d 01 	lds	r31, 0x016D
    12ee:	80 81       	ld	r24, Z
    12f0:	48 2f       	mov	r20, r24
    12f2:	89 81       	ldd	r24, Y+1	; 0x01
    12f4:	28 2f       	mov	r18, r24
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	02 2e       	mov	r0, r18
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <DIO_vidTogglePinValue+0x3e>
    1300:	88 0f       	add	r24, r24
    1302:	99 1f       	adc	r25, r25
    1304:	0a 94       	dec	r0
    1306:	e2 f7       	brpl	.-8      	; 0x1300 <DIO_vidTogglePinValue+0x3a>
    1308:	84 27       	eor	r24, r20
    130a:	8c 93       	st	X, r24
}
    130c:	0f 90       	pop	r0
    130e:	0f 90       	pop	r0
    1310:	cf 91       	pop	r28
    1312:	df 91       	pop	r29
    1314:	08 95       	ret

00001316 <DIO_vidSetLowNibbleValue>:

/*Set Low Nibble Value in case of output*/
void DIO_vidSetLowNibbleValue(u8 Copy_u8LowNibbleNumber,u8 copy_u8LowNibblevalue)
{
    1316:	df 93       	push	r29
    1318:	cf 93       	push	r28
    131a:	00 d0       	rcall	.+0      	; 0x131c <DIO_vidSetLowNibbleValue+0x6>
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
    1320:	89 83       	std	Y+1, r24	; 0x01
    1322:	6a 83       	std	Y+2, r22	; 0x02
	/*Port Identification from Low Nibble Number*/
	DIO_vidPortIdentification(Copy_u8LowNibbleNumber);
    1324:	89 81       	ldd	r24, Y+1	; 0x01
    1326:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_vidPortIdentification>

	/*low - 0v*/
	if(copy_u8LowNibblevalue==LOW)
    132a:	8a 81       	ldd	r24, Y+2	; 0x02
    132c:	88 23       	and	r24, r24
    132e:	61 f4       	brne	.+24     	; 0x1348 <DIO_vidSetLowNibbleValue+0x32>
	{
		CLEAR_LOW_NIBBLE(PORT);
    1330:	a0 91 6c 01 	lds	r26, 0x016C
    1334:	b0 91 6d 01 	lds	r27, 0x016D
    1338:	e0 91 6c 01 	lds	r30, 0x016C
    133c:	f0 91 6d 01 	lds	r31, 0x016D
    1340:	80 81       	ld	r24, Z
    1342:	80 7f       	andi	r24, 0xF0	; 240
    1344:	8c 93       	st	X, r24
    1346:	0e c0       	rjmp	.+28     	; 0x1364 <DIO_vidSetLowNibbleValue+0x4e>
	}
	/*high - 5v*/
	else if(copy_u8LowNibblevalue==HIGH)
    1348:	8a 81       	ldd	r24, Y+2	; 0x02
    134a:	81 30       	cpi	r24, 0x01	; 1
    134c:	59 f4       	brne	.+22     	; 0x1364 <DIO_vidSetLowNibbleValue+0x4e>
	{
		SET_LOW_NIBBLE(PORT);
    134e:	a0 91 6c 01 	lds	r26, 0x016C
    1352:	b0 91 6d 01 	lds	r27, 0x016D
    1356:	e0 91 6c 01 	lds	r30, 0x016C
    135a:	f0 91 6d 01 	lds	r31, 0x016D
    135e:	80 81       	ld	r24, Z
    1360:	8f 60       	ori	r24, 0x0F	; 15
    1362:	8c 93       	st	X, r24
	}
	/*useless*/
	else
	{}
}
    1364:	0f 90       	pop	r0
    1366:	0f 90       	pop	r0
    1368:	cf 91       	pop	r28
    136a:	df 91       	pop	r29
    136c:	08 95       	ret

0000136e <DIO_vidToggleLowNibbleValue>:

/*Toggle Low Nibble Value in case of output*/
void DIO_vidToggleLowNibbleValue(u8 Copy_u8LowNibbleNumber)
{
    136e:	df 93       	push	r29
    1370:	cf 93       	push	r28
    1372:	0f 92       	push	r0
    1374:	cd b7       	in	r28, 0x3d	; 61
    1376:	de b7       	in	r29, 0x3e	; 62
    1378:	89 83       	std	Y+1, r24	; 0x01
	/*Port Identification from Low Nibble Number*/
	DIO_vidPortIdentification(Copy_u8LowNibbleNumber);
    137a:	89 81       	ldd	r24, Y+1	; 0x01
    137c:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_vidPortIdentification>

	/*Toggle Low Nibble Value*/
	TOGGLE_LOW_NIBBLE(PORT);
    1380:	a0 91 6c 01 	lds	r26, 0x016C
    1384:	b0 91 6d 01 	lds	r27, 0x016D
    1388:	e0 91 6c 01 	lds	r30, 0x016C
    138c:	f0 91 6d 01 	lds	r31, 0x016D
    1390:	90 81       	ld	r25, Z
    1392:	8f e0       	ldi	r24, 0x0F	; 15
    1394:	89 27       	eor	r24, r25
    1396:	8c 93       	st	X, r24
}
    1398:	0f 90       	pop	r0
    139a:	cf 91       	pop	r28
    139c:	df 91       	pop	r29
    139e:	08 95       	ret

000013a0 <DIO_vidAssignLowNibbleValue>:

/*Assign Low Nibble Value in case of output*/
void DIO_vidAssignLowNibbleValue(u8 Copy_u8LowNibbleNumber,u8 Copy_u8LowNibbleValue)
{
    13a0:	df 93       	push	r29
    13a2:	cf 93       	push	r28
    13a4:	00 d0       	rcall	.+0      	; 0x13a6 <DIO_vidAssignLowNibbleValue+0x6>
    13a6:	cd b7       	in	r28, 0x3d	; 61
    13a8:	de b7       	in	r29, 0x3e	; 62
    13aa:	89 83       	std	Y+1, r24	; 0x01
    13ac:	6a 83       	std	Y+2, r22	; 0x02
	/*Port Identification from Low Nibble Number*/
	DIO_vidPortIdentification(Copy_u8LowNibbleNumber);
    13ae:	89 81       	ldd	r24, Y+1	; 0x01
    13b0:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_vidPortIdentification>

	/*Assign Low Nibble Value*/
	ASSIGN_LOW_NIBBLE(PORT,Copy_u8LowNibbleValue);
    13b4:	a0 91 6c 01 	lds	r26, 0x016C
    13b8:	b0 91 6d 01 	lds	r27, 0x016D
    13bc:	e0 91 6c 01 	lds	r30, 0x016C
    13c0:	f0 91 6d 01 	lds	r31, 0x016D
    13c4:	80 81       	ld	r24, Z
    13c6:	80 7f       	andi	r24, 0xF0	; 240
    13c8:	8c 93       	st	X, r24
    13ca:	a0 91 6c 01 	lds	r26, 0x016C
    13ce:	b0 91 6d 01 	lds	r27, 0x016D
    13d2:	e0 91 6c 01 	lds	r30, 0x016C
    13d6:	f0 91 6d 01 	lds	r31, 0x016D
    13da:	90 81       	ld	r25, Z
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	89 2b       	or	r24, r25
    13e0:	8c 93       	st	X, r24
}
    13e2:	0f 90       	pop	r0
    13e4:	0f 90       	pop	r0
    13e6:	cf 91       	pop	r28
    13e8:	df 91       	pop	r29
    13ea:	08 95       	ret

000013ec <DIO_vidSetHighNibbleValue>:

/*Set High Nibble Value in case of output*/
void DIO_vidSetHighNibbleValue(u8 Copy_u8HighNibbleNumber,u8 copy_u8HighNibblevalue)
{
    13ec:	df 93       	push	r29
    13ee:	cf 93       	push	r28
    13f0:	00 d0       	rcall	.+0      	; 0x13f2 <DIO_vidSetHighNibbleValue+0x6>
    13f2:	cd b7       	in	r28, 0x3d	; 61
    13f4:	de b7       	in	r29, 0x3e	; 62
    13f6:	89 83       	std	Y+1, r24	; 0x01
    13f8:	6a 83       	std	Y+2, r22	; 0x02
	/*Port Identification from High Nibble Number*/
	DIO_vidPortIdentification(Copy_u8HighNibbleNumber);
    13fa:	89 81       	ldd	r24, Y+1	; 0x01
    13fc:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_vidPortIdentification>

	/*low - 0v*/
	if(copy_u8HighNibblevalue==LOW)
    1400:	8a 81       	ldd	r24, Y+2	; 0x02
    1402:	88 23       	and	r24, r24
    1404:	61 f4       	brne	.+24     	; 0x141e <DIO_vidSetHighNibbleValue+0x32>
	{
		CLEAR_HIGH_NIBBLE(PORT);
    1406:	a0 91 6c 01 	lds	r26, 0x016C
    140a:	b0 91 6d 01 	lds	r27, 0x016D
    140e:	e0 91 6c 01 	lds	r30, 0x016C
    1412:	f0 91 6d 01 	lds	r31, 0x016D
    1416:	80 81       	ld	r24, Z
    1418:	8f 70       	andi	r24, 0x0F	; 15
    141a:	8c 93       	st	X, r24
    141c:	0e c0       	rjmp	.+28     	; 0x143a <DIO_vidSetHighNibbleValue+0x4e>
	}
	/*high - 5v*/
	else if(copy_u8HighNibblevalue==HIGH)
    141e:	8a 81       	ldd	r24, Y+2	; 0x02
    1420:	81 30       	cpi	r24, 0x01	; 1
    1422:	59 f4       	brne	.+22     	; 0x143a <DIO_vidSetHighNibbleValue+0x4e>
	{
		SET_HIGH_NIBBLE(PORT);
    1424:	a0 91 6c 01 	lds	r26, 0x016C
    1428:	b0 91 6d 01 	lds	r27, 0x016D
    142c:	e0 91 6c 01 	lds	r30, 0x016C
    1430:	f0 91 6d 01 	lds	r31, 0x016D
    1434:	80 81       	ld	r24, Z
    1436:	80 6f       	ori	r24, 0xF0	; 240
    1438:	8c 93       	st	X, r24
	}
	/*useless*/
	else
	{}
}
    143a:	0f 90       	pop	r0
    143c:	0f 90       	pop	r0
    143e:	cf 91       	pop	r28
    1440:	df 91       	pop	r29
    1442:	08 95       	ret

00001444 <DIO_vidToggleHighNibbleValue>:

/*Toggle High Nibble Value in case of output*/
void DIO_vidToggleHighNibbleValue(u8 Copy_u8HighNibbleNumber)
{
    1444:	df 93       	push	r29
    1446:	cf 93       	push	r28
    1448:	0f 92       	push	r0
    144a:	cd b7       	in	r28, 0x3d	; 61
    144c:	de b7       	in	r29, 0x3e	; 62
    144e:	89 83       	std	Y+1, r24	; 0x01
	/*Port Identification from High Nibble Number*/
	DIO_vidPortIdentification(Copy_u8HighNibbleNumber);
    1450:	89 81       	ldd	r24, Y+1	; 0x01
    1452:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_vidPortIdentification>

	/*Toggle High Nibble Value*/
	TOGGLE_HIGH_NIBBLE(PORT);
    1456:	a0 91 6c 01 	lds	r26, 0x016C
    145a:	b0 91 6d 01 	lds	r27, 0x016D
    145e:	e0 91 6c 01 	lds	r30, 0x016C
    1462:	f0 91 6d 01 	lds	r31, 0x016D
    1466:	90 81       	ld	r25, Z
    1468:	80 ef       	ldi	r24, 0xF0	; 240
    146a:	89 27       	eor	r24, r25
    146c:	8c 93       	st	X, r24
}
    146e:	0f 90       	pop	r0
    1470:	cf 91       	pop	r28
    1472:	df 91       	pop	r29
    1474:	08 95       	ret

00001476 <DIO_vidAssignHighNibbleValue>:

/*Assign High Nibble Value in case of output*/
void DIO_vidAssignHighNibbleValue(u8 Copy_u8HighNibbleNumber,u8 Copy_u8HighNibbleValue)
{
    1476:	df 93       	push	r29
    1478:	cf 93       	push	r28
    147a:	00 d0       	rcall	.+0      	; 0x147c <DIO_vidAssignHighNibbleValue+0x6>
    147c:	cd b7       	in	r28, 0x3d	; 61
    147e:	de b7       	in	r29, 0x3e	; 62
    1480:	89 83       	std	Y+1, r24	; 0x01
    1482:	6a 83       	std	Y+2, r22	; 0x02
	/*Port Identification from High Nibble Number*/
	DIO_vidPortIdentification(Copy_u8HighNibbleNumber);
    1484:	89 81       	ldd	r24, Y+1	; 0x01
    1486:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_vidPortIdentification>

	/*Assign High Nibble Value*/
	ASSIGN_HIGH_NIBBLE(PORT,Copy_u8HighNibbleValue);
    148a:	a0 91 6c 01 	lds	r26, 0x016C
    148e:	b0 91 6d 01 	lds	r27, 0x016D
    1492:	e0 91 6c 01 	lds	r30, 0x016C
    1496:	f0 91 6d 01 	lds	r31, 0x016D
    149a:	80 81       	ld	r24, Z
    149c:	8f 70       	andi	r24, 0x0F	; 15
    149e:	8c 93       	st	X, r24
    14a0:	a0 91 6c 01 	lds	r26, 0x016C
    14a4:	b0 91 6d 01 	lds	r27, 0x016D
    14a8:	e0 91 6c 01 	lds	r30, 0x016C
    14ac:	f0 91 6d 01 	lds	r31, 0x016D
    14b0:	80 81       	ld	r24, Z
    14b2:	28 2f       	mov	r18, r24
    14b4:	8a 81       	ldd	r24, Y+2	; 0x02
    14b6:	88 2f       	mov	r24, r24
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	82 95       	swap	r24
    14bc:	92 95       	swap	r25
    14be:	90 7f       	andi	r25, 0xF0	; 240
    14c0:	98 27       	eor	r25, r24
    14c2:	80 7f       	andi	r24, 0xF0	; 240
    14c4:	98 27       	eor	r25, r24
    14c6:	82 2b       	or	r24, r18
    14c8:	8c 93       	st	X, r24
}
    14ca:	0f 90       	pop	r0
    14cc:	0f 90       	pop	r0
    14ce:	cf 91       	pop	r28
    14d0:	df 91       	pop	r29
    14d2:	08 95       	ret

000014d4 <DIO_vidSetPortValue>:

/*Set Port Value in case of output*/
void DIO_vidSetPortValue(u8 Copy_u8PortId,u8 copy_u8Portvalue)
{
    14d4:	df 93       	push	r29
    14d6:	cf 93       	push	r28
    14d8:	00 d0       	rcall	.+0      	; 0x14da <DIO_vidSetPortValue+0x6>
    14da:	cd b7       	in	r28, 0x3d	; 61
    14dc:	de b7       	in	r29, 0x3e	; 62
    14de:	89 83       	std	Y+1, r24	; 0x01
    14e0:	6a 83       	std	Y+2, r22	; 0x02
	/*Port Identification from Port Id*/
	DIO_vidPortIdentification(Copy_u8PortId);
    14e2:	89 81       	ldd	r24, Y+1	; 0x01
    14e4:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_vidPortIdentification>

	/*low - 0v*/
	if(copy_u8Portvalue==LOW)
    14e8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ea:	88 23       	and	r24, r24
    14ec:	31 f4       	brne	.+12     	; 0x14fa <DIO_vidSetPortValue+0x26>
	{
		CLEAR_PORT(PORT);
    14ee:	e0 91 6c 01 	lds	r30, 0x016C
    14f2:	f0 91 6d 01 	lds	r31, 0x016D
    14f6:	10 82       	st	Z, r1
    14f8:	09 c0       	rjmp	.+18     	; 0x150c <DIO_vidSetPortValue+0x38>
	}
	/*high - 5v*/
	else if(copy_u8Portvalue==HIGH)
    14fa:	8a 81       	ldd	r24, Y+2	; 0x02
    14fc:	81 30       	cpi	r24, 0x01	; 1
    14fe:	31 f4       	brne	.+12     	; 0x150c <DIO_vidSetPortValue+0x38>
	{
		SET_PORT(PORT);
    1500:	e0 91 6c 01 	lds	r30, 0x016C
    1504:	f0 91 6d 01 	lds	r31, 0x016D
    1508:	8f ef       	ldi	r24, 0xFF	; 255
    150a:	80 83       	st	Z, r24
	}
	/*useless*/
	else
	{}
}
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	cf 91       	pop	r28
    1512:	df 91       	pop	r29
    1514:	08 95       	ret

00001516 <DIO_vidTogglePortValue>:

/*Toggle Port Value in case of output*/
void DIO_vidTogglePortValue(u8 Copy_u8PortId)
{
    1516:	df 93       	push	r29
    1518:	cf 93       	push	r28
    151a:	0f 92       	push	r0
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
    1520:	89 83       	std	Y+1, r24	; 0x01
	/*Port Identification from Port Id*/
	DIO_vidPortIdentification(Copy_u8PortId);
    1522:	89 81       	ldd	r24, Y+1	; 0x01
    1524:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_vidPortIdentification>

	/*Toggle Port Value*/
	TOGGLE_PORT(PORT);
    1528:	a0 91 6c 01 	lds	r26, 0x016C
    152c:	b0 91 6d 01 	lds	r27, 0x016D
    1530:	e0 91 6c 01 	lds	r30, 0x016C
    1534:	f0 91 6d 01 	lds	r31, 0x016D
    1538:	80 81       	ld	r24, Z
    153a:	80 95       	com	r24
    153c:	8c 93       	st	X, r24
}
    153e:	0f 90       	pop	r0
    1540:	cf 91       	pop	r28
    1542:	df 91       	pop	r29
    1544:	08 95       	ret

00001546 <DIO_vidAssignPortValue>:

/*Assign Port Value in case of output*/
void DIO_vidAssignPortValue(u8 Copy_u8PortId,u8 Copy_u8PortValue)
{
    1546:	df 93       	push	r29
    1548:	cf 93       	push	r28
    154a:	00 d0       	rcall	.+0      	; 0x154c <DIO_vidAssignPortValue+0x6>
    154c:	cd b7       	in	r28, 0x3d	; 61
    154e:	de b7       	in	r29, 0x3e	; 62
    1550:	89 83       	std	Y+1, r24	; 0x01
    1552:	6a 83       	std	Y+2, r22	; 0x02
	/*Port Identification from Port Id*/
	DIO_vidPortIdentification(Copy_u8PortId);
    1554:	89 81       	ldd	r24, Y+1	; 0x01
    1556:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_vidPortIdentification>

	/*Assign Port Value*/
	ASSIGN_PORT(PORT,Copy_u8PortValue);
    155a:	e0 91 6c 01 	lds	r30, 0x016C
    155e:	f0 91 6d 01 	lds	r31, 0x016D
    1562:	10 82       	st	Z, r1
    1564:	a0 91 6c 01 	lds	r26, 0x016C
    1568:	b0 91 6d 01 	lds	r27, 0x016D
    156c:	e0 91 6c 01 	lds	r30, 0x016C
    1570:	f0 91 6d 01 	lds	r31, 0x016D
    1574:	90 81       	ld	r25, Z
    1576:	8a 81       	ldd	r24, Y+2	; 0x02
    1578:	89 2b       	or	r24, r25
    157a:	8c 93       	st	X, r24
}
    157c:	0f 90       	pop	r0
    157e:	0f 90       	pop	r0
    1580:	cf 91       	pop	r28
    1582:	df 91       	pop	r29
    1584:	08 95       	ret

00001586 <DIO_u8GetPinValue>:

/*Get Pin Value in case of input*/
u8 DIO_u8GetPinValue(u8 Copy_u8PinNumber)
{
    1586:	df 93       	push	r29
    1588:	cf 93       	push	r28
    158a:	00 d0       	rcall	.+0      	; 0x158c <DIO_u8GetPinValue+0x6>
    158c:	0f 92       	push	r0
    158e:	cd b7       	in	r28, 0x3d	; 61
    1590:	de b7       	in	r29, 0x3e	; 62
    1592:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8DIOPinNumber,Local_u8DIOGetPinValue;
	Local_u8DIOPinNumber=Copy_u8PinNumber%8;
    1594:	8b 81       	ldd	r24, Y+3	; 0x03
    1596:	87 70       	andi	r24, 0x07	; 7
    1598:	8a 83       	std	Y+2, r24	; 0x02

	/*Port Identification from pin number*/
	DIO_vidPortIdentification(Copy_u8PinNumber);
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_vidPortIdentification>

	/*Get Pin Value 0(0v) or 1(5v)*/
	Local_u8DIOGetPinValue=GET_BIT(PIN,Local_u8DIOPinNumber);
    15a0:	e0 91 6a 01 	lds	r30, 0x016A
    15a4:	f0 91 6b 01 	lds	r31, 0x016B
    15a8:	80 81       	ld	r24, Z
    15aa:	48 2f       	mov	r20, r24
    15ac:	50 e0       	ldi	r21, 0x00	; 0
    15ae:	8a 81       	ldd	r24, Y+2	; 0x02
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	02 c0       	rjmp	.+4      	; 0x15be <DIO_u8GetPinValue+0x38>
    15ba:	88 0f       	add	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	2a 95       	dec	r18
    15c0:	e2 f7       	brpl	.-8      	; 0x15ba <DIO_u8GetPinValue+0x34>
    15c2:	9a 01       	movw	r18, r20
    15c4:	28 23       	and	r18, r24
    15c6:	39 23       	and	r19, r25
    15c8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ca:	88 2f       	mov	r24, r24
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	a9 01       	movw	r20, r18
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <DIO_u8GetPinValue+0x50>
    15d2:	55 95       	asr	r21
    15d4:	47 95       	ror	r20
    15d6:	8a 95       	dec	r24
    15d8:	e2 f7       	brpl	.-8      	; 0x15d2 <DIO_u8GetPinValue+0x4c>
    15da:	ca 01       	movw	r24, r20
    15dc:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8DIOGetPinValue;
    15de:	89 81       	ldd	r24, Y+1	; 0x01
}
    15e0:	0f 90       	pop	r0
    15e2:	0f 90       	pop	r0
    15e4:	0f 90       	pop	r0
    15e6:	cf 91       	pop	r28
    15e8:	df 91       	pop	r29
    15ea:	08 95       	ret

000015ec <DIO_u8GetLowNibbleValue>:

/*Get Low Nibble Value in case of input*/
u8 DIO_u8GetLowNibbleValue(u8 Copy_u8LowNibbleNumber)
{
    15ec:	df 93       	push	r29
    15ee:	cf 93       	push	r28
    15f0:	00 d0       	rcall	.+0      	; 0x15f2 <DIO_u8GetLowNibbleValue+0x6>
    15f2:	cd b7       	in	r28, 0x3d	; 61
    15f4:	de b7       	in	r29, 0x3e	; 62
    15f6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8DIOGetLowNibbleValue;

	/*Port Identification from Low Nibble Number*/
	DIO_vidPortIdentification(Copy_u8LowNibbleNumber);
    15f8:	8a 81       	ldd	r24, Y+2	; 0x02
    15fa:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_vidPortIdentification>

	/*Get Low Nibble Value*/
	Local_u8DIOGetLowNibbleValue=GET_LOW_NIBBLE(PIN);
    15fe:	e0 91 6a 01 	lds	r30, 0x016A
    1602:	f0 91 6b 01 	lds	r31, 0x016B
    1606:	80 81       	ld	r24, Z
    1608:	8f 70       	andi	r24, 0x0F	; 15
    160a:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8DIOGetLowNibbleValue;
    160c:	89 81       	ldd	r24, Y+1	; 0x01
}
    160e:	0f 90       	pop	r0
    1610:	0f 90       	pop	r0
    1612:	cf 91       	pop	r28
    1614:	df 91       	pop	r29
    1616:	08 95       	ret

00001618 <DIO_u8GetHighNibbleValue>:

/*Get High Nibble Value in case of input*/
u8 DIO_u8GetHighNibbleValue(u8 Copy_u8HighNibbleNumber)
{
    1618:	df 93       	push	r29
    161a:	cf 93       	push	r28
    161c:	00 d0       	rcall	.+0      	; 0x161e <DIO_u8GetHighNibbleValue+0x6>
    161e:	cd b7       	in	r28, 0x3d	; 61
    1620:	de b7       	in	r29, 0x3e	; 62
    1622:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8DIOGetHighNibbleValue;

	/*Port Identification from High Nibble Number*/
	DIO_vidPortIdentification(Copy_u8HighNibbleNumber);
    1624:	8a 81       	ldd	r24, Y+2	; 0x02
    1626:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_vidPortIdentification>

	/*Get High Nibble Value*/
	Local_u8DIOGetHighNibbleValue=GET_HIGH_NIBBLE(PIN);
    162a:	e0 91 6a 01 	lds	r30, 0x016A
    162e:	f0 91 6b 01 	lds	r31, 0x016B
    1632:	80 81       	ld	r24, Z
    1634:	82 95       	swap	r24
    1636:	8f 70       	andi	r24, 0x0F	; 15
    1638:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8DIOGetHighNibbleValue;
    163a:	89 81       	ldd	r24, Y+1	; 0x01
}
    163c:	0f 90       	pop	r0
    163e:	0f 90       	pop	r0
    1640:	cf 91       	pop	r28
    1642:	df 91       	pop	r29
    1644:	08 95       	ret

00001646 <DIO_u8GetPortValue>:

/*Get Port Value in case of input*/
u8 DIO_u8GetPortValue(u8 Copy_u8PortId)
{
    1646:	df 93       	push	r29
    1648:	cf 93       	push	r28
    164a:	00 d0       	rcall	.+0      	; 0x164c <DIO_u8GetPortValue+0x6>
    164c:	cd b7       	in	r28, 0x3d	; 61
    164e:	de b7       	in	r29, 0x3e	; 62
    1650:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8DIOGetPortValue;

	/*Port Identification from Port Id*/
	DIO_vidPortIdentification(Copy_u8PortId);
    1652:	8a 81       	ldd	r24, Y+2	; 0x02
    1654:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_vidPortIdentification>

	/*Get Port Value*/
	Local_u8DIOGetPortValue=GET_PORT(PIN);
    1658:	e0 91 6a 01 	lds	r30, 0x016A
    165c:	f0 91 6b 01 	lds	r31, 0x016B
    1660:	80 81       	ld	r24, Z
    1662:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8DIOGetPortValue;
    1664:	89 81       	ldd	r24, Y+1	; 0x01
}
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <DIO_vidTimer0PinConfigurations>:

/***************************** Timer0 DIO Configurations ******************************/
void DIO_vidTimer0PinConfigurations(void)
{
    1670:	df 93       	push	r29
    1672:	cf 93       	push	r28
    1674:	cd b7       	in	r28, 0x3d	; 61
    1676:	de b7       	in	r29, 0x3e	; 62
	/*for setting OC0(pin3 in PORT B) as output
	 *to generate a waveform output on the OC0 pin*/
	DIO_vidSetPinDirection(PIN11,OUTPUT);
    1678:	8b e0       	ldi	r24, 0x0B	; 11
    167a:	60 e0       	ldi	r22, 0x00	; 0
    167c:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_vidSetPinDirection>
}
    1680:	cf 91       	pop	r28
    1682:	df 91       	pop	r29
    1684:	08 95       	ret

00001686 <DIO_vidSPIMasterPinConfigurations>:

/***************************** SPI Master DIO Configurations ******************************/
void DIO_vidSPIMasterPinConfigurations(void)
{
    1686:	df 93       	push	r29
    1688:	cf 93       	push	r28
    168a:	cd b7       	in	r28, 0x3d	; 61
    168c:	de b7       	in	r29, 0x3e	; 62
	/*set MOSI as output*/
	DIO_vidSetPinDirection(PIN13,OUTPUT);
    168e:	8d e0       	ldi	r24, 0x0D	; 13
    1690:	60 e0       	ldi	r22, 0x00	; 0
    1692:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_vidSetPinDirection>

	/*set MISO as input high impedence*/
	DIO_vidSetPinDirection(PIN14,INPUT_HIGH_Z);
    1696:	8e e0       	ldi	r24, 0x0E	; 14
    1698:	62 e0       	ldi	r22, 0x02	; 2
    169a:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_vidSetPinDirection>

	/*set SCK as output*/
	DIO_vidSetPinDirection(PIN15,OUTPUT);
    169e:	8f e0       	ldi	r24, 0x0F	; 15
    16a0:	60 e0       	ldi	r22, 0x00	; 0
    16a2:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_vidSetPinDirection>
}
    16a6:	cf 91       	pop	r28
    16a8:	df 91       	pop	r29
    16aa:	08 95       	ret

000016ac <DIO_vidSPISlavePinConfigurations>:

/***************************** SPI Slave DIO Configurations ******************************/
void DIO_vidSPISlavePinConfigurations(void)
{
    16ac:	df 93       	push	r29
    16ae:	cf 93       	push	r28
    16b0:	cd b7       	in	r28, 0x3d	; 61
    16b2:	de b7       	in	r29, 0x3e	; 62
	/*set slave select SS' as input high impedence*/
	DIO_vidSetPinDirection(PIN12,INPUT_HIGH_Z);
    16b4:	8c e0       	ldi	r24, 0x0C	; 12
    16b6:	62 e0       	ldi	r22, 0x02	; 2
    16b8:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_vidSetPinDirection>

	/*set MOSI as output*/
	DIO_vidSetPinDirection(PIN13,INPUT_HIGH_Z);
    16bc:	8d e0       	ldi	r24, 0x0D	; 13
    16be:	62 e0       	ldi	r22, 0x02	; 2
    16c0:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_vidSetPinDirection>

	/*set MISO as input high impedence*/
	DIO_vidSetPinDirection(PIN14,OUTPUT);
    16c4:	8e e0       	ldi	r24, 0x0E	; 14
    16c6:	60 e0       	ldi	r22, 0x00	; 0
    16c8:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_vidSetPinDirection>

	/*set SCK as output*/
	DIO_vidSetPinDirection(PIN15,INPUT_HIGH_Z);
    16cc:	8f e0       	ldi	r24, 0x0F	; 15
    16ce:	62 e0       	ldi	r22, 0x02	; 2
    16d0:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_vidSetPinDirection>
}
    16d4:	cf 91       	pop	r28
    16d6:	df 91       	pop	r29
    16d8:	08 95       	ret

000016da <LED_vidInitialization>:
#include "Timer_Interface.h"
#include "LED_Interface.h"

/*LED Initialization*/
void LED_vidInitialization(void)
{
    16da:	df 93       	push	r29
    16dc:	cf 93       	push	r28
    16de:	cd b7       	in	r28, 0x3d	; 61
    16e0:	de b7       	in	r29, 0x3e	; 62
	DIO_vidSetPinDirection(PIN29,OUTPUT);
    16e2:	8d e1       	ldi	r24, 0x1D	; 29
    16e4:	60 e0       	ldi	r22, 0x00	; 0
    16e6:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_vidSetPinDirection>
	/*for getting the address of an upper layer(HAL)'s function(toggle LED)
	 *for calling it or modify it in lower layer*/
	TIMER0_vidSetCallBack(LED_vidToggleLED);
    16ea:	8c e7       	ldi	r24, 0x7C	; 124
    16ec:	9b e0       	ldi	r25, 0x0B	; 11
    16ee:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <TIMER0_vidSetCallBack>
}
    16f2:	cf 91       	pop	r28
    16f4:	df 91       	pop	r29
    16f6:	08 95       	ret

000016f8 <LED_vidToggleLED>:

/*toggle LED function*/
void LED_vidToggleLED(void)
{
    16f8:	df 93       	push	r29
    16fa:	cf 93       	push	r28
    16fc:	cd b7       	in	r28, 0x3d	; 61
    16fe:	de b7       	in	r29, 0x3e	; 62
	DIO_vidTogglePinValue(PIN29);
    1700:	8d e1       	ldi	r24, 0x1D	; 29
    1702:	0e 94 63 09 	call	0x12c6	; 0x12c6 <DIO_vidTogglePinValue>
}
    1706:	cf 91       	pop	r28
    1708:	df 91       	pop	r29
    170a:	08 95       	ret

0000170c <TIMER0_vidOverFlowModeInitialization>:
 *****                timer 0 overflow mode                *****
 *------------------------------------------------------------*/

/*timer 0 overflow mode initialization*/
void TIMER0_vidOverFlowModeInitialization(u8 Copy_u8EventTime)
{
    170c:	df 93       	push	r29
    170e:	cf 93       	push	r28
    1710:	00 d0       	rcall	.+0      	; 0x1712 <TIMER0_vidOverFlowModeInitialization+0x6>
    1712:	cd b7       	in	r28, 0x3d	; 61
    1714:	de b7       	in	r29, 0x3e	; 62
    1716:	89 83       	std	Y+1, r24	; 0x01
	 *clock cycle time=85us
	 *overflow time=85us*256=0.02176 sec
	 *event time(Copy_u8EventTime)=1 sec
	 *# of overflows=event time/overflow time=1/0.02176=45 overflows
	 *so every 45 overflows ; event(ex. Toggling a LED) will take place*/
	Global_u32NumberOfOverFlows=((Copy_u8EventTime*12000000)/(1024*256.0));
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	88 2f       	mov	r24, r24
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	a0 e0       	ldi	r26, 0x00	; 0
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	20 e0       	ldi	r18, 0x00	; 0
    1724:	3b e1       	ldi	r19, 0x1B	; 27
    1726:	47 eb       	ldi	r20, 0xB7	; 183
    1728:	50 e0       	ldi	r21, 0x00	; 0
    172a:	bc 01       	movw	r22, r24
    172c:	cd 01       	movw	r24, r26
    172e:	0e 94 41 10 	call	0x2082	; 0x2082 <__mulsi3>
    1732:	dc 01       	movw	r26, r24
    1734:	cb 01       	movw	r24, r22
    1736:	bc 01       	movw	r22, r24
    1738:	cd 01       	movw	r24, r26
    173a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    173e:	dc 01       	movw	r26, r24
    1740:	cb 01       	movw	r24, r22
    1742:	bc 01       	movw	r22, r24
    1744:	cd 01       	movw	r24, r26
    1746:	20 e0       	ldi	r18, 0x00	; 0
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	40 e8       	ldi	r20, 0x80	; 128
    174c:	58 e4       	ldi	r21, 0x48	; 72
    174e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1752:	dc 01       	movw	r26, r24
    1754:	cb 01       	movw	r24, r22
    1756:	bc 01       	movw	r22, r24
    1758:	cd 01       	movw	r24, r26
    175a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    175e:	dc 01       	movw	r26, r24
    1760:	cb 01       	movw	r24, r22
    1762:	80 93 70 01 	sts	0x0170, r24
    1766:	90 93 71 01 	sts	0x0171, r25
    176a:	a0 93 72 01 	sts	0x0172, r26
    176e:	b0 93 73 01 	sts	0x0173, r27

	 /*clock select prescaler with division factor 1024
	  *by assigning 101 to first 3 bits in TCCR0 register*/
	SET_BIT(TCCR0,0);
    1772:	a3 e5       	ldi	r26, 0x53	; 83
    1774:	b0 e0       	ldi	r27, 0x00	; 0
    1776:	e3 e5       	ldi	r30, 0x53	; 83
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	81 60       	ori	r24, 0x01	; 1
    177e:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,1);
    1780:	a3 e5       	ldi	r26, 0x53	; 83
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	e3 e5       	ldi	r30, 0x53	; 83
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	8d 7f       	andi	r24, 0xFD	; 253
    178c:	8c 93       	st	X, r24
	SET_BIT(TCCR0,2);
    178e:	a3 e5       	ldi	r26, 0x53	; 83
    1790:	b0 e0       	ldi	r27, 0x00	; 0
    1792:	e3 e5       	ldi	r30, 0x53	; 83
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	80 81       	ld	r24, Z
    1798:	84 60       	ori	r24, 0x04	; 4
    179a:	8c 93       	st	X, r24

	/*for Overflow Interrupt Enable bit 0 (TOIE0) in TIMSK register*/
	SET_BIT(TIMSK,0);
    179c:	a9 e5       	ldi	r26, 0x59	; 89
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	e9 e5       	ldi	r30, 0x59	; 89
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	81 60       	ori	r24, 0x01	; 1
    17a8:	8c 93       	st	X, r24

	/*for counter Initialization by zero*/
	ASSIGN_PORT(TCNT0,0x00);
    17aa:	e2 e5       	ldi	r30, 0x52	; 82
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	e2 e5       	ldi	r30, 0x52	; 82
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	10 82       	st	Z, r1
    17b6:	a2 e5       	ldi	r26, 0x52	; 82
    17b8:	b0 e0       	ldi	r27, 0x00	; 0
    17ba:	e2 e5       	ldi	r30, 0x52	; 82
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	80 81       	ld	r24, Z
    17c0:	8c 93       	st	X, r24

	/*enable global interrupt*/
	SET_BIT(SREG,7);
    17c2:	af e5       	ldi	r26, 0x5F	; 95
    17c4:	b0 e0       	ldi	r27, 0x00	; 0
    17c6:	ef e5       	ldi	r30, 0x5F	; 95
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	80 81       	ld	r24, Z
    17cc:	80 68       	ori	r24, 0x80	; 128
    17ce:	8c 93       	st	X, r24
}
    17d0:	0f 90       	pop	r0
    17d2:	0f 90       	pop	r0
    17d4:	cf 91       	pop	r28
    17d6:	df 91       	pop	r29
    17d8:	08 95       	ret

000017da <__vector_11>:
/*Timer/Counter0 Overflow interrupt vector table number 12-1=11*/
void __vector_11(void) __attribute__((signal,__INTR_ATTRS));

/*Timer/Counter0 Overflow ISR*/
void __vector_11(void)
{
    17da:	1f 92       	push	r1
    17dc:	0f 92       	push	r0
    17de:	0f b6       	in	r0, 0x3f	; 63
    17e0:	0f 92       	push	r0
    17e2:	11 24       	eor	r1, r1
    17e4:	2f 93       	push	r18
    17e6:	3f 93       	push	r19
    17e8:	4f 93       	push	r20
    17ea:	5f 93       	push	r21
    17ec:	6f 93       	push	r22
    17ee:	7f 93       	push	r23
    17f0:	8f 93       	push	r24
    17f2:	9f 93       	push	r25
    17f4:	af 93       	push	r26
    17f6:	bf 93       	push	r27
    17f8:	ef 93       	push	r30
    17fa:	ff 93       	push	r31
    17fc:	df 93       	push	r29
    17fe:	cf 93       	push	r28
    1800:	cd b7       	in	r28, 0x3d	; 61
    1802:	de b7       	in	r29, 0x3e	; 62
	Global_u8ISRFlag++;
    1804:	80 91 6e 01 	lds	r24, 0x016E
    1808:	8f 5f       	subi	r24, 0xFF	; 255
    180a:	80 93 6e 01 	sts	0x016E, r24

	/*for checking # of overflows*/
	if(Global_u8ISRFlag==(Global_u32NumberOfOverFlows-1))
    180e:	80 91 6e 01 	lds	r24, 0x016E
    1812:	28 2f       	mov	r18, r24
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	40 e0       	ldi	r20, 0x00	; 0
    1818:	50 e0       	ldi	r21, 0x00	; 0
    181a:	80 91 70 01 	lds	r24, 0x0170
    181e:	90 91 71 01 	lds	r25, 0x0171
    1822:	a0 91 72 01 	lds	r26, 0x0172
    1826:	b0 91 73 01 	lds	r27, 0x0173
    182a:	01 97       	sbiw	r24, 0x01	; 1
    182c:	a1 09       	sbc	r26, r1
    182e:	b1 09       	sbc	r27, r1
    1830:	28 17       	cp	r18, r24
    1832:	39 07       	cpc	r19, r25
    1834:	4a 07       	cpc	r20, r26
    1836:	5b 07       	cpc	r21, r27
    1838:	39 f4       	brne	.+14     	; 0x1848 <__vector_11+0x6e>
	{
		Global_vidPointerToFunction();
    183a:	e0 91 74 01 	lds	r30, 0x0174
    183e:	f0 91 75 01 	lds	r31, 0x0175
    1842:	09 95       	icall
		Global_u8ISRFlag=0;
    1844:	10 92 6e 01 	sts	0x016E, r1
	/*useless*/
	else
	{

	}
}
    1848:	cf 91       	pop	r28
    184a:	df 91       	pop	r29
    184c:	ff 91       	pop	r31
    184e:	ef 91       	pop	r30
    1850:	bf 91       	pop	r27
    1852:	af 91       	pop	r26
    1854:	9f 91       	pop	r25
    1856:	8f 91       	pop	r24
    1858:	7f 91       	pop	r23
    185a:	6f 91       	pop	r22
    185c:	5f 91       	pop	r21
    185e:	4f 91       	pop	r20
    1860:	3f 91       	pop	r19
    1862:	2f 91       	pop	r18
    1864:	0f 90       	pop	r0
    1866:	0f be       	out	0x3f, r0	; 63
    1868:	0f 90       	pop	r0
    186a:	1f 90       	pop	r1
    186c:	18 95       	reti

0000186e <TIMER0_vidCTCModeInitialization>:
 *****                timer 0 Clear Timer on Compare Match (CTC) mode                *****
 *--------------------------------------------------------------------------------------*/

/*timer 0 Clear Timer on Compare Match (CTC) mode initialization*/
void TIMER0_vidCTCModeInitialization(u8 Copy_u8EventTime,u8 Copy_u8OutputComparevalue)
{
    186e:	ef 92       	push	r14
    1870:	ff 92       	push	r15
    1872:	0f 93       	push	r16
    1874:	1f 93       	push	r17
    1876:	df 93       	push	r29
    1878:	cf 93       	push	r28
    187a:	00 d0       	rcall	.+0      	; 0x187c <TIMER0_vidCTCModeInitialization+0xe>
    187c:	00 d0       	rcall	.+0      	; 0x187e <TIMER0_vidCTCModeInitialization+0x10>
    187e:	cd b7       	in	r28, 0x3d	; 61
    1880:	de b7       	in	r29, 0x3e	; 62
    1882:	89 83       	std	Y+1, r24	; 0x01
    1884:	6a 83       	std	Y+2, r22	; 0x02
	 *clock cycle time=85us
	 *overflow time=85us*(128 for example)Copy_u8OutputComparevalue=0.01088 sec
	 *event time=1 sec
	 *# of overflows=event time/overflow time=1/0.01088=91 overflows
	 *so every 91 overflows ; event(ex. Toggling a LED) will take place*/
	Global_u32NumberOfOverFlows=((Copy_u8EventTime*12000000)/(1024.0*Copy_u8OutputComparevalue));
    1886:	89 81       	ldd	r24, Y+1	; 0x01
    1888:	88 2f       	mov	r24, r24
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	a0 e0       	ldi	r26, 0x00	; 0
    188e:	b0 e0       	ldi	r27, 0x00	; 0
    1890:	20 e0       	ldi	r18, 0x00	; 0
    1892:	3b e1       	ldi	r19, 0x1B	; 27
    1894:	47 eb       	ldi	r20, 0xB7	; 183
    1896:	50 e0       	ldi	r21, 0x00	; 0
    1898:	bc 01       	movw	r22, r24
    189a:	cd 01       	movw	r24, r26
    189c:	0e 94 41 10 	call	0x2082	; 0x2082 <__mulsi3>
    18a0:	dc 01       	movw	r26, r24
    18a2:	cb 01       	movw	r24, r22
    18a4:	bc 01       	movw	r22, r24
    18a6:	cd 01       	movw	r24, r26
    18a8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    18ac:	7b 01       	movw	r14, r22
    18ae:	8c 01       	movw	r16, r24
    18b0:	8a 81       	ldd	r24, Y+2	; 0x02
    18b2:	88 2f       	mov	r24, r24
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	aa 27       	eor	r26, r26
    18b8:	97 fd       	sbrc	r25, 7
    18ba:	a0 95       	com	r26
    18bc:	ba 2f       	mov	r27, r26
    18be:	bc 01       	movw	r22, r24
    18c0:	cd 01       	movw	r24, r26
    18c2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    18c6:	dc 01       	movw	r26, r24
    18c8:	cb 01       	movw	r24, r22
    18ca:	bc 01       	movw	r22, r24
    18cc:	cd 01       	movw	r24, r26
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	40 e8       	ldi	r20, 0x80	; 128
    18d4:	54 e4       	ldi	r21, 0x44	; 68
    18d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18da:	dc 01       	movw	r26, r24
    18dc:	cb 01       	movw	r24, r22
    18de:	9c 01       	movw	r18, r24
    18e0:	ad 01       	movw	r20, r26
    18e2:	c8 01       	movw	r24, r16
    18e4:	b7 01       	movw	r22, r14
    18e6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    18ea:	dc 01       	movw	r26, r24
    18ec:	cb 01       	movw	r24, r22
    18ee:	bc 01       	movw	r22, r24
    18f0:	cd 01       	movw	r24, r26
    18f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18f6:	dc 01       	movw	r26, r24
    18f8:	cb 01       	movw	r24, r22
    18fa:	80 93 70 01 	sts	0x0170, r24
    18fe:	90 93 71 01 	sts	0x0171, r25
    1902:	a0 93 72 01 	sts	0x0172, r26
    1906:	b0 93 73 01 	sts	0x0173, r27

	 /*clock select prescaler with division factor 1024
	  *by assigning 101 to first 3 bits in TCCR0 register*/
	SET_BIT(TCCR0,0);
    190a:	a3 e5       	ldi	r26, 0x53	; 83
    190c:	b0 e0       	ldi	r27, 0x00	; 0
    190e:	e3 e5       	ldi	r30, 0x53	; 83
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	80 81       	ld	r24, Z
    1914:	81 60       	ori	r24, 0x01	; 1
    1916:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,1);
    1918:	a3 e5       	ldi	r26, 0x53	; 83
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	e3 e5       	ldi	r30, 0x53	; 83
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	8d 7f       	andi	r24, 0xFD	; 253
    1924:	8c 93       	st	X, r24
	SET_BIT(TCCR0,2);
    1926:	a3 e5       	ldi	r26, 0x53	; 83
    1928:	b0 e0       	ldi	r27, 0x00	; 0
    192a:	e3 e5       	ldi	r30, 0x53	; 83
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	80 81       	ld	r24, Z
    1930:	84 60       	ori	r24, 0x04	; 4
    1932:	8c 93       	st	X, r24

	/*for Output Compare Match Interrupt Enable bit 1 (OCIE0) in TIMSK register*/
	SET_BIT(TIMSK,1);
    1934:	a9 e5       	ldi	r26, 0x59	; 89
    1936:	b0 e0       	ldi	r27, 0x00	; 0
    1938:	e9 e5       	ldi	r30, 0x59	; 89
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	80 81       	ld	r24, Z
    193e:	82 60       	ori	r24, 0x02	; 2
    1940:	8c 93       	st	X, r24

	/*for counter Initialization by zero*/
	ASSIGN_PORT(TCNT0,0x00);
    1942:	e2 e5       	ldi	r30, 0x52	; 82
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
    1948:	e2 e5       	ldi	r30, 0x52	; 82
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	10 82       	st	Z, r1
    194e:	a2 e5       	ldi	r26, 0x52	; 82
    1950:	b0 e0       	ldi	r27, 0x00	; 0
    1952:	e2 e5       	ldi	r30, 0x52	; 82
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	80 81       	ld	r24, Z
    1958:	8c 93       	st	X, r24

	/*for Waveform Generation Mode (CTC mode)
	 *set bit 3 (WGM01) and clear bit 6 (WGM00) in TCCR0 register*/
	SET_BIT(TCCR0,3);
    195a:	a3 e5       	ldi	r26, 0x53	; 83
    195c:	b0 e0       	ldi	r27, 0x00	; 0
    195e:	e3 e5       	ldi	r30, 0x53	; 83
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	88 60       	ori	r24, 0x08	; 8
    1966:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,6);
    1968:	a3 e5       	ldi	r26, 0x53	; 83
    196a:	b0 e0       	ldi	r27, 0x00	; 0
    196c:	e3 e5       	ldi	r30, 0x53	; 83
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	80 81       	ld	r24, Z
    1972:	8f 7b       	andi	r24, 0xBF	; 191
    1974:	8c 93       	st	X, r24

	/*for Compare Output Mode (CTC) bits 4&5 for toggling OC0 on Compare Match*/
	SET_BIT(TCCR0,4);
    1976:	a3 e5       	ldi	r26, 0x53	; 83
    1978:	b0 e0       	ldi	r27, 0x00	; 0
    197a:	e3 e5       	ldi	r30, 0x53	; 83
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 81       	ld	r24, Z
    1980:	80 61       	ori	r24, 0x10	; 16
    1982:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,5);
    1984:	a3 e5       	ldi	r26, 0x53	; 83
    1986:	b0 e0       	ldi	r27, 0x00	; 0
    1988:	e3 e5       	ldi	r30, 0x53	; 83
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	80 81       	ld	r24, Z
    198e:	8f 7d       	andi	r24, 0xDF	; 223
    1990:	8c 93       	st	X, r24

	/*setting value of Output Compare Register OCR0 (value to be compared to TCNT0 counter register)*/
	ASSIGN_PORT(OCR0,Copy_u8OutputComparevalue);
    1992:	ec e5       	ldi	r30, 0x5C	; 92
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	ec e5       	ldi	r30, 0x5C	; 92
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	10 82       	st	Z, r1
    199e:	ac e5       	ldi	r26, 0x5C	; 92
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	ec e5       	ldi	r30, 0x5C	; 92
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	90 81       	ld	r25, Z
    19a8:	8a 81       	ldd	r24, Y+2	; 0x02
    19aa:	89 2b       	or	r24, r25
    19ac:	8c 93       	st	X, r24

	/*enable global interrupt*/
	SET_BIT(SREG,7);
    19ae:	af e5       	ldi	r26, 0x5F	; 95
    19b0:	b0 e0       	ldi	r27, 0x00	; 0
    19b2:	ef e5       	ldi	r30, 0x5F	; 95
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	80 81       	ld	r24, Z
    19b8:	80 68       	ori	r24, 0x80	; 128
    19ba:	8c 93       	st	X, r24
}
    19bc:	0f 90       	pop	r0
    19be:	0f 90       	pop	r0
    19c0:	0f 90       	pop	r0
    19c2:	0f 90       	pop	r0
    19c4:	cf 91       	pop	r28
    19c6:	df 91       	pop	r29
    19c8:	1f 91       	pop	r17
    19ca:	0f 91       	pop	r16
    19cc:	ff 90       	pop	r15
    19ce:	ef 90       	pop	r14
    19d0:	08 95       	ret

000019d2 <__vector_10>:
/*Timer/Counter0 Compare Match (CTC) interrupt vector table number 11-1=10*/
void __vector_10(void) __attribute__((signal,__INTR_ATTRS));

/*Timer/Counter0 Compare Match (CTC) ISR*/
void __vector_10(void)
{
    19d2:	1f 92       	push	r1
    19d4:	0f 92       	push	r0
    19d6:	0f b6       	in	r0, 0x3f	; 63
    19d8:	0f 92       	push	r0
    19da:	11 24       	eor	r1, r1
    19dc:	2f 93       	push	r18
    19de:	3f 93       	push	r19
    19e0:	4f 93       	push	r20
    19e2:	5f 93       	push	r21
    19e4:	6f 93       	push	r22
    19e6:	7f 93       	push	r23
    19e8:	8f 93       	push	r24
    19ea:	9f 93       	push	r25
    19ec:	af 93       	push	r26
    19ee:	bf 93       	push	r27
    19f0:	ef 93       	push	r30
    19f2:	ff 93       	push	r31
    19f4:	df 93       	push	r29
    19f6:	cf 93       	push	r28
    19f8:	cd b7       	in	r28, 0x3d	; 61
    19fa:	de b7       	in	r29, 0x3e	; 62
	Global_u8ISRFlag++;
    19fc:	80 91 6e 01 	lds	r24, 0x016E
    1a00:	8f 5f       	subi	r24, 0xFF	; 255
    1a02:	80 93 6e 01 	sts	0x016E, r24

	/*for checking # of overflows*/
	if(Global_u8ISRFlag==(Global_u32NumberOfOverFlows-1))
    1a06:	80 91 6e 01 	lds	r24, 0x016E
    1a0a:	28 2f       	mov	r18, r24
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	40 e0       	ldi	r20, 0x00	; 0
    1a10:	50 e0       	ldi	r21, 0x00	; 0
    1a12:	80 91 70 01 	lds	r24, 0x0170
    1a16:	90 91 71 01 	lds	r25, 0x0171
    1a1a:	a0 91 72 01 	lds	r26, 0x0172
    1a1e:	b0 91 73 01 	lds	r27, 0x0173
    1a22:	01 97       	sbiw	r24, 0x01	; 1
    1a24:	a1 09       	sbc	r26, r1
    1a26:	b1 09       	sbc	r27, r1
    1a28:	28 17       	cp	r18, r24
    1a2a:	39 07       	cpc	r19, r25
    1a2c:	4a 07       	cpc	r20, r26
    1a2e:	5b 07       	cpc	r21, r27
    1a30:	39 f4       	brne	.+14     	; 0x1a40 <__vector_10+0x6e>
	{
		Global_vidPointerToFunction();
    1a32:	e0 91 74 01 	lds	r30, 0x0174
    1a36:	f0 91 75 01 	lds	r31, 0x0175
    1a3a:	09 95       	icall
		Global_u8ISRFlag=0;
    1a3c:	10 92 6e 01 	sts	0x016E, r1
	/*useless*/
	else
	{

	}
}
    1a40:	cf 91       	pop	r28
    1a42:	df 91       	pop	r29
    1a44:	ff 91       	pop	r31
    1a46:	ef 91       	pop	r30
    1a48:	bf 91       	pop	r27
    1a4a:	af 91       	pop	r26
    1a4c:	9f 91       	pop	r25
    1a4e:	8f 91       	pop	r24
    1a50:	7f 91       	pop	r23
    1a52:	6f 91       	pop	r22
    1a54:	5f 91       	pop	r21
    1a56:	4f 91       	pop	r20
    1a58:	3f 91       	pop	r19
    1a5a:	2f 91       	pop	r18
    1a5c:	0f 90       	pop	r0
    1a5e:	0f be       	out	0x3f, r0	; 63
    1a60:	0f 90       	pop	r0
    1a62:	1f 90       	pop	r1
    1a64:	18 95       	reti

00001a66 <TIMER0_vidFastPWMModeInitialization>:
 *****                timer 0 Fast PWM Mode                      *****
 *------------------------------------------------------------------*/

/*timer 0 Fast PWM mode initialization*/
void TIMER0_vidFastPWMModeInitialization(u8 Copy_u8OutputCompareDutyCycle)
{
    1a66:	df 93       	push	r29
    1a68:	cf 93       	push	r28
    1a6a:	00 d0       	rcall	.+0      	; 0x1a6c <TIMER0_vidFastPWMModeInitialization+0x6>
    1a6c:	00 d0       	rcall	.+0      	; 0x1a6e <TIMER0_vidFastPWMModeInitialization+0x8>
    1a6e:	cd b7       	in	r28, 0x3d	; 61
    1a70:	de b7       	in	r29, 0x3e	; 62
    1a72:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8OutputComparevalue;
	/*for getting the corresponding value to the duty cycle*/
	Local_u8OutputComparevalue=(Copy_u8OutputCompareDutyCycle*255.0)/100.0;
    1a74:	8a 81       	ldd	r24, Y+2	; 0x02
    1a76:	88 2f       	mov	r24, r24
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	aa 27       	eor	r26, r26
    1a7c:	97 fd       	sbrc	r25, 7
    1a7e:	a0 95       	com	r26
    1a80:	ba 2f       	mov	r27, r26
    1a82:	bc 01       	movw	r22, r24
    1a84:	cd 01       	movw	r24, r26
    1a86:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	bc 01       	movw	r22, r24
    1a90:	cd 01       	movw	r24, r26
    1a92:	20 e0       	ldi	r18, 0x00	; 0
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	4f e7       	ldi	r20, 0x7F	; 127
    1a98:	53 e4       	ldi	r21, 0x43	; 67
    1a9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a9e:	dc 01       	movw	r26, r24
    1aa0:	cb 01       	movw	r24, r22
    1aa2:	bc 01       	movw	r22, r24
    1aa4:	cd 01       	movw	r24, r26
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	48 ec       	ldi	r20, 0xC8	; 200
    1aac:	52 e4       	ldi	r21, 0x42	; 66
    1aae:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ab2:	dc 01       	movw	r26, r24
    1ab4:	cb 01       	movw	r24, r22
    1ab6:	bc 01       	movw	r22, r24
    1ab8:	cd 01       	movw	r24, r26
    1aba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1abe:	dc 01       	movw	r26, r24
    1ac0:	cb 01       	movw	r24, r22
    1ac2:	89 83       	std	Y+1, r24	; 0x01

	 /*clock select prescaler with division factor 1024
	  *by assigning 101 to first 3 bits in TCCR0 register*/
	SET_BIT(TCCR0,0);
    1ac4:	a3 e5       	ldi	r26, 0x53	; 83
    1ac6:	b0 e0       	ldi	r27, 0x00	; 0
    1ac8:	e3 e5       	ldi	r30, 0x53	; 83
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	80 81       	ld	r24, Z
    1ace:	81 60       	ori	r24, 0x01	; 1
    1ad0:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,1);
    1ad2:	a3 e5       	ldi	r26, 0x53	; 83
    1ad4:	b0 e0       	ldi	r27, 0x00	; 0
    1ad6:	e3 e5       	ldi	r30, 0x53	; 83
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	8d 7f       	andi	r24, 0xFD	; 253
    1ade:	8c 93       	st	X, r24
	SET_BIT(TCCR0,2);
    1ae0:	a3 e5       	ldi	r26, 0x53	; 83
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	e3 e5       	ldi	r30, 0x53	; 83
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	84 60       	ori	r24, 0x04	; 4
    1aec:	8c 93       	st	X, r24

	/*for counter Initialization by zero*/
	ASSIGN_PORT(TCNT0,0x00);
    1aee:	e2 e5       	ldi	r30, 0x52	; 82
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	e2 e5       	ldi	r30, 0x52	; 82
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	10 82       	st	Z, r1
    1afa:	a2 e5       	ldi	r26, 0x52	; 82
    1afc:	b0 e0       	ldi	r27, 0x00	; 0
    1afe:	e2 e5       	ldi	r30, 0x52	; 82
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	8c 93       	st	X, r24

	/*setting value of Output Compare Register OCR0 (value to be compared to TCNT0 counter register)
	 *128 for 50% duty cycle */
	ASSIGN_PORT(OCR0,Local_u8OutputComparevalue);
    1b06:	ec e5       	ldi	r30, 0x5C	; 92
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	80 81       	ld	r24, Z
    1b0c:	ec e5       	ldi	r30, 0x5C	; 92
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	10 82       	st	Z, r1
    1b12:	ac e5       	ldi	r26, 0x5C	; 92
    1b14:	b0 e0       	ldi	r27, 0x00	; 0
    1b16:	ec e5       	ldi	r30, 0x5C	; 92
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	90 81       	ld	r25, Z
    1b1c:	89 81       	ldd	r24, Y+1	; 0x01
    1b1e:	89 2b       	or	r24, r25
    1b20:	8c 93       	st	X, r24

	/*for Waveform Generation Mode (Fast PWM mode)
	 *set bit 3 (WGM01) and set bit 6 (WGM00) in TCCR0 register*/
	SET_BIT(TCCR0,3);
    1b22:	a3 e5       	ldi	r26, 0x53	; 83
    1b24:	b0 e0       	ldi	r27, 0x00	; 0
    1b26:	e3 e5       	ldi	r30, 0x53	; 83
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
    1b2c:	88 60       	ori	r24, 0x08	; 8
    1b2e:	8c 93       	st	X, r24
	SET_BIT(TCCR0,6);
    1b30:	a3 e5       	ldi	r26, 0x53	; 83
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	e3 e5       	ldi	r30, 0x53	; 83
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	80 64       	ori	r24, 0x40	; 64
    1b3c:	8c 93       	st	X, r24

	/*for Compare Output Mode (Fast PWM Mode) bits 4&5 for clearing OC0 on Compare Match
	 *Setting OC0 at BOTTOM (inverting mode)*/
	CLEAR_BIT(TCCR0,4);
    1b3e:	a3 e5       	ldi	r26, 0x53	; 83
    1b40:	b0 e0       	ldi	r27, 0x00	; 0
    1b42:	e3 e5       	ldi	r30, 0x53	; 83
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	8f 7e       	andi	r24, 0xEF	; 239
    1b4a:	8c 93       	st	X, r24
	SET_BIT(TCCR0,5);
    1b4c:	a3 e5       	ldi	r26, 0x53	; 83
    1b4e:	b0 e0       	ldi	r27, 0x00	; 0
    1b50:	e3 e5       	ldi	r30, 0x53	; 83
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	80 62       	ori	r24, 0x20	; 32
    1b58:	8c 93       	st	X, r24
}
    1b5a:	0f 90       	pop	r0
    1b5c:	0f 90       	pop	r0
    1b5e:	0f 90       	pop	r0
    1b60:	0f 90       	pop	r0
    1b62:	cf 91       	pop	r28
    1b64:	df 91       	pop	r29
    1b66:	08 95       	ret

00001b68 <TIMER0_vidPhaseCorrectPWMModeInitialization>:
 *****                timer 0 Phase Correct PWM Mode                          *****
 *--------------------------------------------------------------------------------*/

/*timer 0 Phase Correct PWM mode initialization*/
void TIMER0_vidPhaseCorrectPWMModeInitialization(u8 Copy_u8OutputCompareDutyCycle)
{
    1b68:	df 93       	push	r29
    1b6a:	cf 93       	push	r28
    1b6c:	00 d0       	rcall	.+0      	; 0x1b6e <TIMER0_vidPhaseCorrectPWMModeInitialization+0x6>
    1b6e:	00 d0       	rcall	.+0      	; 0x1b70 <TIMER0_vidPhaseCorrectPWMModeInitialization+0x8>
    1b70:	cd b7       	in	r28, 0x3d	; 61
    1b72:	de b7       	in	r29, 0x3e	; 62
    1b74:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8OutputComparevalue;
	/*for getting the corresponding value to the duty cycle*/
	Local_u8OutputComparevalue=((100-Copy_u8OutputCompareDutyCycle)*255.0)/100.0;
    1b76:	8a 81       	ldd	r24, Y+2	; 0x02
    1b78:	28 2f       	mov	r18, r24
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	84 e6       	ldi	r24, 0x64	; 100
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	82 1b       	sub	r24, r18
    1b82:	93 0b       	sbc	r25, r19
    1b84:	aa 27       	eor	r26, r26
    1b86:	97 fd       	sbrc	r25, 7
    1b88:	a0 95       	com	r26
    1b8a:	ba 2f       	mov	r27, r26
    1b8c:	bc 01       	movw	r22, r24
    1b8e:	cd 01       	movw	r24, r26
    1b90:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1b94:	dc 01       	movw	r26, r24
    1b96:	cb 01       	movw	r24, r22
    1b98:	bc 01       	movw	r22, r24
    1b9a:	cd 01       	movw	r24, r26
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	4f e7       	ldi	r20, 0x7F	; 127
    1ba2:	53 e4       	ldi	r21, 0x43	; 67
    1ba4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba8:	dc 01       	movw	r26, r24
    1baa:	cb 01       	movw	r24, r22
    1bac:	bc 01       	movw	r22, r24
    1bae:	cd 01       	movw	r24, r26
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	48 ec       	ldi	r20, 0xC8	; 200
    1bb6:	52 e4       	ldi	r21, 0x42	; 66
    1bb8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1bbc:	dc 01       	movw	r26, r24
    1bbe:	cb 01       	movw	r24, r22
    1bc0:	bc 01       	movw	r22, r24
    1bc2:	cd 01       	movw	r24, r26
    1bc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	89 83       	std	Y+1, r24	; 0x01

	 /*clock select prescaler with division factor 1024
	  *by assigning 101 to first 3 bits in TCCR0 register*/
	SET_BIT(TCCR0,0);
    1bce:	a3 e5       	ldi	r26, 0x53	; 83
    1bd0:	b0 e0       	ldi	r27, 0x00	; 0
    1bd2:	e3 e5       	ldi	r30, 0x53	; 83
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	80 81       	ld	r24, Z
    1bd8:	81 60       	ori	r24, 0x01	; 1
    1bda:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,1);
    1bdc:	a3 e5       	ldi	r26, 0x53	; 83
    1bde:	b0 e0       	ldi	r27, 0x00	; 0
    1be0:	e3 e5       	ldi	r30, 0x53	; 83
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	80 81       	ld	r24, Z
    1be6:	8d 7f       	andi	r24, 0xFD	; 253
    1be8:	8c 93       	st	X, r24
	SET_BIT(TCCR0,2);
    1bea:	a3 e5       	ldi	r26, 0x53	; 83
    1bec:	b0 e0       	ldi	r27, 0x00	; 0
    1bee:	e3 e5       	ldi	r30, 0x53	; 83
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	80 81       	ld	r24, Z
    1bf4:	84 60       	ori	r24, 0x04	; 4
    1bf6:	8c 93       	st	X, r24

	/*for counter Initialization by zero*/
	ASSIGN_PORT(TCNT0,0x00);
    1bf8:	e2 e5       	ldi	r30, 0x52	; 82
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	80 81       	ld	r24, Z
    1bfe:	e2 e5       	ldi	r30, 0x52	; 82
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	10 82       	st	Z, r1
    1c04:	a2 e5       	ldi	r26, 0x52	; 82
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	e2 e5       	ldi	r30, 0x52	; 82
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	8c 93       	st	X, r24

	/*setting value of Output Compare Register OCR0 (value to be compared to TCNT0 counter register)
	 *128 for 50% duty cycle */
	ASSIGN_PORT(OCR0,Local_u8OutputComparevalue);
    1c10:	ec e5       	ldi	r30, 0x5C	; 92
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	80 81       	ld	r24, Z
    1c16:	ec e5       	ldi	r30, 0x5C	; 92
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	10 82       	st	Z, r1
    1c1c:	ac e5       	ldi	r26, 0x5C	; 92
    1c1e:	b0 e0       	ldi	r27, 0x00	; 0
    1c20:	ec e5       	ldi	r30, 0x5C	; 92
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	90 81       	ld	r25, Z
    1c26:	89 81       	ldd	r24, Y+1	; 0x01
    1c28:	89 2b       	or	r24, r25
    1c2a:	8c 93       	st	X, r24

	/*for Waveform Generation Mode (Phase Correct PWM mode)
	 *clear bit 3 (WGM01) and set bit 6 (WGM00) in TCCR0 register*/
	CLEAR_BIT(TCCR0,3);
    1c2c:	a3 e5       	ldi	r26, 0x53	; 83
    1c2e:	b0 e0       	ldi	r27, 0x00	; 0
    1c30:	e3 e5       	ldi	r30, 0x53	; 83
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	80 81       	ld	r24, Z
    1c36:	87 7f       	andi	r24, 0xF7	; 247
    1c38:	8c 93       	st	X, r24
	SET_BIT(TCCR0,6);
    1c3a:	a3 e5       	ldi	r26, 0x53	; 83
    1c3c:	b0 e0       	ldi	r27, 0x00	; 0
    1c3e:	e3 e5       	ldi	r30, 0x53	; 83
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	80 64       	ori	r24, 0x40	; 64
    1c46:	8c 93       	st	X, r24

	/*for Compare Output Mode (Phase Correct PWM mode) bits 4&5 for Settting OC0 on Compare Match
	 *when up-counting Clearing OC0 on Compare Match when downcounting*/
	SET_BIT(TCCR0,4);
    1c48:	a3 e5       	ldi	r26, 0x53	; 83
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	e3 e5       	ldi	r30, 0x53	; 83
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	80 81       	ld	r24, Z
    1c52:	80 61       	ori	r24, 0x10	; 16
    1c54:	8c 93       	st	X, r24
	SET_BIT(TCCR0,5);
    1c56:	a3 e5       	ldi	r26, 0x53	; 83
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	e3 e5       	ldi	r30, 0x53	; 83
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	80 62       	ori	r24, 0x20	; 32
    1c62:	8c 93       	st	X, r24
}
    1c64:	0f 90       	pop	r0
    1c66:	0f 90       	pop	r0
    1c68:	0f 90       	pop	r0
    1c6a:	0f 90       	pop	r0
    1c6c:	cf 91       	pop	r28
    1c6e:	df 91       	pop	r29
    1c70:	08 95       	ret

00001c72 <TIMER0_vidSetCallBack>:

/*timer 0 Set Call Back
 *for getting the address of an upper layer(HAL)'s function
 *for calling it or modify it*/
void TIMER0_vidSetCallBack(void (*Local_vidPointerToFunction) (void))
{
    1c72:	df 93       	push	r29
    1c74:	cf 93       	push	r28
    1c76:	00 d0       	rcall	.+0      	; 0x1c78 <TIMER0_vidSetCallBack+0x6>
    1c78:	cd b7       	in	r28, 0x3d	; 61
    1c7a:	de b7       	in	r29, 0x3e	; 62
    1c7c:	9a 83       	std	Y+2, r25	; 0x02
    1c7e:	89 83       	std	Y+1, r24	; 0x01
	Global_vidPointerToFunction=Local_vidPointerToFunction;
    1c80:	89 81       	ldd	r24, Y+1	; 0x01
    1c82:	9a 81       	ldd	r25, Y+2	; 0x02
    1c84:	90 93 75 01 	sts	0x0175, r25
    1c88:	80 93 74 01 	sts	0x0174, r24
}
    1c8c:	0f 90       	pop	r0
    1c8e:	0f 90       	pop	r0
    1c90:	cf 91       	pop	r28
    1c92:	df 91       	pop	r29
    1c94:	08 95       	ret

00001c96 <main>:
#include "util/delay.h"

#define delay 260

int main (void)
{
    1c96:	df 93       	push	r29
    1c98:	cf 93       	push	r28
    1c9a:	cd b7       	in	r28, 0x3d	; 61
    1c9c:	de b7       	in	r29, 0x3e	; 62
    1c9e:	e9 97       	sbiw	r28, 0x39	; 57
    1ca0:	0f b6       	in	r0, 0x3f	; 63
    1ca2:	f8 94       	cli
    1ca4:	de bf       	out	0x3e, r29	; 62
    1ca6:	0f be       	out	0x3f, r0	; 63
    1ca8:	cd bf       	out	0x3d, r28	; 61
	/*for OC0 pin*/
	DIO_vidTimer0PinConfigurations();
    1caa:	0e 94 38 0b 	call	0x1670	; 0x1670 <DIO_vidTimer0PinConfigurations>

	volatile static u8 value=0;

	while(1)
	{
		TIMER0_vidFastPWMModeInitialization(value);
    1cae:	80 91 6f 01 	lds	r24, 0x016F
    1cb2:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <TIMER0_vidFastPWMModeInitialization>
    1cb6:	80 e0       	ldi	r24, 0x00	; 0
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	a2 e8       	ldi	r26, 0x82	; 130
    1cbc:	b3 e4       	ldi	r27, 0x43	; 67
    1cbe:	8d ab       	std	Y+53, r24	; 0x35
    1cc0:	9e ab       	std	Y+54, r25	; 0x36
    1cc2:	af ab       	std	Y+55, r26	; 0x37
    1cc4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cc6:	6d a9       	ldd	r22, Y+53	; 0x35
    1cc8:	7e a9       	ldd	r23, Y+54	; 0x36
    1cca:	8f a9       	ldd	r24, Y+55	; 0x37
    1ccc:	98 ad       	ldd	r25, Y+56	; 0x38
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	4a e7       	ldi	r20, 0x7A	; 122
    1cd4:	53 e4       	ldi	r21, 0x43	; 67
    1cd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	89 ab       	std	Y+49, r24	; 0x31
    1ce0:	9a ab       	std	Y+50, r25	; 0x32
    1ce2:	ab ab       	std	Y+51, r26	; 0x33
    1ce4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ce6:	69 a9       	ldd	r22, Y+49	; 0x31
    1ce8:	7a a9       	ldd	r23, Y+50	; 0x32
    1cea:	8b a9       	ldd	r24, Y+51	; 0x33
    1cec:	9c a9       	ldd	r25, Y+52	; 0x34
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	40 e8       	ldi	r20, 0x80	; 128
    1cf4:	5f e3       	ldi	r21, 0x3F	; 63
    1cf6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cfa:	88 23       	and	r24, r24
    1cfc:	2c f4       	brge	.+10     	; 0x1d08 <main+0x72>
		__ticks = 1;
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	98 ab       	std	Y+48, r25	; 0x30
    1d04:	8f a7       	std	Y+47, r24	; 0x2f
    1d06:	3f c0       	rjmp	.+126    	; 0x1d86 <main+0xf0>
	else if (__tmp > 65535)
    1d08:	69 a9       	ldd	r22, Y+49	; 0x31
    1d0a:	7a a9       	ldd	r23, Y+50	; 0x32
    1d0c:	8b a9       	ldd	r24, Y+51	; 0x33
    1d0e:	9c a9       	ldd	r25, Y+52	; 0x34
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	3f ef       	ldi	r19, 0xFF	; 255
    1d14:	4f e7       	ldi	r20, 0x7F	; 127
    1d16:	57 e4       	ldi	r21, 0x47	; 71
    1d18:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d1c:	18 16       	cp	r1, r24
    1d1e:	4c f5       	brge	.+82     	; 0x1d72 <main+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d20:	6d a9       	ldd	r22, Y+53	; 0x35
    1d22:	7e a9       	ldd	r23, Y+54	; 0x36
    1d24:	8f a9       	ldd	r24, Y+55	; 0x37
    1d26:	98 ad       	ldd	r25, Y+56	; 0x38
    1d28:	20 e0       	ldi	r18, 0x00	; 0
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	40 e2       	ldi	r20, 0x20	; 32
    1d2e:	51 e4       	ldi	r21, 0x41	; 65
    1d30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d34:	dc 01       	movw	r26, r24
    1d36:	cb 01       	movw	r24, r22
    1d38:	bc 01       	movw	r22, r24
    1d3a:	cd 01       	movw	r24, r26
    1d3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	98 ab       	std	Y+48, r25	; 0x30
    1d46:	8f a7       	std	Y+47, r24	; 0x2f
    1d48:	0f c0       	rjmp	.+30     	; 0x1d68 <main+0xd2>
    1d4a:	89 e1       	ldi	r24, 0x19	; 25
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	9e a7       	std	Y+46, r25	; 0x2e
    1d50:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d52:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d54:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d56:	01 97       	sbiw	r24, 0x01	; 1
    1d58:	f1 f7       	brne	.-4      	; 0x1d56 <main+0xc0>
    1d5a:	9e a7       	std	Y+46, r25	; 0x2e
    1d5c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d5e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d60:	98 a9       	ldd	r25, Y+48	; 0x30
    1d62:	01 97       	sbiw	r24, 0x01	; 1
    1d64:	98 ab       	std	Y+48, r25	; 0x30
    1d66:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d68:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d6a:	98 a9       	ldd	r25, Y+48	; 0x30
    1d6c:	00 97       	sbiw	r24, 0x00	; 0
    1d6e:	69 f7       	brne	.-38     	; 0x1d4a <main+0xb4>
    1d70:	14 c0       	rjmp	.+40     	; 0x1d9a <main+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d72:	69 a9       	ldd	r22, Y+49	; 0x31
    1d74:	7a a9       	ldd	r23, Y+50	; 0x32
    1d76:	8b a9       	ldd	r24, Y+51	; 0x33
    1d78:	9c a9       	ldd	r25, Y+52	; 0x34
    1d7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d7e:	dc 01       	movw	r26, r24
    1d80:	cb 01       	movw	r24, r22
    1d82:	98 ab       	std	Y+48, r25	; 0x30
    1d84:	8f a7       	std	Y+47, r24	; 0x2f
    1d86:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d88:	98 a9       	ldd	r25, Y+48	; 0x30
    1d8a:	9c a7       	std	Y+44, r25	; 0x2c
    1d8c:	8b a7       	std	Y+43, r24	; 0x2b
    1d8e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d90:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d92:	01 97       	sbiw	r24, 0x01	; 1
    1d94:	f1 f7       	brne	.-4      	; 0x1d92 <main+0xfc>
    1d96:	9c a7       	std	Y+44, r25	; 0x2c
    1d98:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(delay);
		value++;
    1d9a:	80 91 6f 01 	lds	r24, 0x016F
    1d9e:	8f 5f       	subi	r24, 0xFF	; 255
    1da0:	80 93 6f 01 	sts	0x016F, r24

		if(value==100)
    1da4:	80 91 6f 01 	lds	r24, 0x016F
    1da8:	84 36       	cpi	r24, 0x64	; 100
    1daa:	09 f0       	breq	.+2      	; 0x1dae <main+0x118>
    1dac:	80 cf       	rjmp	.-256    	; 0x1cae <main+0x18>
    1dae:	80 e0       	ldi	r24, 0x00	; 0
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	a2 e8       	ldi	r26, 0x82	; 130
    1db4:	b3 e4       	ldi	r27, 0x43	; 67
    1db6:	8f a3       	std	Y+39, r24	; 0x27
    1db8:	98 a7       	std	Y+40, r25	; 0x28
    1dba:	a9 a7       	std	Y+41, r26	; 0x29
    1dbc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dbe:	6f a1       	ldd	r22, Y+39	; 0x27
    1dc0:	78 a5       	ldd	r23, Y+40	; 0x28
    1dc2:	89 a5       	ldd	r24, Y+41	; 0x29
    1dc4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	4a e7       	ldi	r20, 0x7A	; 122
    1dcc:	53 e4       	ldi	r21, 0x43	; 67
    1dce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	8b a3       	std	Y+35, r24	; 0x23
    1dd8:	9c a3       	std	Y+36, r25	; 0x24
    1dda:	ad a3       	std	Y+37, r26	; 0x25
    1ddc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1dde:	6b a1       	ldd	r22, Y+35	; 0x23
    1de0:	7c a1       	ldd	r23, Y+36	; 0x24
    1de2:	8d a1       	ldd	r24, Y+37	; 0x25
    1de4:	9e a1       	ldd	r25, Y+38	; 0x26
    1de6:	20 e0       	ldi	r18, 0x00	; 0
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	40 e8       	ldi	r20, 0x80	; 128
    1dec:	5f e3       	ldi	r21, 0x3F	; 63
    1dee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1df2:	88 23       	and	r24, r24
    1df4:	2c f4       	brge	.+10     	; 0x1e00 <main+0x16a>
		__ticks = 1;
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	9a a3       	std	Y+34, r25	; 0x22
    1dfc:	89 a3       	std	Y+33, r24	; 0x21
    1dfe:	3f c0       	rjmp	.+126    	; 0x1e7e <main+0x1e8>
	else if (__tmp > 65535)
    1e00:	6b a1       	ldd	r22, Y+35	; 0x23
    1e02:	7c a1       	ldd	r23, Y+36	; 0x24
    1e04:	8d a1       	ldd	r24, Y+37	; 0x25
    1e06:	9e a1       	ldd	r25, Y+38	; 0x26
    1e08:	20 e0       	ldi	r18, 0x00	; 0
    1e0a:	3f ef       	ldi	r19, 0xFF	; 255
    1e0c:	4f e7       	ldi	r20, 0x7F	; 127
    1e0e:	57 e4       	ldi	r21, 0x47	; 71
    1e10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e14:	18 16       	cp	r1, r24
    1e16:	4c f5       	brge	.+82     	; 0x1e6a <main+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e18:	6f a1       	ldd	r22, Y+39	; 0x27
    1e1a:	78 a5       	ldd	r23, Y+40	; 0x28
    1e1c:	89 a5       	ldd	r24, Y+41	; 0x29
    1e1e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e20:	20 e0       	ldi	r18, 0x00	; 0
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	40 e2       	ldi	r20, 0x20	; 32
    1e26:	51 e4       	ldi	r21, 0x41	; 65
    1e28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	cb 01       	movw	r24, r22
    1e30:	bc 01       	movw	r22, r24
    1e32:	cd 01       	movw	r24, r26
    1e34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e38:	dc 01       	movw	r26, r24
    1e3a:	cb 01       	movw	r24, r22
    1e3c:	9a a3       	std	Y+34, r25	; 0x22
    1e3e:	89 a3       	std	Y+33, r24	; 0x21
    1e40:	0f c0       	rjmp	.+30     	; 0x1e60 <main+0x1ca>
    1e42:	89 e1       	ldi	r24, 0x19	; 25
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	98 a3       	std	Y+32, r25	; 0x20
    1e48:	8f 8f       	std	Y+31, r24	; 0x1f
    1e4a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e4c:	98 a1       	ldd	r25, Y+32	; 0x20
    1e4e:	01 97       	sbiw	r24, 0x01	; 1
    1e50:	f1 f7       	brne	.-4      	; 0x1e4e <main+0x1b8>
    1e52:	98 a3       	std	Y+32, r25	; 0x20
    1e54:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e56:	89 a1       	ldd	r24, Y+33	; 0x21
    1e58:	9a a1       	ldd	r25, Y+34	; 0x22
    1e5a:	01 97       	sbiw	r24, 0x01	; 1
    1e5c:	9a a3       	std	Y+34, r25	; 0x22
    1e5e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e60:	89 a1       	ldd	r24, Y+33	; 0x21
    1e62:	9a a1       	ldd	r25, Y+34	; 0x22
    1e64:	00 97       	sbiw	r24, 0x00	; 0
    1e66:	69 f7       	brne	.-38     	; 0x1e42 <main+0x1ac>
    1e68:	14 c0       	rjmp	.+40     	; 0x1e92 <main+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e6a:	6b a1       	ldd	r22, Y+35	; 0x23
    1e6c:	7c a1       	ldd	r23, Y+36	; 0x24
    1e6e:	8d a1       	ldd	r24, Y+37	; 0x25
    1e70:	9e a1       	ldd	r25, Y+38	; 0x26
    1e72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e76:	dc 01       	movw	r26, r24
    1e78:	cb 01       	movw	r24, r22
    1e7a:	9a a3       	std	Y+34, r25	; 0x22
    1e7c:	89 a3       	std	Y+33, r24	; 0x21
    1e7e:	89 a1       	ldd	r24, Y+33	; 0x21
    1e80:	9a a1       	ldd	r25, Y+34	; 0x22
    1e82:	9e 8f       	std	Y+30, r25	; 0x1e
    1e84:	8d 8f       	std	Y+29, r24	; 0x1d
    1e86:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e88:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e8a:	01 97       	sbiw	r24, 0x01	; 1
    1e8c:	f1 f7       	brne	.-4      	; 0x1e8a <main+0x1f4>
    1e8e:	9e 8f       	std	Y+30, r25	; 0x1e
    1e90:	8d 8f       	std	Y+29, r24	; 0x1d
		{
			_delay_ms(delay);

			for(u8 i=100;i>=1;i--)
    1e92:	84 e6       	ldi	r24, 0x64	; 100
    1e94:	89 af       	std	Y+57, r24	; 0x39
    1e96:	7e c0       	rjmp	.+252    	; 0x1f94 <main+0x2fe>
			{
				TIMER0_vidFastPWMModeInitialization(value);
    1e98:	80 91 6f 01 	lds	r24, 0x016F
    1e9c:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <TIMER0_vidFastPWMModeInitialization>
    1ea0:	80 e0       	ldi	r24, 0x00	; 0
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	a2 e8       	ldi	r26, 0x82	; 130
    1ea6:	b3 e4       	ldi	r27, 0x43	; 67
    1ea8:	89 8f       	std	Y+25, r24	; 0x19
    1eaa:	9a 8f       	std	Y+26, r25	; 0x1a
    1eac:	ab 8f       	std	Y+27, r26	; 0x1b
    1eae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb0:	69 8d       	ldd	r22, Y+25	; 0x19
    1eb2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eb4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eb6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	4a e7       	ldi	r20, 0x7A	; 122
    1ebe:	53 e4       	ldi	r21, 0x43	; 67
    1ec0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	8d 8b       	std	Y+21, r24	; 0x15
    1eca:	9e 8b       	std	Y+22, r25	; 0x16
    1ecc:	af 8b       	std	Y+23, r26	; 0x17
    1ece:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ed0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ed2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ed4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ed6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	40 e8       	ldi	r20, 0x80	; 128
    1ede:	5f e3       	ldi	r21, 0x3F	; 63
    1ee0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ee4:	88 23       	and	r24, r24
    1ee6:	2c f4       	brge	.+10     	; 0x1ef2 <main+0x25c>
		__ticks = 1;
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	9c 8b       	std	Y+20, r25	; 0x14
    1eee:	8b 8b       	std	Y+19, r24	; 0x13
    1ef0:	3f c0       	rjmp	.+126    	; 0x1f70 <main+0x2da>
	else if (__tmp > 65535)
    1ef2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ef4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ef6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ef8:	98 8d       	ldd	r25, Y+24	; 0x18
    1efa:	20 e0       	ldi	r18, 0x00	; 0
    1efc:	3f ef       	ldi	r19, 0xFF	; 255
    1efe:	4f e7       	ldi	r20, 0x7F	; 127
    1f00:	57 e4       	ldi	r21, 0x47	; 71
    1f02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f06:	18 16       	cp	r1, r24
    1f08:	4c f5       	brge	.+82     	; 0x1f5c <main+0x2c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f0a:	69 8d       	ldd	r22, Y+25	; 0x19
    1f0c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f10:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	40 e2       	ldi	r20, 0x20	; 32
    1f18:	51 e4       	ldi	r21, 0x41	; 65
    1f1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	bc 01       	movw	r22, r24
    1f24:	cd 01       	movw	r24, r26
    1f26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	9c 8b       	std	Y+20, r25	; 0x14
    1f30:	8b 8b       	std	Y+19, r24	; 0x13
    1f32:	0f c0       	rjmp	.+30     	; 0x1f52 <main+0x2bc>
    1f34:	89 e1       	ldi	r24, 0x19	; 25
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	9a 8b       	std	Y+18, r25	; 0x12
    1f3a:	89 8b       	std	Y+17, r24	; 0x11
    1f3c:	89 89       	ldd	r24, Y+17	; 0x11
    1f3e:	9a 89       	ldd	r25, Y+18	; 0x12
    1f40:	01 97       	sbiw	r24, 0x01	; 1
    1f42:	f1 f7       	brne	.-4      	; 0x1f40 <main+0x2aa>
    1f44:	9a 8b       	std	Y+18, r25	; 0x12
    1f46:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f48:	8b 89       	ldd	r24, Y+19	; 0x13
    1f4a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f4c:	01 97       	sbiw	r24, 0x01	; 1
    1f4e:	9c 8b       	std	Y+20, r25	; 0x14
    1f50:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f52:	8b 89       	ldd	r24, Y+19	; 0x13
    1f54:	9c 89       	ldd	r25, Y+20	; 0x14
    1f56:	00 97       	sbiw	r24, 0x00	; 0
    1f58:	69 f7       	brne	.-38     	; 0x1f34 <main+0x29e>
    1f5a:	14 c0       	rjmp	.+40     	; 0x1f84 <main+0x2ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f5c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f5e:	7e 89       	ldd	r23, Y+22	; 0x16
    1f60:	8f 89       	ldd	r24, Y+23	; 0x17
    1f62:	98 8d       	ldd	r25, Y+24	; 0x18
    1f64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f68:	dc 01       	movw	r26, r24
    1f6a:	cb 01       	movw	r24, r22
    1f6c:	9c 8b       	std	Y+20, r25	; 0x14
    1f6e:	8b 8b       	std	Y+19, r24	; 0x13
    1f70:	8b 89       	ldd	r24, Y+19	; 0x13
    1f72:	9c 89       	ldd	r25, Y+20	; 0x14
    1f74:	98 8b       	std	Y+16, r25	; 0x10
    1f76:	8f 87       	std	Y+15, r24	; 0x0f
    1f78:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f7a:	98 89       	ldd	r25, Y+16	; 0x10
    1f7c:	01 97       	sbiw	r24, 0x01	; 1
    1f7e:	f1 f7       	brne	.-4      	; 0x1f7c <main+0x2e6>
    1f80:	98 8b       	std	Y+16, r25	; 0x10
    1f82:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(delay);
				value--;
    1f84:	80 91 6f 01 	lds	r24, 0x016F
    1f88:	81 50       	subi	r24, 0x01	; 1
    1f8a:	80 93 6f 01 	sts	0x016F, r24

		if(value==100)
		{
			_delay_ms(delay);

			for(u8 i=100;i>=1;i--)
    1f8e:	89 ad       	ldd	r24, Y+57	; 0x39
    1f90:	81 50       	subi	r24, 0x01	; 1
    1f92:	89 af       	std	Y+57, r24	; 0x39
    1f94:	89 ad       	ldd	r24, Y+57	; 0x39
    1f96:	88 23       	and	r24, r24
    1f98:	09 f0       	breq	.+2      	; 0x1f9c <main+0x306>
    1f9a:	7e cf       	rjmp	.-260    	; 0x1e98 <main+0x202>
    1f9c:	80 e0       	ldi	r24, 0x00	; 0
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	a2 e8       	ldi	r26, 0x82	; 130
    1fa2:	b3 e4       	ldi	r27, 0x43	; 67
    1fa4:	8b 87       	std	Y+11, r24	; 0x0b
    1fa6:	9c 87       	std	Y+12, r25	; 0x0c
    1fa8:	ad 87       	std	Y+13, r26	; 0x0d
    1faa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fac:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fae:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fb4:	20 e0       	ldi	r18, 0x00	; 0
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	4a e7       	ldi	r20, 0x7A	; 122
    1fba:	53 e4       	ldi	r21, 0x43	; 67
    1fbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc0:	dc 01       	movw	r26, r24
    1fc2:	cb 01       	movw	r24, r22
    1fc4:	8f 83       	std	Y+7, r24	; 0x07
    1fc6:	98 87       	std	Y+8, r25	; 0x08
    1fc8:	a9 87       	std	Y+9, r26	; 0x09
    1fca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fcc:	6f 81       	ldd	r22, Y+7	; 0x07
    1fce:	78 85       	ldd	r23, Y+8	; 0x08
    1fd0:	89 85       	ldd	r24, Y+9	; 0x09
    1fd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd4:	20 e0       	ldi	r18, 0x00	; 0
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	40 e8       	ldi	r20, 0x80	; 128
    1fda:	5f e3       	ldi	r21, 0x3F	; 63
    1fdc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fe0:	88 23       	and	r24, r24
    1fe2:	2c f4       	brge	.+10     	; 0x1fee <main+0x358>
		__ticks = 1;
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	9e 83       	std	Y+6, r25	; 0x06
    1fea:	8d 83       	std	Y+5, r24	; 0x05
    1fec:	3f c0       	rjmp	.+126    	; 0x206c <main+0x3d6>
	else if (__tmp > 65535)
    1fee:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff0:	78 85       	ldd	r23, Y+8	; 0x08
    1ff2:	89 85       	ldd	r24, Y+9	; 0x09
    1ff4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	3f ef       	ldi	r19, 0xFF	; 255
    1ffa:	4f e7       	ldi	r20, 0x7F	; 127
    1ffc:	57 e4       	ldi	r21, 0x47	; 71
    1ffe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2002:	18 16       	cp	r1, r24
    2004:	4c f5       	brge	.+82     	; 0x2058 <main+0x3c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2006:	6b 85       	ldd	r22, Y+11	; 0x0b
    2008:	7c 85       	ldd	r23, Y+12	; 0x0c
    200a:	8d 85       	ldd	r24, Y+13	; 0x0d
    200c:	9e 85       	ldd	r25, Y+14	; 0x0e
    200e:	20 e0       	ldi	r18, 0x00	; 0
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	40 e2       	ldi	r20, 0x20	; 32
    2014:	51 e4       	ldi	r21, 0x41	; 65
    2016:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    201a:	dc 01       	movw	r26, r24
    201c:	cb 01       	movw	r24, r22
    201e:	bc 01       	movw	r22, r24
    2020:	cd 01       	movw	r24, r26
    2022:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2026:	dc 01       	movw	r26, r24
    2028:	cb 01       	movw	r24, r22
    202a:	9e 83       	std	Y+6, r25	; 0x06
    202c:	8d 83       	std	Y+5, r24	; 0x05
    202e:	0f c0       	rjmp	.+30     	; 0x204e <main+0x3b8>
    2030:	89 e1       	ldi	r24, 0x19	; 25
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	9c 83       	std	Y+4, r25	; 0x04
    2036:	8b 83       	std	Y+3, r24	; 0x03
    2038:	8b 81       	ldd	r24, Y+3	; 0x03
    203a:	9c 81       	ldd	r25, Y+4	; 0x04
    203c:	01 97       	sbiw	r24, 0x01	; 1
    203e:	f1 f7       	brne	.-4      	; 0x203c <main+0x3a6>
    2040:	9c 83       	std	Y+4, r25	; 0x04
    2042:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2044:	8d 81       	ldd	r24, Y+5	; 0x05
    2046:	9e 81       	ldd	r25, Y+6	; 0x06
    2048:	01 97       	sbiw	r24, 0x01	; 1
    204a:	9e 83       	std	Y+6, r25	; 0x06
    204c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    204e:	8d 81       	ldd	r24, Y+5	; 0x05
    2050:	9e 81       	ldd	r25, Y+6	; 0x06
    2052:	00 97       	sbiw	r24, 0x00	; 0
    2054:	69 f7       	brne	.-38     	; 0x2030 <main+0x39a>
    2056:	2b ce       	rjmp	.-938    	; 0x1cae <main+0x18>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2058:	6f 81       	ldd	r22, Y+7	; 0x07
    205a:	78 85       	ldd	r23, Y+8	; 0x08
    205c:	89 85       	ldd	r24, Y+9	; 0x09
    205e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2060:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2064:	dc 01       	movw	r26, r24
    2066:	cb 01       	movw	r24, r22
    2068:	9e 83       	std	Y+6, r25	; 0x06
    206a:	8d 83       	std	Y+5, r24	; 0x05
    206c:	8d 81       	ldd	r24, Y+5	; 0x05
    206e:	9e 81       	ldd	r25, Y+6	; 0x06
    2070:	9a 83       	std	Y+2, r25	; 0x02
    2072:	89 83       	std	Y+1, r24	; 0x01
    2074:	89 81       	ldd	r24, Y+1	; 0x01
    2076:	9a 81       	ldd	r25, Y+2	; 0x02
    2078:	01 97       	sbiw	r24, 0x01	; 1
    207a:	f1 f7       	brne	.-4      	; 0x2078 <main+0x3e2>
    207c:	9a 83       	std	Y+2, r25	; 0x02
    207e:	89 83       	std	Y+1, r24	; 0x01
    2080:	16 ce       	rjmp	.-980    	; 0x1cae <main+0x18>

00002082 <__mulsi3>:
    2082:	62 9f       	mul	r22, r18
    2084:	d0 01       	movw	r26, r0
    2086:	73 9f       	mul	r23, r19
    2088:	f0 01       	movw	r30, r0
    208a:	82 9f       	mul	r24, r18
    208c:	e0 0d       	add	r30, r0
    208e:	f1 1d       	adc	r31, r1
    2090:	64 9f       	mul	r22, r20
    2092:	e0 0d       	add	r30, r0
    2094:	f1 1d       	adc	r31, r1
    2096:	92 9f       	mul	r25, r18
    2098:	f0 0d       	add	r31, r0
    209a:	83 9f       	mul	r24, r19
    209c:	f0 0d       	add	r31, r0
    209e:	74 9f       	mul	r23, r20
    20a0:	f0 0d       	add	r31, r0
    20a2:	65 9f       	mul	r22, r21
    20a4:	f0 0d       	add	r31, r0
    20a6:	99 27       	eor	r25, r25
    20a8:	72 9f       	mul	r23, r18
    20aa:	b0 0d       	add	r27, r0
    20ac:	e1 1d       	adc	r30, r1
    20ae:	f9 1f       	adc	r31, r25
    20b0:	63 9f       	mul	r22, r19
    20b2:	b0 0d       	add	r27, r0
    20b4:	e1 1d       	adc	r30, r1
    20b6:	f9 1f       	adc	r31, r25
    20b8:	bd 01       	movw	r22, r26
    20ba:	cf 01       	movw	r24, r30
    20bc:	11 24       	eor	r1, r1
    20be:	08 95       	ret

000020c0 <__prologue_saves__>:
    20c0:	2f 92       	push	r2
    20c2:	3f 92       	push	r3
    20c4:	4f 92       	push	r4
    20c6:	5f 92       	push	r5
    20c8:	6f 92       	push	r6
    20ca:	7f 92       	push	r7
    20cc:	8f 92       	push	r8
    20ce:	9f 92       	push	r9
    20d0:	af 92       	push	r10
    20d2:	bf 92       	push	r11
    20d4:	cf 92       	push	r12
    20d6:	df 92       	push	r13
    20d8:	ef 92       	push	r14
    20da:	ff 92       	push	r15
    20dc:	0f 93       	push	r16
    20de:	1f 93       	push	r17
    20e0:	cf 93       	push	r28
    20e2:	df 93       	push	r29
    20e4:	cd b7       	in	r28, 0x3d	; 61
    20e6:	de b7       	in	r29, 0x3e	; 62
    20e8:	ca 1b       	sub	r28, r26
    20ea:	db 0b       	sbc	r29, r27
    20ec:	0f b6       	in	r0, 0x3f	; 63
    20ee:	f8 94       	cli
    20f0:	de bf       	out	0x3e, r29	; 62
    20f2:	0f be       	out	0x3f, r0	; 63
    20f4:	cd bf       	out	0x3d, r28	; 61
    20f6:	09 94       	ijmp

000020f8 <__epilogue_restores__>:
    20f8:	2a 88       	ldd	r2, Y+18	; 0x12
    20fa:	39 88       	ldd	r3, Y+17	; 0x11
    20fc:	48 88       	ldd	r4, Y+16	; 0x10
    20fe:	5f 84       	ldd	r5, Y+15	; 0x0f
    2100:	6e 84       	ldd	r6, Y+14	; 0x0e
    2102:	7d 84       	ldd	r7, Y+13	; 0x0d
    2104:	8c 84       	ldd	r8, Y+12	; 0x0c
    2106:	9b 84       	ldd	r9, Y+11	; 0x0b
    2108:	aa 84       	ldd	r10, Y+10	; 0x0a
    210a:	b9 84       	ldd	r11, Y+9	; 0x09
    210c:	c8 84       	ldd	r12, Y+8	; 0x08
    210e:	df 80       	ldd	r13, Y+7	; 0x07
    2110:	ee 80       	ldd	r14, Y+6	; 0x06
    2112:	fd 80       	ldd	r15, Y+5	; 0x05
    2114:	0c 81       	ldd	r16, Y+4	; 0x04
    2116:	1b 81       	ldd	r17, Y+3	; 0x03
    2118:	aa 81       	ldd	r26, Y+2	; 0x02
    211a:	b9 81       	ldd	r27, Y+1	; 0x01
    211c:	ce 0f       	add	r28, r30
    211e:	d1 1d       	adc	r29, r1
    2120:	0f b6       	in	r0, 0x3f	; 63
    2122:	f8 94       	cli
    2124:	de bf       	out	0x3e, r29	; 62
    2126:	0f be       	out	0x3f, r0	; 63
    2128:	cd bf       	out	0x3d, r28	; 61
    212a:	ed 01       	movw	r28, r26
    212c:	08 95       	ret

0000212e <_exit>:
    212e:	f8 94       	cli

00002130 <__stop_program>:
    2130:	ff cf       	rjmp	.-2      	; 0x2130 <__stop_program>
