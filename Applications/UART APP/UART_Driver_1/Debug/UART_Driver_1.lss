
UART_Driver_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001be6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00001be6  00001c7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800168  00800168  00001d82  2**0
                  ALLOC
  3 .stab         00001800  00000000  00000000  00001d84  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b40  00000000  00000000  00003584  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000040c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000197  00000000  00000000  00004204  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001a88  00000000  00000000  0000439b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eb7  00000000  00000000  00005e23  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000df7  00000000  00000000  00006cda  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00007ad4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002bf  00000000  00000000  00007c34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007f2  00000000  00000000  00007ef3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 8c 0c 	jmp	0x1918	; 0x1918 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 f3 0b 	jmp	0x17e6	; 0x17e6 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a5 37       	cpi	r26, 0x75	; 117
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e6 ee       	ldi	r30, 0xE6	; 230
      78:	fb e1       	ldi	r31, 0x1B	; 27
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <main>
      8a:	0c 94 f1 0d 	jmp	0x1be2	; 0x1be2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 cb 02 	call	0x596	; 0x596 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ba 0d 	jmp	0x1b74	; 0x1b74 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d6 0d 	jmp	0x1bac	; 0x1bac <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 17 04 	call	0x82e	; 0x82e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e2 0d 	jmp	0x1bc4	; 0x1bc4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 17 04 	call	0x82e	; 0x82e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e2 0d 	jmp	0x1bc4	; 0x1bc4 <__epilogue_restores__+0x18>

0000043e <__divsf3>:
     43e:	a8 e1       	ldi	r26, 0x18	; 24
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c2 0d 	jmp	0x1b84	; 0x1b84 <__prologue_saves__+0x10>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	b9 e0       	ldi	r27, 0x09	; 9
     45c:	eb 2e       	mov	r14, r27
     45e:	f1 2c       	mov	r15, r1
     460:	ec 0e       	add	r14, r28
     462:	fd 1e       	adc	r15, r29
     464:	ce 01       	movw	r24, r28
     466:	01 96       	adiw	r24, 0x01	; 1
     468:	b7 01       	movw	r22, r14
     46a:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     46e:	8e 01       	movw	r16, r28
     470:	0f 5e       	subi	r16, 0xEF	; 239
     472:	1f 4f       	sbci	r17, 0xFF	; 255
     474:	ce 01       	movw	r24, r28
     476:	05 96       	adiw	r24, 0x05	; 5
     478:	b8 01       	movw	r22, r16
     47a:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     47e:	29 85       	ldd	r18, Y+9	; 0x09
     480:	22 30       	cpi	r18, 0x02	; 2
     482:	08 f4       	brcc	.+2      	; 0x486 <__stack+0x27>
     484:	7e c0       	rjmp	.+252    	; 0x582 <__stack+0x123>
     486:	39 89       	ldd	r19, Y+17	; 0x11
     488:	32 30       	cpi	r19, 0x02	; 2
     48a:	10 f4       	brcc	.+4      	; 0x490 <__stack+0x31>
     48c:	b8 01       	movw	r22, r16
     48e:	7c c0       	rjmp	.+248    	; 0x588 <__stack+0x129>
     490:	8a 85       	ldd	r24, Y+10	; 0x0a
     492:	9a 89       	ldd	r25, Y+18	; 0x12
     494:	89 27       	eor	r24, r25
     496:	8a 87       	std	Y+10, r24	; 0x0a
     498:	24 30       	cpi	r18, 0x04	; 4
     49a:	11 f0       	breq	.+4      	; 0x4a0 <__stack+0x41>
     49c:	22 30       	cpi	r18, 0x02	; 2
     49e:	31 f4       	brne	.+12     	; 0x4ac <__stack+0x4d>
     4a0:	23 17       	cp	r18, r19
     4a2:	09 f0       	breq	.+2      	; 0x4a6 <__stack+0x47>
     4a4:	6e c0       	rjmp	.+220    	; 0x582 <__stack+0x123>
     4a6:	60 e6       	ldi	r22, 0x60	; 96
     4a8:	70 e0       	ldi	r23, 0x00	; 0
     4aa:	6e c0       	rjmp	.+220    	; 0x588 <__stack+0x129>
     4ac:	34 30       	cpi	r19, 0x04	; 4
     4ae:	39 f4       	brne	.+14     	; 0x4be <__stack+0x5f>
     4b0:	1d 86       	std	Y+13, r1	; 0x0d
     4b2:	1e 86       	std	Y+14, r1	; 0x0e
     4b4:	1f 86       	std	Y+15, r1	; 0x0f
     4b6:	18 8a       	std	Y+16, r1	; 0x10
     4b8:	1c 86       	std	Y+12, r1	; 0x0c
     4ba:	1b 86       	std	Y+11, r1	; 0x0b
     4bc:	04 c0       	rjmp	.+8      	; 0x4c6 <__stack+0x67>
     4be:	32 30       	cpi	r19, 0x02	; 2
     4c0:	21 f4       	brne	.+8      	; 0x4ca <__stack+0x6b>
     4c2:	84 e0       	ldi	r24, 0x04	; 4
     4c4:	89 87       	std	Y+9, r24	; 0x09
     4c6:	b7 01       	movw	r22, r14
     4c8:	5f c0       	rjmp	.+190    	; 0x588 <__stack+0x129>
     4ca:	2b 85       	ldd	r18, Y+11	; 0x0b
     4cc:	3c 85       	ldd	r19, Y+12	; 0x0c
     4ce:	8b 89       	ldd	r24, Y+19	; 0x13
     4d0:	9c 89       	ldd	r25, Y+20	; 0x14
     4d2:	28 1b       	sub	r18, r24
     4d4:	39 0b       	sbc	r19, r25
     4d6:	3c 87       	std	Y+12, r19	; 0x0c
     4d8:	2b 87       	std	Y+11, r18	; 0x0b
     4da:	ed 84       	ldd	r14, Y+13	; 0x0d
     4dc:	fe 84       	ldd	r15, Y+14	; 0x0e
     4de:	0f 85       	ldd	r16, Y+15	; 0x0f
     4e0:	18 89       	ldd	r17, Y+16	; 0x10
     4e2:	ad 88       	ldd	r10, Y+21	; 0x15
     4e4:	be 88       	ldd	r11, Y+22	; 0x16
     4e6:	cf 88       	ldd	r12, Y+23	; 0x17
     4e8:	d8 8c       	ldd	r13, Y+24	; 0x18
     4ea:	ea 14       	cp	r14, r10
     4ec:	fb 04       	cpc	r15, r11
     4ee:	0c 05       	cpc	r16, r12
     4f0:	1d 05       	cpc	r17, r13
     4f2:	40 f4       	brcc	.+16     	; 0x504 <__stack+0xa5>
     4f4:	ee 0c       	add	r14, r14
     4f6:	ff 1c       	adc	r15, r15
     4f8:	00 1f       	adc	r16, r16
     4fa:	11 1f       	adc	r17, r17
     4fc:	21 50       	subi	r18, 0x01	; 1
     4fe:	30 40       	sbci	r19, 0x00	; 0
     500:	3c 87       	std	Y+12, r19	; 0x0c
     502:	2b 87       	std	Y+11, r18	; 0x0b
     504:	20 e0       	ldi	r18, 0x00	; 0
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	40 e0       	ldi	r20, 0x00	; 0
     50a:	50 e0       	ldi	r21, 0x00	; 0
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e4       	ldi	r27, 0x40	; 64
     514:	60 e0       	ldi	r22, 0x00	; 0
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	ea 14       	cp	r14, r10
     51a:	fb 04       	cpc	r15, r11
     51c:	0c 05       	cpc	r16, r12
     51e:	1d 05       	cpc	r17, r13
     520:	40 f0       	brcs	.+16     	; 0x532 <__stack+0xd3>
     522:	28 2b       	or	r18, r24
     524:	39 2b       	or	r19, r25
     526:	4a 2b       	or	r20, r26
     528:	5b 2b       	or	r21, r27
     52a:	ea 18       	sub	r14, r10
     52c:	fb 08       	sbc	r15, r11
     52e:	0c 09       	sbc	r16, r12
     530:	1d 09       	sbc	r17, r13
     532:	b6 95       	lsr	r27
     534:	a7 95       	ror	r26
     536:	97 95       	ror	r25
     538:	87 95       	ror	r24
     53a:	ee 0c       	add	r14, r14
     53c:	ff 1c       	adc	r15, r15
     53e:	00 1f       	adc	r16, r16
     540:	11 1f       	adc	r17, r17
     542:	6f 5f       	subi	r22, 0xFF	; 255
     544:	7f 4f       	sbci	r23, 0xFF	; 255
     546:	6f 31       	cpi	r22, 0x1F	; 31
     548:	71 05       	cpc	r23, r1
     54a:	31 f7       	brne	.-52     	; 0x518 <__stack+0xb9>
     54c:	da 01       	movw	r26, r20
     54e:	c9 01       	movw	r24, r18
     550:	8f 77       	andi	r24, 0x7F	; 127
     552:	90 70       	andi	r25, 0x00	; 0
     554:	a0 70       	andi	r26, 0x00	; 0
     556:	b0 70       	andi	r27, 0x00	; 0
     558:	80 34       	cpi	r24, 0x40	; 64
     55a:	91 05       	cpc	r25, r1
     55c:	a1 05       	cpc	r26, r1
     55e:	b1 05       	cpc	r27, r1
     560:	61 f4       	brne	.+24     	; 0x57a <__stack+0x11b>
     562:	27 fd       	sbrc	r18, 7
     564:	0a c0       	rjmp	.+20     	; 0x57a <__stack+0x11b>
     566:	e1 14       	cp	r14, r1
     568:	f1 04       	cpc	r15, r1
     56a:	01 05       	cpc	r16, r1
     56c:	11 05       	cpc	r17, r1
     56e:	29 f0       	breq	.+10     	; 0x57a <__stack+0x11b>
     570:	20 5c       	subi	r18, 0xC0	; 192
     572:	3f 4f       	sbci	r19, 0xFF	; 255
     574:	4f 4f       	sbci	r20, 0xFF	; 255
     576:	5f 4f       	sbci	r21, 0xFF	; 255
     578:	20 78       	andi	r18, 0x80	; 128
     57a:	2d 87       	std	Y+13, r18	; 0x0d
     57c:	3e 87       	std	Y+14, r19	; 0x0e
     57e:	4f 87       	std	Y+15, r20	; 0x0f
     580:	58 8b       	std	Y+16, r21	; 0x10
     582:	be 01       	movw	r22, r28
     584:	67 5f       	subi	r22, 0xF7	; 247
     586:	7f 4f       	sbci	r23, 0xFF	; 255
     588:	cb 01       	movw	r24, r22
     58a:	0e 94 17 04 	call	0x82e	; 0x82e <__pack_f>
     58e:	68 96       	adiw	r28, 0x18	; 24
     590:	ea e0       	ldi	r30, 0x0A	; 10
     592:	0c 94 de 0d 	jmp	0x1bbc	; 0x1bbc <__epilogue_restores__+0x10>

00000596 <__gesf2>:
     596:	a8 e1       	ldi	r26, 0x18	; 24
     598:	b0 e0       	ldi	r27, 0x00	; 0
     59a:	e1 ed       	ldi	r30, 0xD1	; 209
     59c:	f2 e0       	ldi	r31, 0x02	; 2
     59e:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__prologue_saves__+0x18>
     5a2:	69 83       	std	Y+1, r22	; 0x01
     5a4:	7a 83       	std	Y+2, r23	; 0x02
     5a6:	8b 83       	std	Y+3, r24	; 0x03
     5a8:	9c 83       	std	Y+4, r25	; 0x04
     5aa:	2d 83       	std	Y+5, r18	; 0x05
     5ac:	3e 83       	std	Y+6, r19	; 0x06
     5ae:	4f 83       	std	Y+7, r20	; 0x07
     5b0:	58 87       	std	Y+8, r21	; 0x08
     5b2:	89 e0       	ldi	r24, 0x09	; 9
     5b4:	e8 2e       	mov	r14, r24
     5b6:	f1 2c       	mov	r15, r1
     5b8:	ec 0e       	add	r14, r28
     5ba:	fd 1e       	adc	r15, r29
     5bc:	ce 01       	movw	r24, r28
     5be:	01 96       	adiw	r24, 0x01	; 1
     5c0:	b7 01       	movw	r22, r14
     5c2:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     5c6:	8e 01       	movw	r16, r28
     5c8:	0f 5e       	subi	r16, 0xEF	; 239
     5ca:	1f 4f       	sbci	r17, 0xFF	; 255
     5cc:	ce 01       	movw	r24, r28
     5ce:	05 96       	adiw	r24, 0x05	; 5
     5d0:	b8 01       	movw	r22, r16
     5d2:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     5d6:	89 85       	ldd	r24, Y+9	; 0x09
     5d8:	82 30       	cpi	r24, 0x02	; 2
     5da:	40 f0       	brcs	.+16     	; 0x5ec <__gesf2+0x56>
     5dc:	89 89       	ldd	r24, Y+17	; 0x11
     5de:	82 30       	cpi	r24, 0x02	; 2
     5e0:	28 f0       	brcs	.+10     	; 0x5ec <__gesf2+0x56>
     5e2:	c7 01       	movw	r24, r14
     5e4:	b8 01       	movw	r22, r16
     5e6:	0e 94 64 05 	call	0xac8	; 0xac8 <__fpcmp_parts_f>
     5ea:	01 c0       	rjmp	.+2      	; 0x5ee <__gesf2+0x58>
     5ec:	8f ef       	ldi	r24, 0xFF	; 255
     5ee:	68 96       	adiw	r28, 0x18	; 24
     5f0:	e6 e0       	ldi	r30, 0x06	; 6
     5f2:	0c 94 e2 0d 	jmp	0x1bc4	; 0x1bc4 <__epilogue_restores__+0x18>

000005f6 <__fixsfsi>:
     5f6:	ac e0       	ldi	r26, 0x0C	; 12
     5f8:	b0 e0       	ldi	r27, 0x00	; 0
     5fa:	e1 e0       	ldi	r30, 0x01	; 1
     5fc:	f3 e0       	ldi	r31, 0x03	; 3
     5fe:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__prologue_saves__+0x20>
     602:	69 83       	std	Y+1, r22	; 0x01
     604:	7a 83       	std	Y+2, r23	; 0x02
     606:	8b 83       	std	Y+3, r24	; 0x03
     608:	9c 83       	std	Y+4, r25	; 0x04
     60a:	ce 01       	movw	r24, r28
     60c:	01 96       	adiw	r24, 0x01	; 1
     60e:	be 01       	movw	r22, r28
     610:	6b 5f       	subi	r22, 0xFB	; 251
     612:	7f 4f       	sbci	r23, 0xFF	; 255
     614:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     618:	8d 81       	ldd	r24, Y+5	; 0x05
     61a:	82 30       	cpi	r24, 0x02	; 2
     61c:	61 f1       	breq	.+88     	; 0x676 <__fixsfsi+0x80>
     61e:	82 30       	cpi	r24, 0x02	; 2
     620:	50 f1       	brcs	.+84     	; 0x676 <__fixsfsi+0x80>
     622:	84 30       	cpi	r24, 0x04	; 4
     624:	21 f4       	brne	.+8      	; 0x62e <__fixsfsi+0x38>
     626:	8e 81       	ldd	r24, Y+6	; 0x06
     628:	88 23       	and	r24, r24
     62a:	51 f1       	breq	.+84     	; 0x680 <__fixsfsi+0x8a>
     62c:	2e c0       	rjmp	.+92     	; 0x68a <__fixsfsi+0x94>
     62e:	2f 81       	ldd	r18, Y+7	; 0x07
     630:	38 85       	ldd	r19, Y+8	; 0x08
     632:	37 fd       	sbrc	r19, 7
     634:	20 c0       	rjmp	.+64     	; 0x676 <__fixsfsi+0x80>
     636:	6e 81       	ldd	r22, Y+6	; 0x06
     638:	2f 31       	cpi	r18, 0x1F	; 31
     63a:	31 05       	cpc	r19, r1
     63c:	1c f0       	brlt	.+6      	; 0x644 <__fixsfsi+0x4e>
     63e:	66 23       	and	r22, r22
     640:	f9 f0       	breq	.+62     	; 0x680 <__fixsfsi+0x8a>
     642:	23 c0       	rjmp	.+70     	; 0x68a <__fixsfsi+0x94>
     644:	8e e1       	ldi	r24, 0x1E	; 30
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	82 1b       	sub	r24, r18
     64a:	93 0b       	sbc	r25, r19
     64c:	29 85       	ldd	r18, Y+9	; 0x09
     64e:	3a 85       	ldd	r19, Y+10	; 0x0a
     650:	4b 85       	ldd	r20, Y+11	; 0x0b
     652:	5c 85       	ldd	r21, Y+12	; 0x0c
     654:	04 c0       	rjmp	.+8      	; 0x65e <__fixsfsi+0x68>
     656:	56 95       	lsr	r21
     658:	47 95       	ror	r20
     65a:	37 95       	ror	r19
     65c:	27 95       	ror	r18
     65e:	8a 95       	dec	r24
     660:	d2 f7       	brpl	.-12     	; 0x656 <__fixsfsi+0x60>
     662:	66 23       	and	r22, r22
     664:	b1 f0       	breq	.+44     	; 0x692 <__fixsfsi+0x9c>
     666:	50 95       	com	r21
     668:	40 95       	com	r20
     66a:	30 95       	com	r19
     66c:	21 95       	neg	r18
     66e:	3f 4f       	sbci	r19, 0xFF	; 255
     670:	4f 4f       	sbci	r20, 0xFF	; 255
     672:	5f 4f       	sbci	r21, 0xFF	; 255
     674:	0e c0       	rjmp	.+28     	; 0x692 <__fixsfsi+0x9c>
     676:	20 e0       	ldi	r18, 0x00	; 0
     678:	30 e0       	ldi	r19, 0x00	; 0
     67a:	40 e0       	ldi	r20, 0x00	; 0
     67c:	50 e0       	ldi	r21, 0x00	; 0
     67e:	09 c0       	rjmp	.+18     	; 0x692 <__fixsfsi+0x9c>
     680:	2f ef       	ldi	r18, 0xFF	; 255
     682:	3f ef       	ldi	r19, 0xFF	; 255
     684:	4f ef       	ldi	r20, 0xFF	; 255
     686:	5f e7       	ldi	r21, 0x7F	; 127
     688:	04 c0       	rjmp	.+8      	; 0x692 <__fixsfsi+0x9c>
     68a:	20 e0       	ldi	r18, 0x00	; 0
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	40 e0       	ldi	r20, 0x00	; 0
     690:	50 e8       	ldi	r21, 0x80	; 128
     692:	b9 01       	movw	r22, r18
     694:	ca 01       	movw	r24, r20
     696:	2c 96       	adiw	r28, 0x0c	; 12
     698:	e2 e0       	ldi	r30, 0x02	; 2
     69a:	0c 94 e6 0d 	jmp	0x1bcc	; 0x1bcc <__epilogue_restores__+0x20>

0000069e <__floatunsisf>:
     69e:	a8 e0       	ldi	r26, 0x08	; 8
     6a0:	b0 e0       	ldi	r27, 0x00	; 0
     6a2:	e5 e5       	ldi	r30, 0x55	; 85
     6a4:	f3 e0       	ldi	r31, 0x03	; 3
     6a6:	0c 94 c2 0d 	jmp	0x1b84	; 0x1b84 <__prologue_saves__+0x10>
     6aa:	7b 01       	movw	r14, r22
     6ac:	8c 01       	movw	r16, r24
     6ae:	61 15       	cp	r22, r1
     6b0:	71 05       	cpc	r23, r1
     6b2:	81 05       	cpc	r24, r1
     6b4:	91 05       	cpc	r25, r1
     6b6:	19 f4       	brne	.+6      	; 0x6be <__floatunsisf+0x20>
     6b8:	82 e0       	ldi	r24, 0x02	; 2
     6ba:	89 83       	std	Y+1, r24	; 0x01
     6bc:	60 c0       	rjmp	.+192    	; 0x77e <__floatunsisf+0xe0>
     6be:	83 e0       	ldi	r24, 0x03	; 3
     6c0:	89 83       	std	Y+1, r24	; 0x01
     6c2:	8e e1       	ldi	r24, 0x1E	; 30
     6c4:	c8 2e       	mov	r12, r24
     6c6:	d1 2c       	mov	r13, r1
     6c8:	dc 82       	std	Y+4, r13	; 0x04
     6ca:	cb 82       	std	Y+3, r12	; 0x03
     6cc:	ed 82       	std	Y+5, r14	; 0x05
     6ce:	fe 82       	std	Y+6, r15	; 0x06
     6d0:	0f 83       	std	Y+7, r16	; 0x07
     6d2:	18 87       	std	Y+8, r17	; 0x08
     6d4:	c8 01       	movw	r24, r16
     6d6:	b7 01       	movw	r22, r14
     6d8:	0e 94 c8 03 	call	0x790	; 0x790 <__clzsi2>
     6dc:	fc 01       	movw	r30, r24
     6de:	31 97       	sbiw	r30, 0x01	; 1
     6e0:	f7 ff       	sbrs	r31, 7
     6e2:	3b c0       	rjmp	.+118    	; 0x75a <__floatunsisf+0xbc>
     6e4:	22 27       	eor	r18, r18
     6e6:	33 27       	eor	r19, r19
     6e8:	2e 1b       	sub	r18, r30
     6ea:	3f 0b       	sbc	r19, r31
     6ec:	57 01       	movw	r10, r14
     6ee:	68 01       	movw	r12, r16
     6f0:	02 2e       	mov	r0, r18
     6f2:	04 c0       	rjmp	.+8      	; 0x6fc <__floatunsisf+0x5e>
     6f4:	d6 94       	lsr	r13
     6f6:	c7 94       	ror	r12
     6f8:	b7 94       	ror	r11
     6fa:	a7 94       	ror	r10
     6fc:	0a 94       	dec	r0
     6fe:	d2 f7       	brpl	.-12     	; 0x6f4 <__floatunsisf+0x56>
     700:	40 e0       	ldi	r20, 0x00	; 0
     702:	50 e0       	ldi	r21, 0x00	; 0
     704:	60 e0       	ldi	r22, 0x00	; 0
     706:	70 e0       	ldi	r23, 0x00	; 0
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	a0 e0       	ldi	r26, 0x00	; 0
     70e:	b0 e0       	ldi	r27, 0x00	; 0
     710:	04 c0       	rjmp	.+8      	; 0x71a <__floatunsisf+0x7c>
     712:	88 0f       	add	r24, r24
     714:	99 1f       	adc	r25, r25
     716:	aa 1f       	adc	r26, r26
     718:	bb 1f       	adc	r27, r27
     71a:	2a 95       	dec	r18
     71c:	d2 f7       	brpl	.-12     	; 0x712 <__floatunsisf+0x74>
     71e:	01 97       	sbiw	r24, 0x01	; 1
     720:	a1 09       	sbc	r26, r1
     722:	b1 09       	sbc	r27, r1
     724:	8e 21       	and	r24, r14
     726:	9f 21       	and	r25, r15
     728:	a0 23       	and	r26, r16
     72a:	b1 23       	and	r27, r17
     72c:	00 97       	sbiw	r24, 0x00	; 0
     72e:	a1 05       	cpc	r26, r1
     730:	b1 05       	cpc	r27, r1
     732:	21 f0       	breq	.+8      	; 0x73c <__floatunsisf+0x9e>
     734:	41 e0       	ldi	r20, 0x01	; 1
     736:	50 e0       	ldi	r21, 0x00	; 0
     738:	60 e0       	ldi	r22, 0x00	; 0
     73a:	70 e0       	ldi	r23, 0x00	; 0
     73c:	4a 29       	or	r20, r10
     73e:	5b 29       	or	r21, r11
     740:	6c 29       	or	r22, r12
     742:	7d 29       	or	r23, r13
     744:	4d 83       	std	Y+5, r20	; 0x05
     746:	5e 83       	std	Y+6, r21	; 0x06
     748:	6f 83       	std	Y+7, r22	; 0x07
     74a:	78 87       	std	Y+8, r23	; 0x08
     74c:	8e e1       	ldi	r24, 0x1E	; 30
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	8e 1b       	sub	r24, r30
     752:	9f 0b       	sbc	r25, r31
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	8b 83       	std	Y+3, r24	; 0x03
     758:	12 c0       	rjmp	.+36     	; 0x77e <__floatunsisf+0xe0>
     75a:	30 97       	sbiw	r30, 0x00	; 0
     75c:	81 f0       	breq	.+32     	; 0x77e <__floatunsisf+0xe0>
     75e:	0e 2e       	mov	r0, r30
     760:	04 c0       	rjmp	.+8      	; 0x76a <__floatunsisf+0xcc>
     762:	ee 0c       	add	r14, r14
     764:	ff 1c       	adc	r15, r15
     766:	00 1f       	adc	r16, r16
     768:	11 1f       	adc	r17, r17
     76a:	0a 94       	dec	r0
     76c:	d2 f7       	brpl	.-12     	; 0x762 <__floatunsisf+0xc4>
     76e:	ed 82       	std	Y+5, r14	; 0x05
     770:	fe 82       	std	Y+6, r15	; 0x06
     772:	0f 83       	std	Y+7, r16	; 0x07
     774:	18 87       	std	Y+8, r17	; 0x08
     776:	ce 1a       	sub	r12, r30
     778:	df 0a       	sbc	r13, r31
     77a:	dc 82       	std	Y+4, r13	; 0x04
     77c:	cb 82       	std	Y+3, r12	; 0x03
     77e:	1a 82       	std	Y+2, r1	; 0x02
     780:	ce 01       	movw	r24, r28
     782:	01 96       	adiw	r24, 0x01	; 1
     784:	0e 94 17 04 	call	0x82e	; 0x82e <__pack_f>
     788:	28 96       	adiw	r28, 0x08	; 8
     78a:	ea e0       	ldi	r30, 0x0A	; 10
     78c:	0c 94 de 0d 	jmp	0x1bbc	; 0x1bbc <__epilogue_restores__+0x10>

00000790 <__clzsi2>:
     790:	ef 92       	push	r14
     792:	ff 92       	push	r15
     794:	0f 93       	push	r16
     796:	1f 93       	push	r17
     798:	7b 01       	movw	r14, r22
     79a:	8c 01       	movw	r16, r24
     79c:	80 e0       	ldi	r24, 0x00	; 0
     79e:	e8 16       	cp	r14, r24
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	f8 06       	cpc	r15, r24
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	08 07       	cpc	r16, r24
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	18 07       	cpc	r17, r24
     7ac:	88 f4       	brcc	.+34     	; 0x7d0 <__clzsi2+0x40>
     7ae:	8f ef       	ldi	r24, 0xFF	; 255
     7b0:	e8 16       	cp	r14, r24
     7b2:	f1 04       	cpc	r15, r1
     7b4:	01 05       	cpc	r16, r1
     7b6:	11 05       	cpc	r17, r1
     7b8:	31 f0       	breq	.+12     	; 0x7c6 <__clzsi2+0x36>
     7ba:	28 f0       	brcs	.+10     	; 0x7c6 <__clzsi2+0x36>
     7bc:	88 e0       	ldi	r24, 0x08	; 8
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	a0 e0       	ldi	r26, 0x00	; 0
     7c2:	b0 e0       	ldi	r27, 0x00	; 0
     7c4:	17 c0       	rjmp	.+46     	; 0x7f4 <__clzsi2+0x64>
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	a0 e0       	ldi	r26, 0x00	; 0
     7cc:	b0 e0       	ldi	r27, 0x00	; 0
     7ce:	12 c0       	rjmp	.+36     	; 0x7f4 <__clzsi2+0x64>
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	e8 16       	cp	r14, r24
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	f8 06       	cpc	r15, r24
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	08 07       	cpc	r16, r24
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	18 07       	cpc	r17, r24
     7e0:	28 f0       	brcs	.+10     	; 0x7ec <__clzsi2+0x5c>
     7e2:	88 e1       	ldi	r24, 0x18	; 24
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	a0 e0       	ldi	r26, 0x00	; 0
     7e8:	b0 e0       	ldi	r27, 0x00	; 0
     7ea:	04 c0       	rjmp	.+8      	; 0x7f4 <__clzsi2+0x64>
     7ec:	80 e1       	ldi	r24, 0x10	; 16
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	a0 e0       	ldi	r26, 0x00	; 0
     7f2:	b0 e0       	ldi	r27, 0x00	; 0
     7f4:	20 e2       	ldi	r18, 0x20	; 32
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	40 e0       	ldi	r20, 0x00	; 0
     7fa:	50 e0       	ldi	r21, 0x00	; 0
     7fc:	28 1b       	sub	r18, r24
     7fe:	39 0b       	sbc	r19, r25
     800:	4a 0b       	sbc	r20, r26
     802:	5b 0b       	sbc	r21, r27
     804:	04 c0       	rjmp	.+8      	; 0x80e <__clzsi2+0x7e>
     806:	16 95       	lsr	r17
     808:	07 95       	ror	r16
     80a:	f7 94       	ror	r15
     80c:	e7 94       	ror	r14
     80e:	8a 95       	dec	r24
     810:	d2 f7       	brpl	.-12     	; 0x806 <__clzsi2+0x76>
     812:	f7 01       	movw	r30, r14
     814:	e8 59       	subi	r30, 0x98	; 152
     816:	ff 4f       	sbci	r31, 0xFF	; 255
     818:	80 81       	ld	r24, Z
     81a:	28 1b       	sub	r18, r24
     81c:	31 09       	sbc	r19, r1
     81e:	41 09       	sbc	r20, r1
     820:	51 09       	sbc	r21, r1
     822:	c9 01       	movw	r24, r18
     824:	1f 91       	pop	r17
     826:	0f 91       	pop	r16
     828:	ff 90       	pop	r15
     82a:	ef 90       	pop	r14
     82c:	08 95       	ret

0000082e <__pack_f>:
     82e:	df 92       	push	r13
     830:	ef 92       	push	r14
     832:	ff 92       	push	r15
     834:	0f 93       	push	r16
     836:	1f 93       	push	r17
     838:	fc 01       	movw	r30, r24
     83a:	e4 80       	ldd	r14, Z+4	; 0x04
     83c:	f5 80       	ldd	r15, Z+5	; 0x05
     83e:	06 81       	ldd	r16, Z+6	; 0x06
     840:	17 81       	ldd	r17, Z+7	; 0x07
     842:	d1 80       	ldd	r13, Z+1	; 0x01
     844:	80 81       	ld	r24, Z
     846:	82 30       	cpi	r24, 0x02	; 2
     848:	48 f4       	brcc	.+18     	; 0x85c <__pack_f+0x2e>
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	a0 e1       	ldi	r26, 0x10	; 16
     850:	b0 e0       	ldi	r27, 0x00	; 0
     852:	e8 2a       	or	r14, r24
     854:	f9 2a       	or	r15, r25
     856:	0a 2b       	or	r16, r26
     858:	1b 2b       	or	r17, r27
     85a:	a5 c0       	rjmp	.+330    	; 0x9a6 <__pack_f+0x178>
     85c:	84 30       	cpi	r24, 0x04	; 4
     85e:	09 f4       	brne	.+2      	; 0x862 <__pack_f+0x34>
     860:	9f c0       	rjmp	.+318    	; 0x9a0 <__pack_f+0x172>
     862:	82 30       	cpi	r24, 0x02	; 2
     864:	21 f4       	brne	.+8      	; 0x86e <__pack_f+0x40>
     866:	ee 24       	eor	r14, r14
     868:	ff 24       	eor	r15, r15
     86a:	87 01       	movw	r16, r14
     86c:	05 c0       	rjmp	.+10     	; 0x878 <__pack_f+0x4a>
     86e:	e1 14       	cp	r14, r1
     870:	f1 04       	cpc	r15, r1
     872:	01 05       	cpc	r16, r1
     874:	11 05       	cpc	r17, r1
     876:	19 f4       	brne	.+6      	; 0x87e <__pack_f+0x50>
     878:	e0 e0       	ldi	r30, 0x00	; 0
     87a:	f0 e0       	ldi	r31, 0x00	; 0
     87c:	96 c0       	rjmp	.+300    	; 0x9aa <__pack_f+0x17c>
     87e:	62 81       	ldd	r22, Z+2	; 0x02
     880:	73 81       	ldd	r23, Z+3	; 0x03
     882:	9f ef       	ldi	r25, 0xFF	; 255
     884:	62 38       	cpi	r22, 0x82	; 130
     886:	79 07       	cpc	r23, r25
     888:	0c f0       	brlt	.+2      	; 0x88c <__pack_f+0x5e>
     88a:	5b c0       	rjmp	.+182    	; 0x942 <__pack_f+0x114>
     88c:	22 e8       	ldi	r18, 0x82	; 130
     88e:	3f ef       	ldi	r19, 0xFF	; 255
     890:	26 1b       	sub	r18, r22
     892:	37 0b       	sbc	r19, r23
     894:	2a 31       	cpi	r18, 0x1A	; 26
     896:	31 05       	cpc	r19, r1
     898:	2c f0       	brlt	.+10     	; 0x8a4 <__pack_f+0x76>
     89a:	20 e0       	ldi	r18, 0x00	; 0
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	40 e0       	ldi	r20, 0x00	; 0
     8a0:	50 e0       	ldi	r21, 0x00	; 0
     8a2:	2a c0       	rjmp	.+84     	; 0x8f8 <__pack_f+0xca>
     8a4:	b8 01       	movw	r22, r16
     8a6:	a7 01       	movw	r20, r14
     8a8:	02 2e       	mov	r0, r18
     8aa:	04 c0       	rjmp	.+8      	; 0x8b4 <__pack_f+0x86>
     8ac:	76 95       	lsr	r23
     8ae:	67 95       	ror	r22
     8b0:	57 95       	ror	r21
     8b2:	47 95       	ror	r20
     8b4:	0a 94       	dec	r0
     8b6:	d2 f7       	brpl	.-12     	; 0x8ac <__pack_f+0x7e>
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	a0 e0       	ldi	r26, 0x00	; 0
     8be:	b0 e0       	ldi	r27, 0x00	; 0
     8c0:	04 c0       	rjmp	.+8      	; 0x8ca <__pack_f+0x9c>
     8c2:	88 0f       	add	r24, r24
     8c4:	99 1f       	adc	r25, r25
     8c6:	aa 1f       	adc	r26, r26
     8c8:	bb 1f       	adc	r27, r27
     8ca:	2a 95       	dec	r18
     8cc:	d2 f7       	brpl	.-12     	; 0x8c2 <__pack_f+0x94>
     8ce:	01 97       	sbiw	r24, 0x01	; 1
     8d0:	a1 09       	sbc	r26, r1
     8d2:	b1 09       	sbc	r27, r1
     8d4:	8e 21       	and	r24, r14
     8d6:	9f 21       	and	r25, r15
     8d8:	a0 23       	and	r26, r16
     8da:	b1 23       	and	r27, r17
     8dc:	00 97       	sbiw	r24, 0x00	; 0
     8de:	a1 05       	cpc	r26, r1
     8e0:	b1 05       	cpc	r27, r1
     8e2:	21 f0       	breq	.+8      	; 0x8ec <__pack_f+0xbe>
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	a0 e0       	ldi	r26, 0x00	; 0
     8ea:	b0 e0       	ldi	r27, 0x00	; 0
     8ec:	9a 01       	movw	r18, r20
     8ee:	ab 01       	movw	r20, r22
     8f0:	28 2b       	or	r18, r24
     8f2:	39 2b       	or	r19, r25
     8f4:	4a 2b       	or	r20, r26
     8f6:	5b 2b       	or	r21, r27
     8f8:	da 01       	movw	r26, r20
     8fa:	c9 01       	movw	r24, r18
     8fc:	8f 77       	andi	r24, 0x7F	; 127
     8fe:	90 70       	andi	r25, 0x00	; 0
     900:	a0 70       	andi	r26, 0x00	; 0
     902:	b0 70       	andi	r27, 0x00	; 0
     904:	80 34       	cpi	r24, 0x40	; 64
     906:	91 05       	cpc	r25, r1
     908:	a1 05       	cpc	r26, r1
     90a:	b1 05       	cpc	r27, r1
     90c:	39 f4       	brne	.+14     	; 0x91c <__pack_f+0xee>
     90e:	27 ff       	sbrs	r18, 7
     910:	09 c0       	rjmp	.+18     	; 0x924 <__pack_f+0xf6>
     912:	20 5c       	subi	r18, 0xC0	; 192
     914:	3f 4f       	sbci	r19, 0xFF	; 255
     916:	4f 4f       	sbci	r20, 0xFF	; 255
     918:	5f 4f       	sbci	r21, 0xFF	; 255
     91a:	04 c0       	rjmp	.+8      	; 0x924 <__pack_f+0xf6>
     91c:	21 5c       	subi	r18, 0xC1	; 193
     91e:	3f 4f       	sbci	r19, 0xFF	; 255
     920:	4f 4f       	sbci	r20, 0xFF	; 255
     922:	5f 4f       	sbci	r21, 0xFF	; 255
     924:	e0 e0       	ldi	r30, 0x00	; 0
     926:	f0 e0       	ldi	r31, 0x00	; 0
     928:	20 30       	cpi	r18, 0x00	; 0
     92a:	a0 e0       	ldi	r26, 0x00	; 0
     92c:	3a 07       	cpc	r19, r26
     92e:	a0 e0       	ldi	r26, 0x00	; 0
     930:	4a 07       	cpc	r20, r26
     932:	a0 e4       	ldi	r26, 0x40	; 64
     934:	5a 07       	cpc	r21, r26
     936:	10 f0       	brcs	.+4      	; 0x93c <__pack_f+0x10e>
     938:	e1 e0       	ldi	r30, 0x01	; 1
     93a:	f0 e0       	ldi	r31, 0x00	; 0
     93c:	79 01       	movw	r14, r18
     93e:	8a 01       	movw	r16, r20
     940:	27 c0       	rjmp	.+78     	; 0x990 <__pack_f+0x162>
     942:	60 38       	cpi	r22, 0x80	; 128
     944:	71 05       	cpc	r23, r1
     946:	64 f5       	brge	.+88     	; 0x9a0 <__pack_f+0x172>
     948:	fb 01       	movw	r30, r22
     94a:	e1 58       	subi	r30, 0x81	; 129
     94c:	ff 4f       	sbci	r31, 0xFF	; 255
     94e:	d8 01       	movw	r26, r16
     950:	c7 01       	movw	r24, r14
     952:	8f 77       	andi	r24, 0x7F	; 127
     954:	90 70       	andi	r25, 0x00	; 0
     956:	a0 70       	andi	r26, 0x00	; 0
     958:	b0 70       	andi	r27, 0x00	; 0
     95a:	80 34       	cpi	r24, 0x40	; 64
     95c:	91 05       	cpc	r25, r1
     95e:	a1 05       	cpc	r26, r1
     960:	b1 05       	cpc	r27, r1
     962:	39 f4       	brne	.+14     	; 0x972 <__pack_f+0x144>
     964:	e7 fe       	sbrs	r14, 7
     966:	0d c0       	rjmp	.+26     	; 0x982 <__pack_f+0x154>
     968:	80 e4       	ldi	r24, 0x40	; 64
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	a0 e0       	ldi	r26, 0x00	; 0
     96e:	b0 e0       	ldi	r27, 0x00	; 0
     970:	04 c0       	rjmp	.+8      	; 0x97a <__pack_f+0x14c>
     972:	8f e3       	ldi	r24, 0x3F	; 63
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	a0 e0       	ldi	r26, 0x00	; 0
     978:	b0 e0       	ldi	r27, 0x00	; 0
     97a:	e8 0e       	add	r14, r24
     97c:	f9 1e       	adc	r15, r25
     97e:	0a 1f       	adc	r16, r26
     980:	1b 1f       	adc	r17, r27
     982:	17 ff       	sbrs	r17, 7
     984:	05 c0       	rjmp	.+10     	; 0x990 <__pack_f+0x162>
     986:	16 95       	lsr	r17
     988:	07 95       	ror	r16
     98a:	f7 94       	ror	r15
     98c:	e7 94       	ror	r14
     98e:	31 96       	adiw	r30, 0x01	; 1
     990:	87 e0       	ldi	r24, 0x07	; 7
     992:	16 95       	lsr	r17
     994:	07 95       	ror	r16
     996:	f7 94       	ror	r15
     998:	e7 94       	ror	r14
     99a:	8a 95       	dec	r24
     99c:	d1 f7       	brne	.-12     	; 0x992 <__pack_f+0x164>
     99e:	05 c0       	rjmp	.+10     	; 0x9aa <__pack_f+0x17c>
     9a0:	ee 24       	eor	r14, r14
     9a2:	ff 24       	eor	r15, r15
     9a4:	87 01       	movw	r16, r14
     9a6:	ef ef       	ldi	r30, 0xFF	; 255
     9a8:	f0 e0       	ldi	r31, 0x00	; 0
     9aa:	6e 2f       	mov	r22, r30
     9ac:	67 95       	ror	r22
     9ae:	66 27       	eor	r22, r22
     9b0:	67 95       	ror	r22
     9b2:	90 2f       	mov	r25, r16
     9b4:	9f 77       	andi	r25, 0x7F	; 127
     9b6:	d7 94       	ror	r13
     9b8:	dd 24       	eor	r13, r13
     9ba:	d7 94       	ror	r13
     9bc:	8e 2f       	mov	r24, r30
     9be:	86 95       	lsr	r24
     9c0:	49 2f       	mov	r20, r25
     9c2:	46 2b       	or	r20, r22
     9c4:	58 2f       	mov	r21, r24
     9c6:	5d 29       	or	r21, r13
     9c8:	b7 01       	movw	r22, r14
     9ca:	ca 01       	movw	r24, r20
     9cc:	1f 91       	pop	r17
     9ce:	0f 91       	pop	r16
     9d0:	ff 90       	pop	r15
     9d2:	ef 90       	pop	r14
     9d4:	df 90       	pop	r13
     9d6:	08 95       	ret

000009d8 <__unpack_f>:
     9d8:	fc 01       	movw	r30, r24
     9da:	db 01       	movw	r26, r22
     9dc:	40 81       	ld	r20, Z
     9de:	51 81       	ldd	r21, Z+1	; 0x01
     9e0:	22 81       	ldd	r18, Z+2	; 0x02
     9e2:	62 2f       	mov	r22, r18
     9e4:	6f 77       	andi	r22, 0x7F	; 127
     9e6:	70 e0       	ldi	r23, 0x00	; 0
     9e8:	22 1f       	adc	r18, r18
     9ea:	22 27       	eor	r18, r18
     9ec:	22 1f       	adc	r18, r18
     9ee:	93 81       	ldd	r25, Z+3	; 0x03
     9f0:	89 2f       	mov	r24, r25
     9f2:	88 0f       	add	r24, r24
     9f4:	82 2b       	or	r24, r18
     9f6:	28 2f       	mov	r18, r24
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	99 1f       	adc	r25, r25
     9fc:	99 27       	eor	r25, r25
     9fe:	99 1f       	adc	r25, r25
     a00:	11 96       	adiw	r26, 0x01	; 1
     a02:	9c 93       	st	X, r25
     a04:	11 97       	sbiw	r26, 0x01	; 1
     a06:	21 15       	cp	r18, r1
     a08:	31 05       	cpc	r19, r1
     a0a:	a9 f5       	brne	.+106    	; 0xa76 <__unpack_f+0x9e>
     a0c:	41 15       	cp	r20, r1
     a0e:	51 05       	cpc	r21, r1
     a10:	61 05       	cpc	r22, r1
     a12:	71 05       	cpc	r23, r1
     a14:	11 f4       	brne	.+4      	; 0xa1a <__unpack_f+0x42>
     a16:	82 e0       	ldi	r24, 0x02	; 2
     a18:	37 c0       	rjmp	.+110    	; 0xa88 <__unpack_f+0xb0>
     a1a:	82 e8       	ldi	r24, 0x82	; 130
     a1c:	9f ef       	ldi	r25, 0xFF	; 255
     a1e:	13 96       	adiw	r26, 0x03	; 3
     a20:	9c 93       	st	X, r25
     a22:	8e 93       	st	-X, r24
     a24:	12 97       	sbiw	r26, 0x02	; 2
     a26:	9a 01       	movw	r18, r20
     a28:	ab 01       	movw	r20, r22
     a2a:	67 e0       	ldi	r22, 0x07	; 7
     a2c:	22 0f       	add	r18, r18
     a2e:	33 1f       	adc	r19, r19
     a30:	44 1f       	adc	r20, r20
     a32:	55 1f       	adc	r21, r21
     a34:	6a 95       	dec	r22
     a36:	d1 f7       	brne	.-12     	; 0xa2c <__unpack_f+0x54>
     a38:	83 e0       	ldi	r24, 0x03	; 3
     a3a:	8c 93       	st	X, r24
     a3c:	0d c0       	rjmp	.+26     	; 0xa58 <__unpack_f+0x80>
     a3e:	22 0f       	add	r18, r18
     a40:	33 1f       	adc	r19, r19
     a42:	44 1f       	adc	r20, r20
     a44:	55 1f       	adc	r21, r21
     a46:	12 96       	adiw	r26, 0x02	; 2
     a48:	8d 91       	ld	r24, X+
     a4a:	9c 91       	ld	r25, X
     a4c:	13 97       	sbiw	r26, 0x03	; 3
     a4e:	01 97       	sbiw	r24, 0x01	; 1
     a50:	13 96       	adiw	r26, 0x03	; 3
     a52:	9c 93       	st	X, r25
     a54:	8e 93       	st	-X, r24
     a56:	12 97       	sbiw	r26, 0x02	; 2
     a58:	20 30       	cpi	r18, 0x00	; 0
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	38 07       	cpc	r19, r24
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	48 07       	cpc	r20, r24
     a62:	80 e4       	ldi	r24, 0x40	; 64
     a64:	58 07       	cpc	r21, r24
     a66:	58 f3       	brcs	.-42     	; 0xa3e <__unpack_f+0x66>
     a68:	14 96       	adiw	r26, 0x04	; 4
     a6a:	2d 93       	st	X+, r18
     a6c:	3d 93       	st	X+, r19
     a6e:	4d 93       	st	X+, r20
     a70:	5c 93       	st	X, r21
     a72:	17 97       	sbiw	r26, 0x07	; 7
     a74:	08 95       	ret
     a76:	2f 3f       	cpi	r18, 0xFF	; 255
     a78:	31 05       	cpc	r19, r1
     a7a:	79 f4       	brne	.+30     	; 0xa9a <__unpack_f+0xc2>
     a7c:	41 15       	cp	r20, r1
     a7e:	51 05       	cpc	r21, r1
     a80:	61 05       	cpc	r22, r1
     a82:	71 05       	cpc	r23, r1
     a84:	19 f4       	brne	.+6      	; 0xa8c <__unpack_f+0xb4>
     a86:	84 e0       	ldi	r24, 0x04	; 4
     a88:	8c 93       	st	X, r24
     a8a:	08 95       	ret
     a8c:	64 ff       	sbrs	r22, 4
     a8e:	03 c0       	rjmp	.+6      	; 0xa96 <__unpack_f+0xbe>
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	8c 93       	st	X, r24
     a94:	12 c0       	rjmp	.+36     	; 0xaba <__unpack_f+0xe2>
     a96:	1c 92       	st	X, r1
     a98:	10 c0       	rjmp	.+32     	; 0xaba <__unpack_f+0xe2>
     a9a:	2f 57       	subi	r18, 0x7F	; 127
     a9c:	30 40       	sbci	r19, 0x00	; 0
     a9e:	13 96       	adiw	r26, 0x03	; 3
     aa0:	3c 93       	st	X, r19
     aa2:	2e 93       	st	-X, r18
     aa4:	12 97       	sbiw	r26, 0x02	; 2
     aa6:	83 e0       	ldi	r24, 0x03	; 3
     aa8:	8c 93       	st	X, r24
     aaa:	87 e0       	ldi	r24, 0x07	; 7
     aac:	44 0f       	add	r20, r20
     aae:	55 1f       	adc	r21, r21
     ab0:	66 1f       	adc	r22, r22
     ab2:	77 1f       	adc	r23, r23
     ab4:	8a 95       	dec	r24
     ab6:	d1 f7       	brne	.-12     	; 0xaac <__unpack_f+0xd4>
     ab8:	70 64       	ori	r23, 0x40	; 64
     aba:	14 96       	adiw	r26, 0x04	; 4
     abc:	4d 93       	st	X+, r20
     abe:	5d 93       	st	X+, r21
     ac0:	6d 93       	st	X+, r22
     ac2:	7c 93       	st	X, r23
     ac4:	17 97       	sbiw	r26, 0x07	; 7
     ac6:	08 95       	ret

00000ac8 <__fpcmp_parts_f>:
     ac8:	1f 93       	push	r17
     aca:	dc 01       	movw	r26, r24
     acc:	fb 01       	movw	r30, r22
     ace:	9c 91       	ld	r25, X
     ad0:	92 30       	cpi	r25, 0x02	; 2
     ad2:	08 f4       	brcc	.+2      	; 0xad6 <__fpcmp_parts_f+0xe>
     ad4:	47 c0       	rjmp	.+142    	; 0xb64 <__fpcmp_parts_f+0x9c>
     ad6:	80 81       	ld	r24, Z
     ad8:	82 30       	cpi	r24, 0x02	; 2
     ada:	08 f4       	brcc	.+2      	; 0xade <__fpcmp_parts_f+0x16>
     adc:	43 c0       	rjmp	.+134    	; 0xb64 <__fpcmp_parts_f+0x9c>
     ade:	94 30       	cpi	r25, 0x04	; 4
     ae0:	51 f4       	brne	.+20     	; 0xaf6 <__fpcmp_parts_f+0x2e>
     ae2:	11 96       	adiw	r26, 0x01	; 1
     ae4:	1c 91       	ld	r17, X
     ae6:	84 30       	cpi	r24, 0x04	; 4
     ae8:	99 f5       	brne	.+102    	; 0xb50 <__fpcmp_parts_f+0x88>
     aea:	81 81       	ldd	r24, Z+1	; 0x01
     aec:	68 2f       	mov	r22, r24
     aee:	70 e0       	ldi	r23, 0x00	; 0
     af0:	61 1b       	sub	r22, r17
     af2:	71 09       	sbc	r23, r1
     af4:	3f c0       	rjmp	.+126    	; 0xb74 <__fpcmp_parts_f+0xac>
     af6:	84 30       	cpi	r24, 0x04	; 4
     af8:	21 f0       	breq	.+8      	; 0xb02 <__fpcmp_parts_f+0x3a>
     afa:	92 30       	cpi	r25, 0x02	; 2
     afc:	31 f4       	brne	.+12     	; 0xb0a <__fpcmp_parts_f+0x42>
     afe:	82 30       	cpi	r24, 0x02	; 2
     b00:	b9 f1       	breq	.+110    	; 0xb70 <__fpcmp_parts_f+0xa8>
     b02:	81 81       	ldd	r24, Z+1	; 0x01
     b04:	88 23       	and	r24, r24
     b06:	89 f1       	breq	.+98     	; 0xb6a <__fpcmp_parts_f+0xa2>
     b08:	2d c0       	rjmp	.+90     	; 0xb64 <__fpcmp_parts_f+0x9c>
     b0a:	11 96       	adiw	r26, 0x01	; 1
     b0c:	1c 91       	ld	r17, X
     b0e:	11 97       	sbiw	r26, 0x01	; 1
     b10:	82 30       	cpi	r24, 0x02	; 2
     b12:	f1 f0       	breq	.+60     	; 0xb50 <__fpcmp_parts_f+0x88>
     b14:	81 81       	ldd	r24, Z+1	; 0x01
     b16:	18 17       	cp	r17, r24
     b18:	d9 f4       	brne	.+54     	; 0xb50 <__fpcmp_parts_f+0x88>
     b1a:	12 96       	adiw	r26, 0x02	; 2
     b1c:	2d 91       	ld	r18, X+
     b1e:	3c 91       	ld	r19, X
     b20:	13 97       	sbiw	r26, 0x03	; 3
     b22:	82 81       	ldd	r24, Z+2	; 0x02
     b24:	93 81       	ldd	r25, Z+3	; 0x03
     b26:	82 17       	cp	r24, r18
     b28:	93 07       	cpc	r25, r19
     b2a:	94 f0       	brlt	.+36     	; 0xb50 <__fpcmp_parts_f+0x88>
     b2c:	28 17       	cp	r18, r24
     b2e:	39 07       	cpc	r19, r25
     b30:	bc f0       	brlt	.+46     	; 0xb60 <__fpcmp_parts_f+0x98>
     b32:	14 96       	adiw	r26, 0x04	; 4
     b34:	8d 91       	ld	r24, X+
     b36:	9d 91       	ld	r25, X+
     b38:	0d 90       	ld	r0, X+
     b3a:	bc 91       	ld	r27, X
     b3c:	a0 2d       	mov	r26, r0
     b3e:	24 81       	ldd	r18, Z+4	; 0x04
     b40:	35 81       	ldd	r19, Z+5	; 0x05
     b42:	46 81       	ldd	r20, Z+6	; 0x06
     b44:	57 81       	ldd	r21, Z+7	; 0x07
     b46:	28 17       	cp	r18, r24
     b48:	39 07       	cpc	r19, r25
     b4a:	4a 07       	cpc	r20, r26
     b4c:	5b 07       	cpc	r21, r27
     b4e:	18 f4       	brcc	.+6      	; 0xb56 <__fpcmp_parts_f+0x8e>
     b50:	11 23       	and	r17, r17
     b52:	41 f0       	breq	.+16     	; 0xb64 <__fpcmp_parts_f+0x9c>
     b54:	0a c0       	rjmp	.+20     	; 0xb6a <__fpcmp_parts_f+0xa2>
     b56:	82 17       	cp	r24, r18
     b58:	93 07       	cpc	r25, r19
     b5a:	a4 07       	cpc	r26, r20
     b5c:	b5 07       	cpc	r27, r21
     b5e:	40 f4       	brcc	.+16     	; 0xb70 <__fpcmp_parts_f+0xa8>
     b60:	11 23       	and	r17, r17
     b62:	19 f0       	breq	.+6      	; 0xb6a <__fpcmp_parts_f+0xa2>
     b64:	61 e0       	ldi	r22, 0x01	; 1
     b66:	70 e0       	ldi	r23, 0x00	; 0
     b68:	05 c0       	rjmp	.+10     	; 0xb74 <__fpcmp_parts_f+0xac>
     b6a:	6f ef       	ldi	r22, 0xFF	; 255
     b6c:	7f ef       	ldi	r23, 0xFF	; 255
     b6e:	02 c0       	rjmp	.+4      	; 0xb74 <__fpcmp_parts_f+0xac>
     b70:	60 e0       	ldi	r22, 0x00	; 0
     b72:	70 e0       	ldi	r23, 0x00	; 0
     b74:	cb 01       	movw	r24, r22
     b76:	1f 91       	pop	r17
     b78:	08 95       	ret

00000b7a <DIO_vidPortIdentification>:
u8* Global_pu8DIOPIN=0;
u8* Global_pu8DIOPORT=0;

/*Port Identification from pin number or nibbles number or ports ids*/
void DIO_vidPortIdentification(u8 Copy_u8PinNibblePortNumber)
{
     b7a:	df 93       	push	r29
     b7c:	cf 93       	push	r28
     b7e:	00 d0       	rcall	.+0      	; 0xb80 <DIO_vidPortIdentification+0x6>
     b80:	00 d0       	rcall	.+0      	; 0xb82 <DIO_vidPortIdentification+0x8>
     b82:	cd b7       	in	r28, 0x3d	; 61
     b84:	de b7       	in	r29, 0x3e	; 62
     b86:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8DIOPortId;
	Local_u8DIOPortId=Copy_u8PinNibblePortNumber/8;
     b88:	8a 81       	ldd	r24, Y+2	; 0x02
     b8a:	86 95       	lsr	r24
     b8c:	86 95       	lsr	r24
     b8e:	86 95       	lsr	r24
     b90:	89 83       	std	Y+1, r24	; 0x01

	switch(Local_u8DIOPortId)
     b92:	89 81       	ldd	r24, Y+1	; 0x01
     b94:	28 2f       	mov	r18, r24
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	3c 83       	std	Y+4, r19	; 0x04
     b9a:	2b 83       	std	Y+3, r18	; 0x03
     b9c:	8b 81       	ldd	r24, Y+3	; 0x03
     b9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ba0:	81 30       	cpi	r24, 0x01	; 1
     ba2:	91 05       	cpc	r25, r1
     ba4:	41 f1       	breq	.+80     	; 0xbf6 <DIO_vidPortIdentification+0x7c>
     ba6:	2b 81       	ldd	r18, Y+3	; 0x03
     ba8:	3c 81       	ldd	r19, Y+4	; 0x04
     baa:	22 30       	cpi	r18, 0x02	; 2
     bac:	31 05       	cpc	r19, r1
     bae:	2c f4       	brge	.+10     	; 0xbba <DIO_vidPortIdentification+0x40>
     bb0:	8b 81       	ldd	r24, Y+3	; 0x03
     bb2:	9c 81       	ldd	r25, Y+4	; 0x04
     bb4:	00 97       	sbiw	r24, 0x00	; 0
     bb6:	61 f0       	breq	.+24     	; 0xbd0 <DIO_vidPortIdentification+0x56>
     bb8:	56 c0       	rjmp	.+172    	; 0xc66 <DIO_vidPortIdentification+0xec>
     bba:	2b 81       	ldd	r18, Y+3	; 0x03
     bbc:	3c 81       	ldd	r19, Y+4	; 0x04
     bbe:	22 30       	cpi	r18, 0x02	; 2
     bc0:	31 05       	cpc	r19, r1
     bc2:	61 f1       	breq	.+88     	; 0xc1c <DIO_vidPortIdentification+0xa2>
     bc4:	8b 81       	ldd	r24, Y+3	; 0x03
     bc6:	9c 81       	ldd	r25, Y+4	; 0x04
     bc8:	83 30       	cpi	r24, 0x03	; 3
     bca:	91 05       	cpc	r25, r1
     bcc:	d1 f1       	breq	.+116    	; 0xc42 <DIO_vidPortIdentification+0xc8>
     bce:	4b c0       	rjmp	.+150    	; 0xc66 <DIO_vidPortIdentification+0xec>
	{
		/*port A*/
		case 0 : 
		{
			Global_pu8DIODDR=(u8*)&DDRA;
     bd0:	8a e3       	ldi	r24, 0x3A	; 58
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	90 93 69 01 	sts	0x0169, r25
     bd8:	80 93 68 01 	sts	0x0168, r24
			Global_pu8DIOPIN=(u8*)&PINA;
     bdc:	89 e3       	ldi	r24, 0x39	; 57
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	90 93 6b 01 	sts	0x016B, r25
     be4:	80 93 6a 01 	sts	0x016A, r24
			Global_pu8DIOPORT=(u8*)&PORTA;
     be8:	8b e3       	ldi	r24, 0x3B	; 59
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	90 93 6d 01 	sts	0x016D, r25
     bf0:	80 93 6c 01 	sts	0x016C, r24
     bf4:	38 c0       	rjmp	.+112    	; 0xc66 <DIO_vidPortIdentification+0xec>

		}
		/*port B*/
		case 1 : 
		{
			Global_pu8DIODDR=(u8*)&DDRB;
     bf6:	87 e3       	ldi	r24, 0x37	; 55
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	90 93 69 01 	sts	0x0169, r25
     bfe:	80 93 68 01 	sts	0x0168, r24
			Global_pu8DIOPIN=(u8*)&PINB;
     c02:	86 e3       	ldi	r24, 0x36	; 54
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	90 93 6b 01 	sts	0x016B, r25
     c0a:	80 93 6a 01 	sts	0x016A, r24
			Global_pu8DIOPORT=(u8*)&PORTB;
     c0e:	88 e3       	ldi	r24, 0x38	; 56
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	90 93 6d 01 	sts	0x016D, r25
     c16:	80 93 6c 01 	sts	0x016C, r24
     c1a:	25 c0       	rjmp	.+74     	; 0xc66 <DIO_vidPortIdentification+0xec>

		}
		/*port C*/
		case 2 : 
		{
			Global_pu8DIODDR=(u8*)&DDRC;
     c1c:	84 e3       	ldi	r24, 0x34	; 52
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	90 93 69 01 	sts	0x0169, r25
     c24:	80 93 68 01 	sts	0x0168, r24
			Global_pu8DIOPIN=(u8*)&PINC;
     c28:	83 e3       	ldi	r24, 0x33	; 51
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	90 93 6b 01 	sts	0x016B, r25
     c30:	80 93 6a 01 	sts	0x016A, r24
			Global_pu8DIOPORT=(u8*)&PORTC;
     c34:	85 e3       	ldi	r24, 0x35	; 53
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	90 93 6d 01 	sts	0x016D, r25
     c3c:	80 93 6c 01 	sts	0x016C, r24
     c40:	12 c0       	rjmp	.+36     	; 0xc66 <DIO_vidPortIdentification+0xec>

		}
		/*port D*/
		case 3 : 
		{
			Global_pu8DIODDR=(u8*)&DDRD;
     c42:	81 e3       	ldi	r24, 0x31	; 49
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	90 93 69 01 	sts	0x0169, r25
     c4a:	80 93 68 01 	sts	0x0168, r24
			Global_pu8DIOPIN=(u8*)&PIND;
     c4e:	80 e3       	ldi	r24, 0x30	; 48
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	90 93 6b 01 	sts	0x016B, r25
     c56:	80 93 6a 01 	sts	0x016A, r24
			Global_pu8DIOPORT=(u8*)&PORTD;
     c5a:	82 e3       	ldi	r24, 0x32	; 50
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	90 93 6d 01 	sts	0x016D, r25
     c62:	80 93 6c 01 	sts	0x016C, r24
		}
		/*useless*/
		default : 
		{}
	}
}
     c66:	0f 90       	pop	r0
     c68:	0f 90       	pop	r0
     c6a:	0f 90       	pop	r0
     c6c:	0f 90       	pop	r0
     c6e:	cf 91       	pop	r28
     c70:	df 91       	pop	r29
     c72:	08 95       	ret

00000c74 <DIO_vidSetPinDirection>:

/*Set Pin Direction*/
void DIO_vidSetPinDirection(u8 Copy_u8PinNumber,u8 copy_u8PinDirection)
{
     c74:	df 93       	push	r29
     c76:	cf 93       	push	r28
     c78:	00 d0       	rcall	.+0      	; 0xc7a <DIO_vidSetPinDirection+0x6>
     c7a:	00 d0       	rcall	.+0      	; 0xc7c <DIO_vidSetPinDirection+0x8>
     c7c:	0f 92       	push	r0
     c7e:	cd b7       	in	r28, 0x3d	; 61
     c80:	de b7       	in	r29, 0x3e	; 62
     c82:	8a 83       	std	Y+2, r24	; 0x02
     c84:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8DIOPinNumber;
	Local_u8DIOPinNumber=Copy_u8PinNumber%8;
     c86:	8a 81       	ldd	r24, Y+2	; 0x02
     c88:	87 70       	andi	r24, 0x07	; 7
     c8a:	89 83       	std	Y+1, r24	; 0x01

	/*Port Identification from pin number*/
	DIO_vidPortIdentification(Copy_u8PinNumber);
     c8c:	8a 81       	ldd	r24, Y+2	; 0x02
     c8e:	0e 94 bd 05 	call	0xb7a	; 0xb7a <DIO_vidPortIdentification>

	switch(copy_u8PinDirection)
     c92:	8b 81       	ldd	r24, Y+3	; 0x03
     c94:	28 2f       	mov	r18, r24
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	3d 83       	std	Y+5, r19	; 0x05
     c9a:	2c 83       	std	Y+4, r18	; 0x04
     c9c:	8c 81       	ldd	r24, Y+4	; 0x04
     c9e:	9d 81       	ldd	r25, Y+5	; 0x05
     ca0:	81 30       	cpi	r24, 0x01	; 1
     ca2:	91 05       	cpc	r25, r1
     ca4:	19 f1       	breq	.+70     	; 0xcec <DIO_vidSetPinDirection+0x78>
     ca6:	2c 81       	ldd	r18, Y+4	; 0x04
     ca8:	3d 81       	ldd	r19, Y+5	; 0x05
     caa:	22 30       	cpi	r18, 0x02	; 2
     cac:	31 05       	cpc	r19, r1
     cae:	09 f4       	brne	.+2      	; 0xcb2 <DIO_vidSetPinDirection+0x3e>
     cb0:	4c c0       	rjmp	.+152    	; 0xd4a <DIO_vidSetPinDirection+0xd6>
     cb2:	8c 81       	ldd	r24, Y+4	; 0x04
     cb4:	9d 81       	ldd	r25, Y+5	; 0x05
     cb6:	00 97       	sbiw	r24, 0x00	; 0
     cb8:	09 f0       	breq	.+2      	; 0xcbc <DIO_vidSetPinDirection+0x48>
     cba:	76 c0       	rjmp	.+236    	; 0xda8 <DIO_vidSetPinDirection+0x134>
	{
		/*output*/
		case OUTPUT :
		{
			SET_BIT(DDR,Local_u8DIOPinNumber);
     cbc:	a0 91 68 01 	lds	r26, 0x0168
     cc0:	b0 91 69 01 	lds	r27, 0x0169
     cc4:	e0 91 68 01 	lds	r30, 0x0168
     cc8:	f0 91 69 01 	lds	r31, 0x0169
     ccc:	80 81       	ld	r24, Z
     cce:	48 2f       	mov	r20, r24
     cd0:	89 81       	ldd	r24, Y+1	; 0x01
     cd2:	28 2f       	mov	r18, r24
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	02 2e       	mov	r0, r18
     cdc:	02 c0       	rjmp	.+4      	; 0xce2 <DIO_vidSetPinDirection+0x6e>
     cde:	88 0f       	add	r24, r24
     ce0:	99 1f       	adc	r25, r25
     ce2:	0a 94       	dec	r0
     ce4:	e2 f7       	brpl	.-8      	; 0xcde <DIO_vidSetPinDirection+0x6a>
     ce6:	84 2b       	or	r24, r20
     ce8:	8c 93       	st	X, r24
     cea:	5e c0       	rjmp	.+188    	; 0xda8 <DIO_vidSetPinDirection+0x134>
			break;
		}
		/*input with pull up*/
		case INPUT_PULL_UP :
		{
			CLEAR_BIT(DDR,Local_u8DIOPinNumber);
     cec:	a0 91 68 01 	lds	r26, 0x0168
     cf0:	b0 91 69 01 	lds	r27, 0x0169
     cf4:	e0 91 68 01 	lds	r30, 0x0168
     cf8:	f0 91 69 01 	lds	r31, 0x0169
     cfc:	80 81       	ld	r24, Z
     cfe:	48 2f       	mov	r20, r24
     d00:	89 81       	ldd	r24, Y+1	; 0x01
     d02:	28 2f       	mov	r18, r24
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	02 c0       	rjmp	.+4      	; 0xd10 <DIO_vidSetPinDirection+0x9c>
     d0c:	88 0f       	add	r24, r24
     d0e:	99 1f       	adc	r25, r25
     d10:	2a 95       	dec	r18
     d12:	e2 f7       	brpl	.-8      	; 0xd0c <DIO_vidSetPinDirection+0x98>
     d14:	80 95       	com	r24
     d16:	84 23       	and	r24, r20
     d18:	8c 93       	st	X, r24
			SET_BIT(PORT,Local_u8DIOPinNumber);
     d1a:	a0 91 6c 01 	lds	r26, 0x016C
     d1e:	b0 91 6d 01 	lds	r27, 0x016D
     d22:	e0 91 6c 01 	lds	r30, 0x016C
     d26:	f0 91 6d 01 	lds	r31, 0x016D
     d2a:	80 81       	ld	r24, Z
     d2c:	48 2f       	mov	r20, r24
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
     d30:	28 2f       	mov	r18, r24
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	02 2e       	mov	r0, r18
     d3a:	02 c0       	rjmp	.+4      	; 0xd40 <DIO_vidSetPinDirection+0xcc>
     d3c:	88 0f       	add	r24, r24
     d3e:	99 1f       	adc	r25, r25
     d40:	0a 94       	dec	r0
     d42:	e2 f7       	brpl	.-8      	; 0xd3c <DIO_vidSetPinDirection+0xc8>
     d44:	84 2b       	or	r24, r20
     d46:	8c 93       	st	X, r24
     d48:	2f c0       	rjmp	.+94     	; 0xda8 <DIO_vidSetPinDirection+0x134>
			break;
		}
		/*input with high impedance*/
		case INPUT_HIGH_Z :
		{
			CLEAR_BIT(DDR,Local_u8DIOPinNumber);
     d4a:	a0 91 68 01 	lds	r26, 0x0168
     d4e:	b0 91 69 01 	lds	r27, 0x0169
     d52:	e0 91 68 01 	lds	r30, 0x0168
     d56:	f0 91 69 01 	lds	r31, 0x0169
     d5a:	80 81       	ld	r24, Z
     d5c:	48 2f       	mov	r20, r24
     d5e:	89 81       	ldd	r24, Y+1	; 0x01
     d60:	28 2f       	mov	r18, r24
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	02 c0       	rjmp	.+4      	; 0xd6e <DIO_vidSetPinDirection+0xfa>
     d6a:	88 0f       	add	r24, r24
     d6c:	99 1f       	adc	r25, r25
     d6e:	2a 95       	dec	r18
     d70:	e2 f7       	brpl	.-8      	; 0xd6a <DIO_vidSetPinDirection+0xf6>
     d72:	80 95       	com	r24
     d74:	84 23       	and	r24, r20
     d76:	8c 93       	st	X, r24
			CLEAR_BIT(PORT,Local_u8DIOPinNumber);
     d78:	a0 91 6c 01 	lds	r26, 0x016C
     d7c:	b0 91 6d 01 	lds	r27, 0x016D
     d80:	e0 91 6c 01 	lds	r30, 0x016C
     d84:	f0 91 6d 01 	lds	r31, 0x016D
     d88:	80 81       	ld	r24, Z
     d8a:	48 2f       	mov	r20, r24
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	28 2f       	mov	r18, r24
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	02 2e       	mov	r0, r18
     d98:	02 c0       	rjmp	.+4      	; 0xd9e <DIO_vidSetPinDirection+0x12a>
     d9a:	88 0f       	add	r24, r24
     d9c:	99 1f       	adc	r25, r25
     d9e:	0a 94       	dec	r0
     da0:	e2 f7       	brpl	.-8      	; 0xd9a <DIO_vidSetPinDirection+0x126>
     da2:	80 95       	com	r24
     da4:	84 23       	and	r24, r20
     da6:	8c 93       	st	X, r24
		}
		/*useless*/
		default : 
		{}
	}
}
     da8:	0f 90       	pop	r0
     daa:	0f 90       	pop	r0
     dac:	0f 90       	pop	r0
     dae:	0f 90       	pop	r0
     db0:	0f 90       	pop	r0
     db2:	cf 91       	pop	r28
     db4:	df 91       	pop	r29
     db6:	08 95       	ret

00000db8 <DIO_vidSetLowNibbleDirection>:

/*Set Low Nibble Direction*/
void DIO_vidSetLowNibbleDirection(u8 Copy_u8LowNibbleNumber,u8 copy_u8LowNibbleDirection)
{
     db8:	df 93       	push	r29
     dba:	cf 93       	push	r28
     dbc:	00 d0       	rcall	.+0      	; 0xdbe <DIO_vidSetLowNibbleDirection+0x6>
     dbe:	00 d0       	rcall	.+0      	; 0xdc0 <DIO_vidSetLowNibbleDirection+0x8>
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
     dc4:	89 83       	std	Y+1, r24	; 0x01
     dc6:	6a 83       	std	Y+2, r22	; 0x02
	/*Port Identification from Low Nibble Number*/
	DIO_vidPortIdentification(Copy_u8LowNibbleNumber);
     dc8:	89 81       	ldd	r24, Y+1	; 0x01
     dca:	0e 94 bd 05 	call	0xb7a	; 0xb7a <DIO_vidPortIdentification>

	switch(copy_u8LowNibbleDirection)
     dce:	8a 81       	ldd	r24, Y+2	; 0x02
     dd0:	28 2f       	mov	r18, r24
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	3c 83       	std	Y+4, r19	; 0x04
     dd6:	2b 83       	std	Y+3, r18	; 0x03
     dd8:	8b 81       	ldd	r24, Y+3	; 0x03
     dda:	9c 81       	ldd	r25, Y+4	; 0x04
     ddc:	81 30       	cpi	r24, 0x01	; 1
     dde:	91 05       	cpc	r25, r1
     de0:	a9 f0       	breq	.+42     	; 0xe0c <DIO_vidSetLowNibbleDirection+0x54>
     de2:	2b 81       	ldd	r18, Y+3	; 0x03
     de4:	3c 81       	ldd	r19, Y+4	; 0x04
     de6:	22 30       	cpi	r18, 0x02	; 2
     de8:	31 05       	cpc	r19, r1
     dea:	39 f1       	breq	.+78     	; 0xe3a <DIO_vidSetLowNibbleDirection+0x82>
     dec:	8b 81       	ldd	r24, Y+3	; 0x03
     dee:	9c 81       	ldd	r25, Y+4	; 0x04
     df0:	00 97       	sbiw	r24, 0x00	; 0
     df2:	c9 f5       	brne	.+114    	; 0xe66 <DIO_vidSetLowNibbleDirection+0xae>
	{
		/*output*/
		case OUTPUT :
		{
			SET_LOW_NIBBLE(DDR);
     df4:	a0 91 68 01 	lds	r26, 0x0168
     df8:	b0 91 69 01 	lds	r27, 0x0169
     dfc:	e0 91 68 01 	lds	r30, 0x0168
     e00:	f0 91 69 01 	lds	r31, 0x0169
     e04:	80 81       	ld	r24, Z
     e06:	8f 60       	ori	r24, 0x0F	; 15
     e08:	8c 93       	st	X, r24
     e0a:	2d c0       	rjmp	.+90     	; 0xe66 <DIO_vidSetLowNibbleDirection+0xae>
			break;
		}
		/*input with pull up*/
		case INPUT_PULL_UP :
		{
			CLEAR_LOW_NIBBLE(DDR);
     e0c:	a0 91 68 01 	lds	r26, 0x0168
     e10:	b0 91 69 01 	lds	r27, 0x0169
     e14:	e0 91 68 01 	lds	r30, 0x0168
     e18:	f0 91 69 01 	lds	r31, 0x0169
     e1c:	80 81       	ld	r24, Z
     e1e:	80 7f       	andi	r24, 0xF0	; 240
     e20:	8c 93       	st	X, r24
			SET_LOW_NIBBLE(PORT);
     e22:	a0 91 6c 01 	lds	r26, 0x016C
     e26:	b0 91 6d 01 	lds	r27, 0x016D
     e2a:	e0 91 6c 01 	lds	r30, 0x016C
     e2e:	f0 91 6d 01 	lds	r31, 0x016D
     e32:	80 81       	ld	r24, Z
     e34:	8f 60       	ori	r24, 0x0F	; 15
     e36:	8c 93       	st	X, r24
     e38:	16 c0       	rjmp	.+44     	; 0xe66 <DIO_vidSetLowNibbleDirection+0xae>
			break;
		}
		/*input with high impedance*/
		case INPUT_HIGH_Z :
		{
			CLEAR_LOW_NIBBLE(DDR);
     e3a:	a0 91 68 01 	lds	r26, 0x0168
     e3e:	b0 91 69 01 	lds	r27, 0x0169
     e42:	e0 91 68 01 	lds	r30, 0x0168
     e46:	f0 91 69 01 	lds	r31, 0x0169
     e4a:	80 81       	ld	r24, Z
     e4c:	80 7f       	andi	r24, 0xF0	; 240
     e4e:	8c 93       	st	X, r24
			CLEAR_LOW_NIBBLE(PORT);
     e50:	a0 91 6c 01 	lds	r26, 0x016C
     e54:	b0 91 6d 01 	lds	r27, 0x016D
     e58:	e0 91 6c 01 	lds	r30, 0x016C
     e5c:	f0 91 6d 01 	lds	r31, 0x016D
     e60:	80 81       	ld	r24, Z
     e62:	80 7f       	andi	r24, 0xF0	; 240
     e64:	8c 93       	st	X, r24
		}
		/*useless*/
		default : 
		{}
	}
}
     e66:	0f 90       	pop	r0
     e68:	0f 90       	pop	r0
     e6a:	0f 90       	pop	r0
     e6c:	0f 90       	pop	r0
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	08 95       	ret

00000e74 <DIO_vidSetHighNibbleDirection>:

/*Set High Nibble Direction*/
void DIO_vidSetHighNibbleDirection(u8 Copy_u8HighNibbleNumber,u8 copy_u8HighNibbleDirection)
{
     e74:	df 93       	push	r29
     e76:	cf 93       	push	r28
     e78:	00 d0       	rcall	.+0      	; 0xe7a <DIO_vidSetHighNibbleDirection+0x6>
     e7a:	00 d0       	rcall	.+0      	; 0xe7c <DIO_vidSetHighNibbleDirection+0x8>
     e7c:	cd b7       	in	r28, 0x3d	; 61
     e7e:	de b7       	in	r29, 0x3e	; 62
     e80:	89 83       	std	Y+1, r24	; 0x01
     e82:	6a 83       	std	Y+2, r22	; 0x02
	/*Port Identification from High Nibble Number*/
	DIO_vidPortIdentification(Copy_u8HighNibbleNumber);
     e84:	89 81       	ldd	r24, Y+1	; 0x01
     e86:	0e 94 bd 05 	call	0xb7a	; 0xb7a <DIO_vidPortIdentification>

	switch(copy_u8HighNibbleDirection)
     e8a:	8a 81       	ldd	r24, Y+2	; 0x02
     e8c:	28 2f       	mov	r18, r24
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	3c 83       	std	Y+4, r19	; 0x04
     e92:	2b 83       	std	Y+3, r18	; 0x03
     e94:	8b 81       	ldd	r24, Y+3	; 0x03
     e96:	9c 81       	ldd	r25, Y+4	; 0x04
     e98:	81 30       	cpi	r24, 0x01	; 1
     e9a:	91 05       	cpc	r25, r1
     e9c:	a9 f0       	breq	.+42     	; 0xec8 <DIO_vidSetHighNibbleDirection+0x54>
     e9e:	2b 81       	ldd	r18, Y+3	; 0x03
     ea0:	3c 81       	ldd	r19, Y+4	; 0x04
     ea2:	22 30       	cpi	r18, 0x02	; 2
     ea4:	31 05       	cpc	r19, r1
     ea6:	39 f1       	breq	.+78     	; 0xef6 <DIO_vidSetHighNibbleDirection+0x82>
     ea8:	8b 81       	ldd	r24, Y+3	; 0x03
     eaa:	9c 81       	ldd	r25, Y+4	; 0x04
     eac:	00 97       	sbiw	r24, 0x00	; 0
     eae:	c9 f5       	brne	.+114    	; 0xf22 <DIO_vidSetHighNibbleDirection+0xae>
	{
		/*output*/
		case OUTPUT :
		{
			SET_HIGH_NIBBLE(DDR);
     eb0:	a0 91 68 01 	lds	r26, 0x0168
     eb4:	b0 91 69 01 	lds	r27, 0x0169
     eb8:	e0 91 68 01 	lds	r30, 0x0168
     ebc:	f0 91 69 01 	lds	r31, 0x0169
     ec0:	80 81       	ld	r24, Z
     ec2:	80 6f       	ori	r24, 0xF0	; 240
     ec4:	8c 93       	st	X, r24
     ec6:	2d c0       	rjmp	.+90     	; 0xf22 <DIO_vidSetHighNibbleDirection+0xae>
			break;
		}
		/*input with pull up*/
		case INPUT_PULL_UP :
		{
			CLEAR_HIGH_NIBBLE(DDR);
     ec8:	a0 91 68 01 	lds	r26, 0x0168
     ecc:	b0 91 69 01 	lds	r27, 0x0169
     ed0:	e0 91 68 01 	lds	r30, 0x0168
     ed4:	f0 91 69 01 	lds	r31, 0x0169
     ed8:	80 81       	ld	r24, Z
     eda:	8f 70       	andi	r24, 0x0F	; 15
     edc:	8c 93       	st	X, r24
			SET_HIGH_NIBBLE(PORT);
     ede:	a0 91 6c 01 	lds	r26, 0x016C
     ee2:	b0 91 6d 01 	lds	r27, 0x016D
     ee6:	e0 91 6c 01 	lds	r30, 0x016C
     eea:	f0 91 6d 01 	lds	r31, 0x016D
     eee:	80 81       	ld	r24, Z
     ef0:	80 6f       	ori	r24, 0xF0	; 240
     ef2:	8c 93       	st	X, r24
     ef4:	16 c0       	rjmp	.+44     	; 0xf22 <DIO_vidSetHighNibbleDirection+0xae>
			break;
		}
		/*input with high impedance*/
		case INPUT_HIGH_Z :
		{
			CLEAR_HIGH_NIBBLE(DDR);
     ef6:	a0 91 68 01 	lds	r26, 0x0168
     efa:	b0 91 69 01 	lds	r27, 0x0169
     efe:	e0 91 68 01 	lds	r30, 0x0168
     f02:	f0 91 69 01 	lds	r31, 0x0169
     f06:	80 81       	ld	r24, Z
     f08:	8f 70       	andi	r24, 0x0F	; 15
     f0a:	8c 93       	st	X, r24
			CLEAR_HIGH_NIBBLE(PORT);
     f0c:	a0 91 6c 01 	lds	r26, 0x016C
     f10:	b0 91 6d 01 	lds	r27, 0x016D
     f14:	e0 91 6c 01 	lds	r30, 0x016C
     f18:	f0 91 6d 01 	lds	r31, 0x016D
     f1c:	80 81       	ld	r24, Z
     f1e:	8f 70       	andi	r24, 0x0F	; 15
     f20:	8c 93       	st	X, r24
		}
		/*useless*/
		default : 
		{}
	}
}
     f22:	0f 90       	pop	r0
     f24:	0f 90       	pop	r0
     f26:	0f 90       	pop	r0
     f28:	0f 90       	pop	r0
     f2a:	cf 91       	pop	r28
     f2c:	df 91       	pop	r29
     f2e:	08 95       	ret

00000f30 <DIO_vidSetPortDirection>:

/*Set Port Direction*/
void DIO_vidSetPortDirection(u8 Copy_u8PortId,u8 copy_u8PortDirection)
{
     f30:	df 93       	push	r29
     f32:	cf 93       	push	r28
     f34:	00 d0       	rcall	.+0      	; 0xf36 <DIO_vidSetPortDirection+0x6>
     f36:	00 d0       	rcall	.+0      	; 0xf38 <DIO_vidSetPortDirection+0x8>
     f38:	cd b7       	in	r28, 0x3d	; 61
     f3a:	de b7       	in	r29, 0x3e	; 62
     f3c:	89 83       	std	Y+1, r24	; 0x01
     f3e:	6a 83       	std	Y+2, r22	; 0x02
	/*Port Identification from Port Id*/
	DIO_vidPortIdentification(Copy_u8PortId);
     f40:	89 81       	ldd	r24, Y+1	; 0x01
     f42:	0e 94 bd 05 	call	0xb7a	; 0xb7a <DIO_vidPortIdentification>

	switch(copy_u8PortDirection)
     f46:	8a 81       	ldd	r24, Y+2	; 0x02
     f48:	28 2f       	mov	r18, r24
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	3c 83       	std	Y+4, r19	; 0x04
     f4e:	2b 83       	std	Y+3, r18	; 0x03
     f50:	8b 81       	ldd	r24, Y+3	; 0x03
     f52:	9c 81       	ldd	r25, Y+4	; 0x04
     f54:	81 30       	cpi	r24, 0x01	; 1
     f56:	91 05       	cpc	r25, r1
     f58:	81 f0       	breq	.+32     	; 0xf7a <DIO_vidSetPortDirection+0x4a>
     f5a:	2b 81       	ldd	r18, Y+3	; 0x03
     f5c:	3c 81       	ldd	r19, Y+4	; 0x04
     f5e:	22 30       	cpi	r18, 0x02	; 2
     f60:	31 05       	cpc	r19, r1
     f62:	b9 f0       	breq	.+46     	; 0xf92 <DIO_vidSetPortDirection+0x62>
     f64:	8b 81       	ldd	r24, Y+3	; 0x03
     f66:	9c 81       	ldd	r25, Y+4	; 0x04
     f68:	00 97       	sbiw	r24, 0x00	; 0
     f6a:	e9 f4       	brne	.+58     	; 0xfa6 <DIO_vidSetPortDirection+0x76>
	{
		/*output*/
		case OUTPUT :
		{
			SET_PORT(DDR);
     f6c:	e0 91 68 01 	lds	r30, 0x0168
     f70:	f0 91 69 01 	lds	r31, 0x0169
     f74:	8f ef       	ldi	r24, 0xFF	; 255
     f76:	80 83       	st	Z, r24
     f78:	16 c0       	rjmp	.+44     	; 0xfa6 <DIO_vidSetPortDirection+0x76>
			break;
		}
		/*input with pull up*/
		case INPUT_PULL_UP :
		{
			CLEAR_PORT(DDR);
     f7a:	e0 91 68 01 	lds	r30, 0x0168
     f7e:	f0 91 69 01 	lds	r31, 0x0169
     f82:	10 82       	st	Z, r1
			SET_PORT(PORT);
     f84:	e0 91 6c 01 	lds	r30, 0x016C
     f88:	f0 91 6d 01 	lds	r31, 0x016D
     f8c:	8f ef       	ldi	r24, 0xFF	; 255
     f8e:	80 83       	st	Z, r24
     f90:	0a c0       	rjmp	.+20     	; 0xfa6 <DIO_vidSetPortDirection+0x76>
			break;
		}
		/*input with high impedance*/
		case INPUT_HIGH_Z :
		{
			CLEAR_PORT(DDR);
     f92:	e0 91 68 01 	lds	r30, 0x0168
     f96:	f0 91 69 01 	lds	r31, 0x0169
     f9a:	10 82       	st	Z, r1
			CLEAR_PORT(PORT);
     f9c:	e0 91 6c 01 	lds	r30, 0x016C
     fa0:	f0 91 6d 01 	lds	r31, 0x016D
     fa4:	10 82       	st	Z, r1
		}
		/*useless*/
		default : 
		{}
	}
}
     fa6:	0f 90       	pop	r0
     fa8:	0f 90       	pop	r0
     faa:	0f 90       	pop	r0
     fac:	0f 90       	pop	r0
     fae:	cf 91       	pop	r28
     fb0:	df 91       	pop	r29
     fb2:	08 95       	ret

00000fb4 <DIO_vidSetPinValue>:

/*Set Pin Value in case of output*/
void DIO_vidSetPinValue(u8 Copy_u8PinNumber,u8 copy_u8PinValue)
{
     fb4:	df 93       	push	r29
     fb6:	cf 93       	push	r28
     fb8:	00 d0       	rcall	.+0      	; 0xfba <DIO_vidSetPinValue+0x6>
     fba:	0f 92       	push	r0
     fbc:	cd b7       	in	r28, 0x3d	; 61
     fbe:	de b7       	in	r29, 0x3e	; 62
     fc0:	8a 83       	std	Y+2, r24	; 0x02
     fc2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8DIOPinNumber;
	Local_u8DIOPinNumber=Copy_u8PinNumber%8;
     fc4:	8a 81       	ldd	r24, Y+2	; 0x02
     fc6:	87 70       	andi	r24, 0x07	; 7
     fc8:	89 83       	std	Y+1, r24	; 0x01

	/*Port Identification from pin number*/
	DIO_vidPortIdentification(Copy_u8PinNumber);
     fca:	8a 81       	ldd	r24, Y+2	; 0x02
     fcc:	0e 94 bd 05 	call	0xb7a	; 0xb7a <DIO_vidPortIdentification>

	/*low - 0v*/
	if(copy_u8PinValue==LOW)
     fd0:	8b 81       	ldd	r24, Y+3	; 0x03
     fd2:	88 23       	and	r24, r24
     fd4:	c9 f4       	brne	.+50     	; 0x1008 <DIO_vidSetPinValue+0x54>
	{
		CLEAR_BIT(PORT,Local_u8DIOPinNumber);
     fd6:	a0 91 6c 01 	lds	r26, 0x016C
     fda:	b0 91 6d 01 	lds	r27, 0x016D
     fde:	e0 91 6c 01 	lds	r30, 0x016C
     fe2:	f0 91 6d 01 	lds	r31, 0x016D
     fe6:	80 81       	ld	r24, Z
     fe8:	48 2f       	mov	r20, r24
     fea:	89 81       	ldd	r24, Y+1	; 0x01
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	02 2e       	mov	r0, r18
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <DIO_vidSetPinValue+0x48>
     ff8:	88 0f       	add	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	0a 94       	dec	r0
     ffe:	e2 f7       	brpl	.-8      	; 0xff8 <DIO_vidSetPinValue+0x44>
    1000:	80 95       	com	r24
    1002:	84 23       	and	r24, r20
    1004:	8c 93       	st	X, r24
    1006:	1a c0       	rjmp	.+52     	; 0x103c <DIO_vidSetPinValue+0x88>
	}
	/*high - 5v*/
	else if(copy_u8PinValue==HIGH)
    1008:	8b 81       	ldd	r24, Y+3	; 0x03
    100a:	81 30       	cpi	r24, 0x01	; 1
    100c:	b9 f4       	brne	.+46     	; 0x103c <DIO_vidSetPinValue+0x88>
	{
		SET_BIT(PORT,Local_u8DIOPinNumber);
    100e:	a0 91 6c 01 	lds	r26, 0x016C
    1012:	b0 91 6d 01 	lds	r27, 0x016D
    1016:	e0 91 6c 01 	lds	r30, 0x016C
    101a:	f0 91 6d 01 	lds	r31, 0x016D
    101e:	80 81       	ld	r24, Z
    1020:	48 2f       	mov	r20, r24
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	02 2e       	mov	r0, r18
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <DIO_vidSetPinValue+0x80>
    1030:	88 0f       	add	r24, r24
    1032:	99 1f       	adc	r25, r25
    1034:	0a 94       	dec	r0
    1036:	e2 f7       	brpl	.-8      	; 0x1030 <DIO_vidSetPinValue+0x7c>
    1038:	84 2b       	or	r24, r20
    103a:	8c 93       	st	X, r24
	}
	/*useless*/
	else
	{}
}
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	0f 90       	pop	r0
    1042:	cf 91       	pop	r28
    1044:	df 91       	pop	r29
    1046:	08 95       	ret

00001048 <DIO_vidTogglePinValue>:

/*Toggle Pin Value in case of output*/
void DIO_vidTogglePinValue(u8 Copy_u8PinNumber)
{
    1048:	df 93       	push	r29
    104a:	cf 93       	push	r28
    104c:	00 d0       	rcall	.+0      	; 0x104e <DIO_vidTogglePinValue+0x6>
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8DIOPinNumber;
	Local_u8DIOPinNumber=Copy_u8PinNumber%8;
    1054:	8a 81       	ldd	r24, Y+2	; 0x02
    1056:	87 70       	andi	r24, 0x07	; 7
    1058:	89 83       	std	Y+1, r24	; 0x01

	/*Port Identification from pin number*/
	DIO_vidPortIdentification(Copy_u8PinNumber);
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	0e 94 bd 05 	call	0xb7a	; 0xb7a <DIO_vidPortIdentification>

	/*Toggle Pin Value*/
	TOGGLE_BIT(PORT,Local_u8DIOPinNumber);
    1060:	a0 91 6c 01 	lds	r26, 0x016C
    1064:	b0 91 6d 01 	lds	r27, 0x016D
    1068:	e0 91 6c 01 	lds	r30, 0x016C
    106c:	f0 91 6d 01 	lds	r31, 0x016D
    1070:	80 81       	ld	r24, Z
    1072:	48 2f       	mov	r20, r24
    1074:	89 81       	ldd	r24, Y+1	; 0x01
    1076:	28 2f       	mov	r18, r24
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	02 2e       	mov	r0, r18
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <DIO_vidTogglePinValue+0x3e>
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	0a 94       	dec	r0
    1088:	e2 f7       	brpl	.-8      	; 0x1082 <DIO_vidTogglePinValue+0x3a>
    108a:	84 27       	eor	r24, r20
    108c:	8c 93       	st	X, r24
}
    108e:	0f 90       	pop	r0
    1090:	0f 90       	pop	r0
    1092:	cf 91       	pop	r28
    1094:	df 91       	pop	r29
    1096:	08 95       	ret

00001098 <DIO_vidSetLowNibbleValue>:

/*Set Low Nibble Value in case of output*/
void DIO_vidSetLowNibbleValue(u8 Copy_u8LowNibbleNumber,u8 copy_u8LowNibblevalue)
{
    1098:	df 93       	push	r29
    109a:	cf 93       	push	r28
    109c:	00 d0       	rcall	.+0      	; 0x109e <DIO_vidSetLowNibbleValue+0x6>
    109e:	cd b7       	in	r28, 0x3d	; 61
    10a0:	de b7       	in	r29, 0x3e	; 62
    10a2:	89 83       	std	Y+1, r24	; 0x01
    10a4:	6a 83       	std	Y+2, r22	; 0x02
	/*Port Identification from Low Nibble Number*/
	DIO_vidPortIdentification(Copy_u8LowNibbleNumber);
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	0e 94 bd 05 	call	0xb7a	; 0xb7a <DIO_vidPortIdentification>

	/*low - 0v*/
	if(copy_u8LowNibblevalue==LOW)
    10ac:	8a 81       	ldd	r24, Y+2	; 0x02
    10ae:	88 23       	and	r24, r24
    10b0:	61 f4       	brne	.+24     	; 0x10ca <DIO_vidSetLowNibbleValue+0x32>
	{
		CLEAR_LOW_NIBBLE(PORT);
    10b2:	a0 91 6c 01 	lds	r26, 0x016C
    10b6:	b0 91 6d 01 	lds	r27, 0x016D
    10ba:	e0 91 6c 01 	lds	r30, 0x016C
    10be:	f0 91 6d 01 	lds	r31, 0x016D
    10c2:	80 81       	ld	r24, Z
    10c4:	80 7f       	andi	r24, 0xF0	; 240
    10c6:	8c 93       	st	X, r24
    10c8:	0e c0       	rjmp	.+28     	; 0x10e6 <DIO_vidSetLowNibbleValue+0x4e>
	}
	/*high - 5v*/
	else if(copy_u8LowNibblevalue==HIGH)
    10ca:	8a 81       	ldd	r24, Y+2	; 0x02
    10cc:	81 30       	cpi	r24, 0x01	; 1
    10ce:	59 f4       	brne	.+22     	; 0x10e6 <DIO_vidSetLowNibbleValue+0x4e>
	{
		SET_LOW_NIBBLE(PORT);
    10d0:	a0 91 6c 01 	lds	r26, 0x016C
    10d4:	b0 91 6d 01 	lds	r27, 0x016D
    10d8:	e0 91 6c 01 	lds	r30, 0x016C
    10dc:	f0 91 6d 01 	lds	r31, 0x016D
    10e0:	80 81       	ld	r24, Z
    10e2:	8f 60       	ori	r24, 0x0F	; 15
    10e4:	8c 93       	st	X, r24
	}
	/*useless*/
	else
	{}
}
    10e6:	0f 90       	pop	r0
    10e8:	0f 90       	pop	r0
    10ea:	cf 91       	pop	r28
    10ec:	df 91       	pop	r29
    10ee:	08 95       	ret

000010f0 <DIO_vidToggleLowNibbleValue>:

/*Toggle Low Nibble Value in case of output*/
void DIO_vidToggleLowNibbleValue(u8 Copy_u8LowNibbleNumber)
{
    10f0:	df 93       	push	r29
    10f2:	cf 93       	push	r28
    10f4:	0f 92       	push	r0
    10f6:	cd b7       	in	r28, 0x3d	; 61
    10f8:	de b7       	in	r29, 0x3e	; 62
    10fa:	89 83       	std	Y+1, r24	; 0x01
	/*Port Identification from Low Nibble Number*/
	DIO_vidPortIdentification(Copy_u8LowNibbleNumber);
    10fc:	89 81       	ldd	r24, Y+1	; 0x01
    10fe:	0e 94 bd 05 	call	0xb7a	; 0xb7a <DIO_vidPortIdentification>

	/*Toggle Low Nibble Value*/
	TOGGLE_LOW_NIBBLE(PORT);
    1102:	a0 91 6c 01 	lds	r26, 0x016C
    1106:	b0 91 6d 01 	lds	r27, 0x016D
    110a:	e0 91 6c 01 	lds	r30, 0x016C
    110e:	f0 91 6d 01 	lds	r31, 0x016D
    1112:	90 81       	ld	r25, Z
    1114:	8f e0       	ldi	r24, 0x0F	; 15
    1116:	89 27       	eor	r24, r25
    1118:	8c 93       	st	X, r24
}
    111a:	0f 90       	pop	r0
    111c:	cf 91       	pop	r28
    111e:	df 91       	pop	r29
    1120:	08 95       	ret

00001122 <DIO_vidAssignLowNibbleValue>:

/*Assign Low Nibble Value in case of output*/
void DIO_vidAssignLowNibbleValue(u8 Copy_u8LowNibbleNumber,u8 Copy_u8LowNibbleValue)
{
    1122:	df 93       	push	r29
    1124:	cf 93       	push	r28
    1126:	00 d0       	rcall	.+0      	; 0x1128 <DIO_vidAssignLowNibbleValue+0x6>
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
    112c:	89 83       	std	Y+1, r24	; 0x01
    112e:	6a 83       	std	Y+2, r22	; 0x02
	/*Port Identification from Low Nibble Number*/
	DIO_vidPortIdentification(Copy_u8LowNibbleNumber);
    1130:	89 81       	ldd	r24, Y+1	; 0x01
    1132:	0e 94 bd 05 	call	0xb7a	; 0xb7a <DIO_vidPortIdentification>

	/*Assign Low Nibble Value*/
	ASSIGN_LOW_NIBBLE(PORT,Copy_u8LowNibbleValue);
    1136:	a0 91 6c 01 	lds	r26, 0x016C
    113a:	b0 91 6d 01 	lds	r27, 0x016D
    113e:	e0 91 6c 01 	lds	r30, 0x016C
    1142:	f0 91 6d 01 	lds	r31, 0x016D
    1146:	80 81       	ld	r24, Z
    1148:	80 7f       	andi	r24, 0xF0	; 240
    114a:	8c 93       	st	X, r24
    114c:	a0 91 6c 01 	lds	r26, 0x016C
    1150:	b0 91 6d 01 	lds	r27, 0x016D
    1154:	e0 91 6c 01 	lds	r30, 0x016C
    1158:	f0 91 6d 01 	lds	r31, 0x016D
    115c:	90 81       	ld	r25, Z
    115e:	8a 81       	ldd	r24, Y+2	; 0x02
    1160:	89 2b       	or	r24, r25
    1162:	8c 93       	st	X, r24
}
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	cf 91       	pop	r28
    116a:	df 91       	pop	r29
    116c:	08 95       	ret

0000116e <DIO_vidSetHighNibbleValue>:

/*Set High Nibble Value in case of output*/
void DIO_vidSetHighNibbleValue(u8 Copy_u8HighNibbleNumber,u8 copy_u8HighNibblevalue)
{
    116e:	df 93       	push	r29
    1170:	cf 93       	push	r28
    1172:	00 d0       	rcall	.+0      	; 0x1174 <DIO_vidSetHighNibbleValue+0x6>
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
    1178:	89 83       	std	Y+1, r24	; 0x01
    117a:	6a 83       	std	Y+2, r22	; 0x02
	/*Port Identification from High Nibble Number*/
	DIO_vidPortIdentification(Copy_u8HighNibbleNumber);
    117c:	89 81       	ldd	r24, Y+1	; 0x01
    117e:	0e 94 bd 05 	call	0xb7a	; 0xb7a <DIO_vidPortIdentification>

	/*low - 0v*/
	if(copy_u8HighNibblevalue==LOW)
    1182:	8a 81       	ldd	r24, Y+2	; 0x02
    1184:	88 23       	and	r24, r24
    1186:	61 f4       	brne	.+24     	; 0x11a0 <DIO_vidSetHighNibbleValue+0x32>
	{
		CLEAR_HIGH_NIBBLE(PORT);
    1188:	a0 91 6c 01 	lds	r26, 0x016C
    118c:	b0 91 6d 01 	lds	r27, 0x016D
    1190:	e0 91 6c 01 	lds	r30, 0x016C
    1194:	f0 91 6d 01 	lds	r31, 0x016D
    1198:	80 81       	ld	r24, Z
    119a:	8f 70       	andi	r24, 0x0F	; 15
    119c:	8c 93       	st	X, r24
    119e:	0e c0       	rjmp	.+28     	; 0x11bc <DIO_vidSetHighNibbleValue+0x4e>
	}
	/*high - 5v*/
	else if(copy_u8HighNibblevalue==HIGH)
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	81 30       	cpi	r24, 0x01	; 1
    11a4:	59 f4       	brne	.+22     	; 0x11bc <DIO_vidSetHighNibbleValue+0x4e>
	{
		SET_HIGH_NIBBLE(PORT);
    11a6:	a0 91 6c 01 	lds	r26, 0x016C
    11aa:	b0 91 6d 01 	lds	r27, 0x016D
    11ae:	e0 91 6c 01 	lds	r30, 0x016C
    11b2:	f0 91 6d 01 	lds	r31, 0x016D
    11b6:	80 81       	ld	r24, Z
    11b8:	80 6f       	ori	r24, 0xF0	; 240
    11ba:	8c 93       	st	X, r24
	}
	/*useless*/
	else
	{}
}
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	cf 91       	pop	r28
    11c2:	df 91       	pop	r29
    11c4:	08 95       	ret

000011c6 <DIO_vidToggleHighNibbleValue>:

/*Toggle High Nibble Value in case of output*/
void DIO_vidToggleHighNibbleValue(u8 Copy_u8HighNibbleNumber)
{
    11c6:	df 93       	push	r29
    11c8:	cf 93       	push	r28
    11ca:	0f 92       	push	r0
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
    11d0:	89 83       	std	Y+1, r24	; 0x01
	/*Port Identification from High Nibble Number*/
	DIO_vidPortIdentification(Copy_u8HighNibbleNumber);
    11d2:	89 81       	ldd	r24, Y+1	; 0x01
    11d4:	0e 94 bd 05 	call	0xb7a	; 0xb7a <DIO_vidPortIdentification>

	/*Toggle High Nibble Value*/
	TOGGLE_HIGH_NIBBLE(PORT);
    11d8:	a0 91 6c 01 	lds	r26, 0x016C
    11dc:	b0 91 6d 01 	lds	r27, 0x016D
    11e0:	e0 91 6c 01 	lds	r30, 0x016C
    11e4:	f0 91 6d 01 	lds	r31, 0x016D
    11e8:	90 81       	ld	r25, Z
    11ea:	80 ef       	ldi	r24, 0xF0	; 240
    11ec:	89 27       	eor	r24, r25
    11ee:	8c 93       	st	X, r24
}
    11f0:	0f 90       	pop	r0
    11f2:	cf 91       	pop	r28
    11f4:	df 91       	pop	r29
    11f6:	08 95       	ret

000011f8 <DIO_vidAssignHighNibbleValue>:

/*Assign High Nibble Value in case of output*/
void DIO_vidAssignHighNibbleValue(u8 Copy_u8HighNibbleNumber,u8 Copy_u8HighNibbleValue)
{
    11f8:	df 93       	push	r29
    11fa:	cf 93       	push	r28
    11fc:	00 d0       	rcall	.+0      	; 0x11fe <DIO_vidAssignHighNibbleValue+0x6>
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
    1202:	89 83       	std	Y+1, r24	; 0x01
    1204:	6a 83       	std	Y+2, r22	; 0x02
	/*Port Identification from High Nibble Number*/
	DIO_vidPortIdentification(Copy_u8HighNibbleNumber);
    1206:	89 81       	ldd	r24, Y+1	; 0x01
    1208:	0e 94 bd 05 	call	0xb7a	; 0xb7a <DIO_vidPortIdentification>

	/*Assign High Nibble Value*/
	ASSIGN_HIGH_NIBBLE(PORT,Copy_u8HighNibbleValue);
    120c:	a0 91 6c 01 	lds	r26, 0x016C
    1210:	b0 91 6d 01 	lds	r27, 0x016D
    1214:	e0 91 6c 01 	lds	r30, 0x016C
    1218:	f0 91 6d 01 	lds	r31, 0x016D
    121c:	80 81       	ld	r24, Z
    121e:	8f 70       	andi	r24, 0x0F	; 15
    1220:	8c 93       	st	X, r24
    1222:	a0 91 6c 01 	lds	r26, 0x016C
    1226:	b0 91 6d 01 	lds	r27, 0x016D
    122a:	e0 91 6c 01 	lds	r30, 0x016C
    122e:	f0 91 6d 01 	lds	r31, 0x016D
    1232:	80 81       	ld	r24, Z
    1234:	28 2f       	mov	r18, r24
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	88 2f       	mov	r24, r24
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	82 95       	swap	r24
    123e:	92 95       	swap	r25
    1240:	90 7f       	andi	r25, 0xF0	; 240
    1242:	98 27       	eor	r25, r24
    1244:	80 7f       	andi	r24, 0xF0	; 240
    1246:	98 27       	eor	r25, r24
    1248:	82 2b       	or	r24, r18
    124a:	8c 93       	st	X, r24
}
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	cf 91       	pop	r28
    1252:	df 91       	pop	r29
    1254:	08 95       	ret

00001256 <DIO_vidSetPortValue>:

/*Set Port Value in case of output*/
void DIO_vidSetPortValue(u8 Copy_u8PortId,u8 copy_u8Portvalue)
{
    1256:	df 93       	push	r29
    1258:	cf 93       	push	r28
    125a:	00 d0       	rcall	.+0      	; 0x125c <DIO_vidSetPortValue+0x6>
    125c:	cd b7       	in	r28, 0x3d	; 61
    125e:	de b7       	in	r29, 0x3e	; 62
    1260:	89 83       	std	Y+1, r24	; 0x01
    1262:	6a 83       	std	Y+2, r22	; 0x02
	/*Port Identification from Port Id*/
	DIO_vidPortIdentification(Copy_u8PortId);
    1264:	89 81       	ldd	r24, Y+1	; 0x01
    1266:	0e 94 bd 05 	call	0xb7a	; 0xb7a <DIO_vidPortIdentification>

	/*low - 0v*/
	if(copy_u8Portvalue==LOW)
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	88 23       	and	r24, r24
    126e:	31 f4       	brne	.+12     	; 0x127c <DIO_vidSetPortValue+0x26>
	{
		CLEAR_PORT(PORT);
    1270:	e0 91 6c 01 	lds	r30, 0x016C
    1274:	f0 91 6d 01 	lds	r31, 0x016D
    1278:	10 82       	st	Z, r1
    127a:	09 c0       	rjmp	.+18     	; 0x128e <DIO_vidSetPortValue+0x38>
	}
	/*high - 5v*/
	else if(copy_u8Portvalue==HIGH)
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	81 30       	cpi	r24, 0x01	; 1
    1280:	31 f4       	brne	.+12     	; 0x128e <DIO_vidSetPortValue+0x38>
	{
		SET_PORT(PORT);
    1282:	e0 91 6c 01 	lds	r30, 0x016C
    1286:	f0 91 6d 01 	lds	r31, 0x016D
    128a:	8f ef       	ldi	r24, 0xFF	; 255
    128c:	80 83       	st	Z, r24
	}
	/*useless*/
	else
	{}
}
    128e:	0f 90       	pop	r0
    1290:	0f 90       	pop	r0
    1292:	cf 91       	pop	r28
    1294:	df 91       	pop	r29
    1296:	08 95       	ret

00001298 <DIO_vidTogglePortValue>:

/*Toggle Port Value in case of output*/
void DIO_vidTogglePortValue(u8 Copy_u8PortId)
{
    1298:	df 93       	push	r29
    129a:	cf 93       	push	r28
    129c:	0f 92       	push	r0
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
    12a2:	89 83       	std	Y+1, r24	; 0x01
	/*Port Identification from Port Id*/
	DIO_vidPortIdentification(Copy_u8PortId);
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	0e 94 bd 05 	call	0xb7a	; 0xb7a <DIO_vidPortIdentification>

	/*Toggle Port Value*/
	TOGGLE_PORT(PORT);
    12aa:	a0 91 6c 01 	lds	r26, 0x016C
    12ae:	b0 91 6d 01 	lds	r27, 0x016D
    12b2:	e0 91 6c 01 	lds	r30, 0x016C
    12b6:	f0 91 6d 01 	lds	r31, 0x016D
    12ba:	80 81       	ld	r24, Z
    12bc:	80 95       	com	r24
    12be:	8c 93       	st	X, r24
}
    12c0:	0f 90       	pop	r0
    12c2:	cf 91       	pop	r28
    12c4:	df 91       	pop	r29
    12c6:	08 95       	ret

000012c8 <DIO_vidAssignPortValue>:

/*Assign Port Value in case of output*/
void DIO_vidAssignPortValue(u8 Copy_u8PortId,u8 Copy_u8PortValue)
{
    12c8:	df 93       	push	r29
    12ca:	cf 93       	push	r28
    12cc:	00 d0       	rcall	.+0      	; 0x12ce <DIO_vidAssignPortValue+0x6>
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
    12d2:	89 83       	std	Y+1, r24	; 0x01
    12d4:	6a 83       	std	Y+2, r22	; 0x02
	/*Port Identification from Port Id*/
	DIO_vidPortIdentification(Copy_u8PortId);
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	0e 94 bd 05 	call	0xb7a	; 0xb7a <DIO_vidPortIdentification>

	/*Assign Port Value*/
	ASSIGN_PORT(PORT,Copy_u8PortValue);
    12dc:	e0 91 6c 01 	lds	r30, 0x016C
    12e0:	f0 91 6d 01 	lds	r31, 0x016D
    12e4:	10 82       	st	Z, r1
    12e6:	a0 91 6c 01 	lds	r26, 0x016C
    12ea:	b0 91 6d 01 	lds	r27, 0x016D
    12ee:	e0 91 6c 01 	lds	r30, 0x016C
    12f2:	f0 91 6d 01 	lds	r31, 0x016D
    12f6:	90 81       	ld	r25, Z
    12f8:	8a 81       	ldd	r24, Y+2	; 0x02
    12fa:	89 2b       	or	r24, r25
    12fc:	8c 93       	st	X, r24
}
    12fe:	0f 90       	pop	r0
    1300:	0f 90       	pop	r0
    1302:	cf 91       	pop	r28
    1304:	df 91       	pop	r29
    1306:	08 95       	ret

00001308 <DIO_u8GetPinValue>:

/*Get Pin Value in case of input*/
u8 DIO_u8GetPinValue(u8 Copy_u8PinNumber)
{
    1308:	df 93       	push	r29
    130a:	cf 93       	push	r28
    130c:	00 d0       	rcall	.+0      	; 0x130e <DIO_u8GetPinValue+0x6>
    130e:	0f 92       	push	r0
    1310:	cd b7       	in	r28, 0x3d	; 61
    1312:	de b7       	in	r29, 0x3e	; 62
    1314:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8DIOPinNumber,Local_u8DIOGetPinValue;
	Local_u8DIOPinNumber=Copy_u8PinNumber%8;
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	87 70       	andi	r24, 0x07	; 7
    131a:	8a 83       	std	Y+2, r24	; 0x02

	/*Port Identification from pin number*/
	DIO_vidPortIdentification(Copy_u8PinNumber);
    131c:	8b 81       	ldd	r24, Y+3	; 0x03
    131e:	0e 94 bd 05 	call	0xb7a	; 0xb7a <DIO_vidPortIdentification>

	/*Get Pin Value 0(0v) or 1(5v)*/
	Local_u8DIOGetPinValue=GET_BIT(PIN,Local_u8DIOPinNumber);
    1322:	e0 91 6a 01 	lds	r30, 0x016A
    1326:	f0 91 6b 01 	lds	r31, 0x016B
    132a:	80 81       	ld	r24, Z
    132c:	48 2f       	mov	r20, r24
    132e:	50 e0       	ldi	r21, 0x00	; 0
    1330:	8a 81       	ldd	r24, Y+2	; 0x02
    1332:	28 2f       	mov	r18, r24
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <DIO_u8GetPinValue+0x38>
    133c:	88 0f       	add	r24, r24
    133e:	99 1f       	adc	r25, r25
    1340:	2a 95       	dec	r18
    1342:	e2 f7       	brpl	.-8      	; 0x133c <DIO_u8GetPinValue+0x34>
    1344:	9a 01       	movw	r18, r20
    1346:	28 23       	and	r18, r24
    1348:	39 23       	and	r19, r25
    134a:	8a 81       	ldd	r24, Y+2	; 0x02
    134c:	88 2f       	mov	r24, r24
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	a9 01       	movw	r20, r18
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <DIO_u8GetPinValue+0x50>
    1354:	55 95       	asr	r21
    1356:	47 95       	ror	r20
    1358:	8a 95       	dec	r24
    135a:	e2 f7       	brpl	.-8      	; 0x1354 <DIO_u8GetPinValue+0x4c>
    135c:	ca 01       	movw	r24, r20
    135e:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8DIOGetPinValue;
    1360:	89 81       	ldd	r24, Y+1	; 0x01
}
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
    1366:	0f 90       	pop	r0
    1368:	cf 91       	pop	r28
    136a:	df 91       	pop	r29
    136c:	08 95       	ret

0000136e <DIO_u8GetLowNibbleValue>:

/*Get Low Nibble Value in case of input*/
u8 DIO_u8GetLowNibbleValue(u8 Copy_u8LowNibbleNumber)
{
    136e:	df 93       	push	r29
    1370:	cf 93       	push	r28
    1372:	00 d0       	rcall	.+0      	; 0x1374 <DIO_u8GetLowNibbleValue+0x6>
    1374:	cd b7       	in	r28, 0x3d	; 61
    1376:	de b7       	in	r29, 0x3e	; 62
    1378:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8DIOGetLowNibbleValue;

	/*Port Identification from Low Nibble Number*/
	DIO_vidPortIdentification(Copy_u8LowNibbleNumber);
    137a:	8a 81       	ldd	r24, Y+2	; 0x02
    137c:	0e 94 bd 05 	call	0xb7a	; 0xb7a <DIO_vidPortIdentification>

	/*Get Low Nibble Value*/
	Local_u8DIOGetLowNibbleValue=GET_LOW_NIBBLE(PIN);
    1380:	e0 91 6a 01 	lds	r30, 0x016A
    1384:	f0 91 6b 01 	lds	r31, 0x016B
    1388:	80 81       	ld	r24, Z
    138a:	8f 70       	andi	r24, 0x0F	; 15
    138c:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8DIOGetLowNibbleValue;
    138e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1390:	0f 90       	pop	r0
    1392:	0f 90       	pop	r0
    1394:	cf 91       	pop	r28
    1396:	df 91       	pop	r29
    1398:	08 95       	ret

0000139a <DIO_u8GetHighNibbleValue>:

/*Get High Nibble Value in case of input*/
u8 DIO_u8GetHighNibbleValue(u8 Copy_u8HighNibbleNumber)
{
    139a:	df 93       	push	r29
    139c:	cf 93       	push	r28
    139e:	00 d0       	rcall	.+0      	; 0x13a0 <DIO_u8GetHighNibbleValue+0x6>
    13a0:	cd b7       	in	r28, 0x3d	; 61
    13a2:	de b7       	in	r29, 0x3e	; 62
    13a4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8DIOGetHighNibbleValue;

	/*Port Identification from High Nibble Number*/
	DIO_vidPortIdentification(Copy_u8HighNibbleNumber);
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	0e 94 bd 05 	call	0xb7a	; 0xb7a <DIO_vidPortIdentification>

	/*Get High Nibble Value*/
	Local_u8DIOGetHighNibbleValue=GET_HIGH_NIBBLE(PIN);
    13ac:	e0 91 6a 01 	lds	r30, 0x016A
    13b0:	f0 91 6b 01 	lds	r31, 0x016B
    13b4:	80 81       	ld	r24, Z
    13b6:	82 95       	swap	r24
    13b8:	8f 70       	andi	r24, 0x0F	; 15
    13ba:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8DIOGetHighNibbleValue;
    13bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    13be:	0f 90       	pop	r0
    13c0:	0f 90       	pop	r0
    13c2:	cf 91       	pop	r28
    13c4:	df 91       	pop	r29
    13c6:	08 95       	ret

000013c8 <DIO_u8GetPortValue>:

/*Get Port Value in case of input*/
u8 DIO_u8GetPortValue(u8 Copy_u8PortId)
{
    13c8:	df 93       	push	r29
    13ca:	cf 93       	push	r28
    13cc:	00 d0       	rcall	.+0      	; 0x13ce <DIO_u8GetPortValue+0x6>
    13ce:	cd b7       	in	r28, 0x3d	; 61
    13d0:	de b7       	in	r29, 0x3e	; 62
    13d2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8DIOGetPortValue;

	/*Port Identification from Port Id*/
	DIO_vidPortIdentification(Copy_u8PortId);
    13d4:	8a 81       	ldd	r24, Y+2	; 0x02
    13d6:	0e 94 bd 05 	call	0xb7a	; 0xb7a <DIO_vidPortIdentification>

	/*Get Port Value*/
	Local_u8DIOGetPortValue=GET_PORT(PIN);
    13da:	e0 91 6a 01 	lds	r30, 0x016A
    13de:	f0 91 6b 01 	lds	r31, 0x016B
    13e2:	80 81       	ld	r24, Z
    13e4:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8DIOGetPortValue;
    13e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    13e8:	0f 90       	pop	r0
    13ea:	0f 90       	pop	r0
    13ec:	cf 91       	pop	r28
    13ee:	df 91       	pop	r29
    13f0:	08 95       	ret

000013f2 <DIO_vidSPIMasterPinConfigurations>:

/***************************** SPI Master DIO Configurations ******************************/
void DIO_vidSPIMasterPinConfigurations(void)
{
    13f2:	df 93       	push	r29
    13f4:	cf 93       	push	r28
    13f6:	cd b7       	in	r28, 0x3d	; 61
    13f8:	de b7       	in	r29, 0x3e	; 62
	/*set MOSI as output*/
	DIO_vidSetPinDirection(PIN13,OUTPUT);
    13fa:	8d e0       	ldi	r24, 0x0D	; 13
    13fc:	60 e0       	ldi	r22, 0x00	; 0
    13fe:	0e 94 3a 06 	call	0xc74	; 0xc74 <DIO_vidSetPinDirection>

	/*set MISO as input high impedence*/
	DIO_vidSetPinDirection(PIN14,INPUT_HIGH_Z);
    1402:	8e e0       	ldi	r24, 0x0E	; 14
    1404:	62 e0       	ldi	r22, 0x02	; 2
    1406:	0e 94 3a 06 	call	0xc74	; 0xc74 <DIO_vidSetPinDirection>

	/*set SCK as output*/
	DIO_vidSetPinDirection(PIN15,OUTPUT);
    140a:	8f e0       	ldi	r24, 0x0F	; 15
    140c:	60 e0       	ldi	r22, 0x00	; 0
    140e:	0e 94 3a 06 	call	0xc74	; 0xc74 <DIO_vidSetPinDirection>
}
    1412:	cf 91       	pop	r28
    1414:	df 91       	pop	r29
    1416:	08 95       	ret

00001418 <DIO_vidSPISlavePinConfigurations>:

/***************************** SPI Slave DIO Configurations ******************************/
void DIO_vidSPISlavePinConfigurations(void)
{
    1418:	df 93       	push	r29
    141a:	cf 93       	push	r28
    141c:	cd b7       	in	r28, 0x3d	; 61
    141e:	de b7       	in	r29, 0x3e	; 62
	/*set slave select SS' as input high impedence*/
	DIO_vidSetPinDirection(PIN12,INPUT_HIGH_Z);
    1420:	8c e0       	ldi	r24, 0x0C	; 12
    1422:	62 e0       	ldi	r22, 0x02	; 2
    1424:	0e 94 3a 06 	call	0xc74	; 0xc74 <DIO_vidSetPinDirection>

	/*set MOSI as output*/
	DIO_vidSetPinDirection(PIN13,INPUT_HIGH_Z);
    1428:	8d e0       	ldi	r24, 0x0D	; 13
    142a:	62 e0       	ldi	r22, 0x02	; 2
    142c:	0e 94 3a 06 	call	0xc74	; 0xc74 <DIO_vidSetPinDirection>

	/*set MISO as input high impedence*/
	DIO_vidSetPinDirection(PIN14,OUTPUT);
    1430:	8e e0       	ldi	r24, 0x0E	; 14
    1432:	60 e0       	ldi	r22, 0x00	; 0
    1434:	0e 94 3a 06 	call	0xc74	; 0xc74 <DIO_vidSetPinDirection>

	/*set SCK as output*/
	DIO_vidSetPinDirection(PIN15,INPUT_HIGH_Z);
    1438:	8f e0       	ldi	r24, 0x0F	; 15
    143a:	62 e0       	ldi	r22, 0x02	; 2
    143c:	0e 94 3a 06 	call	0xc74	; 0xc74 <DIO_vidSetPinDirection>
}
    1440:	cf 91       	pop	r28
    1442:	df 91       	pop	r29
    1444:	08 95       	ret

00001446 <Delay>:
#include"Std_Types.h"
#include"Utils.h"


extern void Delay (u32 time)
{
    1446:	df 93       	push	r29
    1448:	cf 93       	push	r28
    144a:	cd b7       	in	r28, 0x3d	; 61
    144c:	de b7       	in	r29, 0x3e	; 62
    144e:	2c 97       	sbiw	r28, 0x0c	; 12
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	f8 94       	cli
    1454:	de bf       	out	0x3e, r29	; 62
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	cd bf       	out	0x3d, r28	; 61
    145a:	69 87       	std	Y+9, r22	; 0x09
    145c:	7a 87       	std	Y+10, r23	; 0x0a
    145e:	8b 87       	std	Y+11, r24	; 0x0b
    1460:	9c 87       	std	Y+12, r25	; 0x0c
  volatile u32 i ;
  volatile  u32 count;
  // count = ((time*1000)-36)/10.8;
   count = ((time*1000)-19)/10.7;
    1462:	89 85       	ldd	r24, Y+9	; 0x09
    1464:	9a 85       	ldd	r25, Y+10	; 0x0a
    1466:	ab 85       	ldd	r26, Y+11	; 0x0b
    1468:	bc 85       	ldd	r27, Y+12	; 0x0c
    146a:	28 ee       	ldi	r18, 0xE8	; 232
    146c:	33 e0       	ldi	r19, 0x03	; 3
    146e:	40 e0       	ldi	r20, 0x00	; 0
    1470:	50 e0       	ldi	r21, 0x00	; 0
    1472:	bc 01       	movw	r22, r24
    1474:	cd 01       	movw	r24, r26
    1476:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <__mulsi3>
    147a:	dc 01       	movw	r26, r24
    147c:	cb 01       	movw	r24, r22
    147e:	43 97       	sbiw	r24, 0x13	; 19
    1480:	a1 09       	sbc	r26, r1
    1482:	b1 09       	sbc	r27, r1
    1484:	bc 01       	movw	r22, r24
    1486:	cd 01       	movw	r24, r26
    1488:	0e 94 4f 03 	call	0x69e	; 0x69e <__floatunsisf>
    148c:	dc 01       	movw	r26, r24
    148e:	cb 01       	movw	r24, r22
    1490:	bc 01       	movw	r22, r24
    1492:	cd 01       	movw	r24, r26
    1494:	23 e3       	ldi	r18, 0x33	; 51
    1496:	33 e3       	ldi	r19, 0x33	; 51
    1498:	4b e2       	ldi	r20, 0x2B	; 43
    149a:	51 e4       	ldi	r21, 0x41	; 65
    149c:	0e 94 1f 02 	call	0x43e	; 0x43e <__divsf3>
    14a0:	dc 01       	movw	r26, r24
    14a2:	cb 01       	movw	r24, r22
    14a4:	bc 01       	movw	r22, r24
    14a6:	cd 01       	movw	r24, r26
    14a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ac:	dc 01       	movw	r26, r24
    14ae:	cb 01       	movw	r24, r22
    14b0:	8d 83       	std	Y+5, r24	; 0x05
    14b2:	9e 83       	std	Y+6, r25	; 0x06
    14b4:	af 83       	std	Y+7, r26	; 0x07
    14b6:	b8 87       	std	Y+8, r27	; 0x08
	for (i=0;i<count;i++)
    14b8:	19 82       	std	Y+1, r1	; 0x01
    14ba:	1a 82       	std	Y+2, r1	; 0x02
    14bc:	1b 82       	std	Y+3, r1	; 0x03
    14be:	1c 82       	std	Y+4, r1	; 0x04
    14c0:	0c c0       	rjmp	.+24     	; 0x14da <Delay+0x94>
	{
		asm("nop");
    14c2:	00 00       	nop
{
  volatile u32 i ;
  volatile  u32 count;
  // count = ((time*1000)-36)/10.8;
   count = ((time*1000)-19)/10.7;
	for (i=0;i<count;i++)
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
    14c6:	9a 81       	ldd	r25, Y+2	; 0x02
    14c8:	ab 81       	ldd	r26, Y+3	; 0x03
    14ca:	bc 81       	ldd	r27, Y+4	; 0x04
    14cc:	01 96       	adiw	r24, 0x01	; 1
    14ce:	a1 1d       	adc	r26, r1
    14d0:	b1 1d       	adc	r27, r1
    14d2:	89 83       	std	Y+1, r24	; 0x01
    14d4:	9a 83       	std	Y+2, r25	; 0x02
    14d6:	ab 83       	std	Y+3, r26	; 0x03
    14d8:	bc 83       	std	Y+4, r27	; 0x04
    14da:	29 81       	ldd	r18, Y+1	; 0x01
    14dc:	3a 81       	ldd	r19, Y+2	; 0x02
    14de:	4b 81       	ldd	r20, Y+3	; 0x03
    14e0:	5c 81       	ldd	r21, Y+4	; 0x04
    14e2:	8d 81       	ldd	r24, Y+5	; 0x05
    14e4:	9e 81       	ldd	r25, Y+6	; 0x06
    14e6:	af 81       	ldd	r26, Y+7	; 0x07
    14e8:	b8 85       	ldd	r27, Y+8	; 0x08
    14ea:	28 17       	cp	r18, r24
    14ec:	39 07       	cpc	r19, r25
    14ee:	4a 07       	cpc	r20, r26
    14f0:	5b 07       	cpc	r21, r27
    14f2:	38 f3       	brcs	.-50     	; 0x14c2 <Delay+0x7c>
	{
		asm("nop");
	}
}
    14f4:	2c 96       	adiw	r28, 0x0c	; 12
    14f6:	0f b6       	in	r0, 0x3f	; 63
    14f8:	f8 94       	cli
    14fa:	de bf       	out	0x3e, r29	; 62
    14fc:	0f be       	out	0x3f, r0	; 63
    14fe:	cd bf       	out	0x3d, r28	; 61
    1500:	cf 91       	pop	r28
    1502:	df 91       	pop	r29
    1504:	08 95       	ret

00001506 <LCD_vidInitialization>:
 *****                4 Bit Mode                *****
 *--------------------------------------------------*/

/*LCD initialization function*/
void LCD_vidInitialization(void)
{
    1506:	df 93       	push	r29
    1508:	cf 93       	push	r28
    150a:	cd b7       	in	r28, 0x3d	; 61
    150c:	de b7       	in	r29, 0x3e	; 62
	/*delay > 30ms*/
	Delay(50);
    150e:	62 e3       	ldi	r22, 0x32	; 50
    1510:	70 e0       	ldi	r23, 0x00	; 0
    1512:	80 e0       	ldi	r24, 0x00	; 0
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	0e 94 23 0a 	call	0x1446	; 0x1446 <Delay>
	/*send command 0x02 then 0x08 for N=1 and F=0
	N = 0 : 1 - line display
	F = 0 : 5 x 7 dot character font*/
	LCD_vidWriteCommand(0x02);
    151a:	82 e0       	ldi	r24, 0x02	; 2
    151c:	0e 94 ae 0a 	call	0x155c	; 0x155c <LCD_vidWriteCommand>
	LCD_vidWriteCommand(0x28);
    1520:	88 e2       	ldi	r24, 0x28	; 40
    1522:	0e 94 ae 0a 	call	0x155c	; 0x155c <LCD_vidWriteCommand>
	/*delay > 39us*/
	Delay(10);
    1526:	6a e0       	ldi	r22, 0x0A	; 10
    1528:	70 e0       	ldi	r23, 0x00	; 0
    152a:	80 e0       	ldi	r24, 0x00	; 0
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	0e 94 23 0a 	call	0x1446	; 0x1446 <Delay>
	/*send command 0x0c for D=1 , C=0 and B=0
	D = 0 : Display OFF
	C = 0 : Cursor OFF
	B = 0 : Blink OFF*/
	LCD_vidWriteCommand(0x0c);
    1532:	8c e0       	ldi	r24, 0x0C	; 12
    1534:	0e 94 ae 0a 	call	0x155c	; 0x155c <LCD_vidWriteCommand>
	/*delay > 39us*/
	Delay(10);
    1538:	6a e0       	ldi	r22, 0x0A	; 10
    153a:	70 e0       	ldi	r23, 0x00	; 0
    153c:	80 e0       	ldi	r24, 0x00	; 0
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	0e 94 23 0a 	call	0x1446	; 0x1446 <Delay>
	/*send command 0x01 for clearing LCD*/
	LCD_vidWriteCommand(0x01);
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	0e 94 ae 0a 	call	0x155c	; 0x155c <LCD_vidWriteCommand>
	/*delay > 1.53ms*/
	Delay(5);
    154a:	65 e0       	ldi	r22, 0x05	; 5
    154c:	70 e0       	ldi	r23, 0x00	; 0
    154e:	80 e0       	ldi	r24, 0x00	; 0
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	0e 94 23 0a 	call	0x1446	; 0x1446 <Delay>
}
    1556:	cf 91       	pop	r28
    1558:	df 91       	pop	r29
    155a:	08 95       	ret

0000155c <LCD_vidWriteCommand>:

/*LCD Write command function*/
void LCD_vidWriteCommand(u8 Copy_u8Command)
{
    155c:	df 93       	push	r29
    155e:	cf 93       	push	r28
    1560:	0f 92       	push	r0
    1562:	cd b7       	in	r28, 0x3d	; 61
    1564:	de b7       	in	r29, 0x3e	; 62
    1566:	89 83       	std	Y+1, r24	; 0x01
	/*set pins 1,2 and 3 in PORTB as output for RS , R/W and E*/
	DIO_vidSetPinDirection(PIN9,OUTPUT);
    1568:	89 e0       	ldi	r24, 0x09	; 9
    156a:	60 e0       	ldi	r22, 0x00	; 0
    156c:	0e 94 3a 06 	call	0xc74	; 0xc74 <DIO_vidSetPinDirection>
	DIO_vidSetPinDirection(PIN10,OUTPUT);
    1570:	8a e0       	ldi	r24, 0x0A	; 10
    1572:	60 e0       	ldi	r22, 0x00	; 0
    1574:	0e 94 3a 06 	call	0xc74	; 0xc74 <DIO_vidSetPinDirection>
	DIO_vidSetPinDirection(PIN11,OUTPUT);
    1578:	8b e0       	ldi	r24, 0x0B	; 11
    157a:	60 e0       	ldi	r22, 0x00	; 0
    157c:	0e 94 3a 06 	call	0xc74	; 0xc74 <DIO_vidSetPinDirection>
	/*set last 4 bits in PORTA as output for command*/
	DIO_vidSetHighNibbleDirection(HIGH_NIBBLE_0,OUTPUT);
    1580:	84 e0       	ldi	r24, 0x04	; 4
    1582:	60 e0       	ldi	r22, 0x00	; 0
    1584:	0e 94 3a 07 	call	0xe74	; 0xe74 <DIO_vidSetHighNibbleDirection>
	/*RS=0 for command mode , RS=1 for data mode*/
	DIO_vidSetPinValue(PIN9,LOW);
    1588:	89 e0       	ldi	r24, 0x09	; 9
    158a:	60 e0       	ldi	r22, 0x00	; 0
    158c:	0e 94 da 07 	call	0xfb4	; 0xfb4 <DIO_vidSetPinValue>
	/*R/W=0 for write , R/W=1 for read*/
	DIO_vidSetPinValue(PIN10,LOW);
    1590:	8a e0       	ldi	r24, 0x0A	; 10
    1592:	60 e0       	ldi	r22, 0x00	; 0
    1594:	0e 94 da 07 	call	0xfb4	; 0xfb4 <DIO_vidSetPinValue>
	/*assign high nibble of command to high nibble of PORTA*/
	DIO_vidAssignHighNibbleValue(HIGH_NIBBLE_0,GET_HIGH_NIBBLE(Copy_u8Command));
    1598:	89 81       	ldd	r24, Y+1	; 0x01
    159a:	98 2f       	mov	r25, r24
    159c:	92 95       	swap	r25
    159e:	9f 70       	andi	r25, 0x0F	; 15
    15a0:	84 e0       	ldi	r24, 0x04	; 4
    15a2:	69 2f       	mov	r22, r25
    15a4:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <DIO_vidAssignHighNibbleValue>
	/*E=1 to enable*/
	DIO_vidSetPinValue(PIN11,HIGH);
    15a8:	8b e0       	ldi	r24, 0x0B	; 11
    15aa:	61 e0       	ldi	r22, 0x01	; 1
    15ac:	0e 94 da 07 	call	0xfb4	; 0xfb4 <DIO_vidSetPinValue>
	/*delay*/
	Delay(50);
    15b0:	62 e3       	ldi	r22, 0x32	; 50
    15b2:	70 e0       	ldi	r23, 0x00	; 0
    15b4:	80 e0       	ldi	r24, 0x00	; 0
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	0e 94 23 0a 	call	0x1446	; 0x1446 <Delay>
	/*E=0 to disable*/
	DIO_vidSetPinValue(PIN11,LOW);
    15bc:	8b e0       	ldi	r24, 0x0B	; 11
    15be:	60 e0       	ldi	r22, 0x00	; 0
    15c0:	0e 94 da 07 	call	0xfb4	; 0xfb4 <DIO_vidSetPinValue>
	/*assign low nibble of command to high nibble of PORTA*/
	DIO_vidAssignHighNibbleValue(HIGH_NIBBLE_0,GET_LOW_NIBBLE(Copy_u8Command));
    15c4:	89 81       	ldd	r24, Y+1	; 0x01
    15c6:	98 2f       	mov	r25, r24
    15c8:	9f 70       	andi	r25, 0x0F	; 15
    15ca:	84 e0       	ldi	r24, 0x04	; 4
    15cc:	69 2f       	mov	r22, r25
    15ce:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <DIO_vidAssignHighNibbleValue>
	/*E=1 to enable*/
	DIO_vidSetPinValue(PIN11,HIGH);
    15d2:	8b e0       	ldi	r24, 0x0B	; 11
    15d4:	61 e0       	ldi	r22, 0x01	; 1
    15d6:	0e 94 da 07 	call	0xfb4	; 0xfb4 <DIO_vidSetPinValue>
	/*delay*/
	Delay(50);
    15da:	62 e3       	ldi	r22, 0x32	; 50
    15dc:	70 e0       	ldi	r23, 0x00	; 0
    15de:	80 e0       	ldi	r24, 0x00	; 0
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	0e 94 23 0a 	call	0x1446	; 0x1446 <Delay>
	/*E=0 to disable*/
	DIO_vidSetPinValue(PIN11,LOW);
    15e6:	8b e0       	ldi	r24, 0x0B	; 11
    15e8:	60 e0       	ldi	r22, 0x00	; 0
    15ea:	0e 94 da 07 	call	0xfb4	; 0xfb4 <DIO_vidSetPinValue>
	/*delay*/
	Delay(50);
    15ee:	62 e3       	ldi	r22, 0x32	; 50
    15f0:	70 e0       	ldi	r23, 0x00	; 0
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	0e 94 23 0a 	call	0x1446	; 0x1446 <Delay>
}
    15fa:	0f 90       	pop	r0
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	08 95       	ret

00001602 <LCD_vidWriteData>:

/*LCD Write data function*/
void LCD_vidWriteData(u8 Copy_u8Data)
{
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	0f 92       	push	r0
    1608:	cd b7       	in	r28, 0x3d	; 61
    160a:	de b7       	in	r29, 0x3e	; 62
    160c:	89 83       	std	Y+1, r24	; 0x01
	/*set pins 1,2 and 3 in PORTB as output for RS , R/W and E*/
	DIO_vidSetPinDirection(PIN9,OUTPUT);
    160e:	89 e0       	ldi	r24, 0x09	; 9
    1610:	60 e0       	ldi	r22, 0x00	; 0
    1612:	0e 94 3a 06 	call	0xc74	; 0xc74 <DIO_vidSetPinDirection>
	DIO_vidSetPinDirection(PIN10,OUTPUT);
    1616:	8a e0       	ldi	r24, 0x0A	; 10
    1618:	60 e0       	ldi	r22, 0x00	; 0
    161a:	0e 94 3a 06 	call	0xc74	; 0xc74 <DIO_vidSetPinDirection>
	DIO_vidSetPinDirection(PIN11,OUTPUT);
    161e:	8b e0       	ldi	r24, 0x0B	; 11
    1620:	60 e0       	ldi	r22, 0x00	; 0
    1622:	0e 94 3a 06 	call	0xc74	; 0xc74 <DIO_vidSetPinDirection>
	/*set last 4 bits in PORTA as output for data*/
	DIO_vidSetHighNibbleDirection(HIGH_NIBBLE_0,OUTPUT);
    1626:	84 e0       	ldi	r24, 0x04	; 4
    1628:	60 e0       	ldi	r22, 0x00	; 0
    162a:	0e 94 3a 07 	call	0xe74	; 0xe74 <DIO_vidSetHighNibbleDirection>
	/*RS=1 for data mode , RS=0 for command mode*/
	DIO_vidSetPinValue(PIN9,HIGH);
    162e:	89 e0       	ldi	r24, 0x09	; 9
    1630:	61 e0       	ldi	r22, 0x01	; 1
    1632:	0e 94 da 07 	call	0xfb4	; 0xfb4 <DIO_vidSetPinValue>
	/*R/W=0 for write , R/W=1 for read*/
	DIO_vidSetPinValue(PIN10,LOW);
    1636:	8a e0       	ldi	r24, 0x0A	; 10
    1638:	60 e0       	ldi	r22, 0x00	; 0
    163a:	0e 94 da 07 	call	0xfb4	; 0xfb4 <DIO_vidSetPinValue>
	/*assign high nibble of data to high nibble of PORTA*/
	DIO_vidAssignHighNibbleValue(HIGH_NIBBLE_0,GET_HIGH_NIBBLE(Copy_u8Data));
    163e:	89 81       	ldd	r24, Y+1	; 0x01
    1640:	98 2f       	mov	r25, r24
    1642:	92 95       	swap	r25
    1644:	9f 70       	andi	r25, 0x0F	; 15
    1646:	84 e0       	ldi	r24, 0x04	; 4
    1648:	69 2f       	mov	r22, r25
    164a:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <DIO_vidAssignHighNibbleValue>
	/*E=1 to enable*/
	DIO_vidSetPinValue(PIN11,HIGH);
    164e:	8b e0       	ldi	r24, 0x0B	; 11
    1650:	61 e0       	ldi	r22, 0x01	; 1
    1652:	0e 94 da 07 	call	0xfb4	; 0xfb4 <DIO_vidSetPinValue>
	/*delay*/
	Delay(50);
    1656:	62 e3       	ldi	r22, 0x32	; 50
    1658:	70 e0       	ldi	r23, 0x00	; 0
    165a:	80 e0       	ldi	r24, 0x00	; 0
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	0e 94 23 0a 	call	0x1446	; 0x1446 <Delay>
	/*E=0 to disable*/
	DIO_vidSetPinValue(PIN11,LOW);
    1662:	8b e0       	ldi	r24, 0x0B	; 11
    1664:	60 e0       	ldi	r22, 0x00	; 0
    1666:	0e 94 da 07 	call	0xfb4	; 0xfb4 <DIO_vidSetPinValue>
	/*assign high nibble of data to high nibble of PORTA*/
	DIO_vidAssignHighNibbleValue(HIGH_NIBBLE_0,GET_LOW_NIBBLE(Copy_u8Data));
    166a:	89 81       	ldd	r24, Y+1	; 0x01
    166c:	98 2f       	mov	r25, r24
    166e:	9f 70       	andi	r25, 0x0F	; 15
    1670:	84 e0       	ldi	r24, 0x04	; 4
    1672:	69 2f       	mov	r22, r25
    1674:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <DIO_vidAssignHighNibbleValue>
	/*E=1 to enable*/
	DIO_vidSetPinValue(PIN11,HIGH);
    1678:	8b e0       	ldi	r24, 0x0B	; 11
    167a:	61 e0       	ldi	r22, 0x01	; 1
    167c:	0e 94 da 07 	call	0xfb4	; 0xfb4 <DIO_vidSetPinValue>
	/*delay*/
	Delay(50);
    1680:	62 e3       	ldi	r22, 0x32	; 50
    1682:	70 e0       	ldi	r23, 0x00	; 0
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	0e 94 23 0a 	call	0x1446	; 0x1446 <Delay>
	/*E=0 to disable*/
	DIO_vidSetPinValue(PIN11,LOW);
    168c:	8b e0       	ldi	r24, 0x0B	; 11
    168e:	60 e0       	ldi	r22, 0x00	; 0
    1690:	0e 94 da 07 	call	0xfb4	; 0xfb4 <DIO_vidSetPinValue>
	/*delay*/
	Delay(50);
    1694:	62 e3       	ldi	r22, 0x32	; 50
    1696:	70 e0       	ldi	r23, 0x00	; 0
    1698:	80 e0       	ldi	r24, 0x00	; 0
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	0e 94 23 0a 	call	0x1446	; 0x1446 <Delay>
}
    16a0:	0f 90       	pop	r0
    16a2:	cf 91       	pop	r28
    16a4:	df 91       	pop	r29
    16a6:	08 95       	ret

000016a8 <LCD_vidUARTInitialization>:

void LCD_vidUARTInitialization(void)
{
    16a8:	df 93       	push	r29
    16aa:	cf 93       	push	r28
    16ac:	cd b7       	in	r28, 0x3d	; 61
    16ae:	de b7       	in	r29, 0x3e	; 62
	UART_vidSetCallBack1(LCD_vidInitialization);
    16b0:	83 e8       	ldi	r24, 0x83	; 131
    16b2:	9a e0       	ldi	r25, 0x0A	; 10
    16b4:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <UART_vidSetCallBack1>
	UART_vidSetCallBack2(LCD_vidWriteCommand);
    16b8:	8e ea       	ldi	r24, 0xAE	; 174
    16ba:	9a e0       	ldi	r25, 0x0A	; 10
    16bc:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <UART_vidSetCallBack2>
	UART_vidSetCallBack3(LCD_vidWriteData);
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	9b e0       	ldi	r25, 0x0B	; 11
    16c4:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <UART_vidSetCallBack3>
}
    16c8:	cf 91       	pop	r28
    16ca:	df 91       	pop	r29
    16cc:	08 95       	ret

000016ce <UART_vidInitialization>:
void (*PtrLCDWriteData)(u8 Copy_u8Data);

u8 Global_u8Data;

void UART_vidInitialization(void)
{
    16ce:	df 93       	push	r29
    16d0:	cf 93       	push	r28
    16d2:	00 d0       	rcall	.+0      	; 0x16d4 <UART_vidInitialization+0x6>
    16d4:	cd b7       	in	r28, 0x3d	; 61
    16d6:	de b7       	in	r29, 0x3e	; 62
	/*for setting Baud Rate=9600 we can get UBRR from the following equation
	 *Baud Rate=(F osc.)/(16(UBRR+1)) so UBBR=77
	 *UBRRL=77=0x4d & UBRRH=0x00*/
	ASSIGN_PORT(UBRRL,0x4d);
    16d8:	e9 e2       	ldi	r30, 0x29	; 41
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	e9 e2       	ldi	r30, 0x29	; 41
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	10 82       	st	Z, r1
    16e4:	a9 e2       	ldi	r26, 0x29	; 41
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	e9 e2       	ldi	r30, 0x29	; 41
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	8d 64       	ori	r24, 0x4D	; 77
    16f0:	8c 93       	st	X, r24
	ASSIGN_PORT(UBRRH,0x00);
    16f2:	e0 e4       	ldi	r30, 0x40	; 64
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	e0 e4       	ldi	r30, 0x40	; 64
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	10 82       	st	Z, r1
    16fe:	a0 e4       	ldi	r26, 0x40	; 64
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	e0 e4       	ldi	r30, 0x40	; 64
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	8c 93       	st	X, r24

	/*for Tx Enable*/
	SET_BIT(UCSRB,3);
    170a:	aa e2       	ldi	r26, 0x2A	; 42
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	ea e2       	ldi	r30, 0x2A	; 42
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	88 60       	ori	r24, 0x08	; 8
    1716:	8c 93       	st	X, r24

	/*for Rx Enable*/
	SET_BIT(UCSRB,4);
    1718:	aa e2       	ldi	r26, 0x2A	; 42
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	ea e2       	ldi	r30, 0x2A	; 42
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	80 61       	ori	r24, 0x10	; 16
    1724:	8c 93       	st	X, r24

#if(INTERRUPT_MODE)
	/*for Tx Complete Interrupt Enable*/
	SET_BIT(UCSRB,6);
    1726:	aa e2       	ldi	r26, 0x2A	; 42
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	ea e2       	ldi	r30, 0x2A	; 42
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	80 64       	ori	r24, 0x40	; 64
    1732:	8c 93       	st	X, r24

	/*for Rx Complete Interrupt Enable*/
	SET_BIT(UCSRB,7);
    1734:	aa e2       	ldi	r26, 0x2A	; 42
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	ea e2       	ldi	r30, 0x2A	; 42
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	80 68       	ori	r24, 0x80	; 128
    1740:	8c 93       	st	X, r24

	/*for global interrupt enable*/
	SET_BIT(SREG,7);
    1742:	af e5       	ldi	r26, 0x5F	; 95
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	ef e5       	ldi	r30, 0x5F	; 95
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	80 68       	ori	r24, 0x80	; 128
    174e:	8c 93       	st	X, r24
#endif

	/*for Character Size*/
	SET_BIT(UCSRC,1);
    1750:	a0 e4       	ldi	r26, 0x40	; 64
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	e0 e4       	ldi	r30, 0x40	; 64
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	82 60       	ori	r24, 0x02	; 2
    175c:	8c 93       	st	X, r24
	SET_BIT(UCSRC,2);
    175e:	a0 e4       	ldi	r26, 0x40	; 64
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	e0 e4       	ldi	r30, 0x40	; 64
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	84 60       	ori	r24, 0x04	; 4
    176a:	8c 93       	st	X, r24
	CLEAR_BIT(UCSRB,2);
    176c:	aa e2       	ldi	r26, 0x2A	; 42
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	ea e2       	ldi	r30, 0x2A	; 42
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	8b 7f       	andi	r24, 0xFB	; 251
    1778:	8c 93       	st	X, r24

	/*for Disable Parity Mode*/
	CLEAR_BIT(UCSRC,4);
    177a:	a0 e4       	ldi	r26, 0x40	; 64
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	e0 e4       	ldi	r30, 0x40	; 64
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	8f 7e       	andi	r24, 0xEF	; 239
    1786:	8c 93       	st	X, r24
	CLEAR_BIT(UCSRC,5);
    1788:	a0 e4       	ldi	r26, 0x40	; 64
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	e0 e4       	ldi	r30, 0x40	; 64
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	8f 7d       	andi	r24, 0xDF	; 223
    1794:	8c 93       	st	X, r24

	/*for setting one stop bit*/
	CLEAR_BIT(UCSRC,3);
    1796:	a0 e4       	ldi	r26, 0x40	; 64
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	e0 e4       	ldi	r30, 0x40	; 64
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	87 7f       	andi	r24, 0xF7	; 247
    17a2:	8c 93       	st	X, r24
}
    17a4:	0f 90       	pop	r0
    17a6:	0f 90       	pop	r0
    17a8:	cf 91       	pop	r28
    17aa:	df 91       	pop	r29
    17ac:	08 95       	ret

000017ae <UART_vidTransmit>:

void UART_vidTransmit(u16 Copy_u16Data)
{
    17ae:	df 93       	push	r29
    17b0:	cf 93       	push	r28
    17b2:	00 d0       	rcall	.+0      	; 0x17b4 <UART_vidTransmit+0x6>
    17b4:	cd b7       	in	r28, 0x3d	; 61
    17b6:	de b7       	in	r29, 0x3e	; 62
    17b8:	9a 83       	std	Y+2, r25	; 0x02
    17ba:	89 83       	std	Y+1, r24	; 0x01
	/*for assigning data to UDR register*/
	UDR=Copy_u16Data;
    17bc:	ec e2       	ldi	r30, 0x2C	; 44
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	89 81       	ldd	r24, Y+1	; 0x01
    17c2:	80 83       	st	Z, r24
	while(GET_BIT(UCSRA,6)==0);

	/*for clearing UART Transmit Complete flag*/
	SET_BIT(UCSRA,6);
#endif
}
    17c4:	0f 90       	pop	r0
    17c6:	0f 90       	pop	r0
    17c8:	cf 91       	pop	r28
    17ca:	df 91       	pop	r29
    17cc:	08 95       	ret

000017ce <UART_vidReceive>:

u16 UART_vidReceive(void)
{
    17ce:	df 93       	push	r29
    17d0:	cf 93       	push	r28
    17d2:	00 d0       	rcall	.+0      	; 0x17d4 <UART_vidReceive+0x6>
    17d4:	cd b7       	in	r28, 0x3d	; 61
    17d6:	de b7       	in	r29, 0x3e	; 62
	/*for reading the received data from the UDR register
	 *and there is no need for clearing Receive Complete flag because it is cleared automatically
	 *when we read data from UDR register*/
	//Local_u16Data=UDR;

	return Local_u16Data;
    17d8:	89 81       	ldd	r24, Y+1	; 0x01
    17da:	9a 81       	ldd	r25, Y+2	; 0x02
}
    17dc:	0f 90       	pop	r0
    17de:	0f 90       	pop	r0
    17e0:	cf 91       	pop	r28
    17e2:	df 91       	pop	r29
    17e4:	08 95       	ret

000017e6 <__vector_15>:
#if(INTERRUPT_MODE)
/*vector number 15 for UART Tx Complete*/
void __vector_15(void) __attribute__((signal,__INTR_ATTRS));

void __vector_15(void)
{
    17e6:	1f 92       	push	r1
    17e8:	0f 92       	push	r0
    17ea:	0f b6       	in	r0, 0x3f	; 63
    17ec:	0f 92       	push	r0
    17ee:	11 24       	eor	r1, r1
    17f0:	2f 93       	push	r18
    17f2:	3f 93       	push	r19
    17f4:	4f 93       	push	r20
    17f6:	5f 93       	push	r21
    17f8:	6f 93       	push	r22
    17fa:	7f 93       	push	r23
    17fc:	8f 93       	push	r24
    17fe:	9f 93       	push	r25
    1800:	af 93       	push	r26
    1802:	bf 93       	push	r27
    1804:	ef 93       	push	r30
    1806:	ff 93       	push	r31
    1808:	df 93       	push	r29
    180a:	cf 93       	push	r28
    180c:	cd b7       	in	r28, 0x3d	; 61
    180e:	de b7       	in	r29, 0x3e	; 62
	PtrLCDInitialization();
    1810:	e0 91 6e 01 	lds	r30, 0x016E
    1814:	f0 91 6f 01 	lds	r31, 0x016F
    1818:	09 95       	icall

	PtrLCDWriteCommand(0x80);
    181a:	e0 91 71 01 	lds	r30, 0x0171
    181e:	f0 91 72 01 	lds	r31, 0x0172
    1822:	80 e8       	ldi	r24, 0x80	; 128
    1824:	09 95       	icall

	PtrLCDWriteData('T');
    1826:	e0 91 73 01 	lds	r30, 0x0173
    182a:	f0 91 74 01 	lds	r31, 0x0174
    182e:	84 e5       	ldi	r24, 0x54	; 84
    1830:	09 95       	icall
	PtrLCDWriteData('r');
    1832:	e0 91 73 01 	lds	r30, 0x0173
    1836:	f0 91 74 01 	lds	r31, 0x0174
    183a:	82 e7       	ldi	r24, 0x72	; 114
    183c:	09 95       	icall
	PtrLCDWriteData('a');
    183e:	e0 91 73 01 	lds	r30, 0x0173
    1842:	f0 91 74 01 	lds	r31, 0x0174
    1846:	81 e6       	ldi	r24, 0x61	; 97
    1848:	09 95       	icall
	PtrLCDWriteData('n');
    184a:	e0 91 73 01 	lds	r30, 0x0173
    184e:	f0 91 74 01 	lds	r31, 0x0174
    1852:	8e e6       	ldi	r24, 0x6E	; 110
    1854:	09 95       	icall
	PtrLCDWriteData('s');
    1856:	e0 91 73 01 	lds	r30, 0x0173
    185a:	f0 91 74 01 	lds	r31, 0x0174
    185e:	83 e7       	ldi	r24, 0x73	; 115
    1860:	09 95       	icall
	PtrLCDWriteData('m');
    1862:	e0 91 73 01 	lds	r30, 0x0173
    1866:	f0 91 74 01 	lds	r31, 0x0174
    186a:	8d e6       	ldi	r24, 0x6D	; 109
    186c:	09 95       	icall
	PtrLCDWriteData('i');
    186e:	e0 91 73 01 	lds	r30, 0x0173
    1872:	f0 91 74 01 	lds	r31, 0x0174
    1876:	89 e6       	ldi	r24, 0x69	; 105
    1878:	09 95       	icall
	PtrLCDWriteData('s');
    187a:	e0 91 73 01 	lds	r30, 0x0173
    187e:	f0 91 74 01 	lds	r31, 0x0174
    1882:	83 e7       	ldi	r24, 0x73	; 115
    1884:	09 95       	icall
	PtrLCDWriteData('s');
    1886:	e0 91 73 01 	lds	r30, 0x0173
    188a:	f0 91 74 01 	lds	r31, 0x0174
    188e:	83 e7       	ldi	r24, 0x73	; 115
    1890:	09 95       	icall
	PtrLCDWriteData('i');
    1892:	e0 91 73 01 	lds	r30, 0x0173
    1896:	f0 91 74 01 	lds	r31, 0x0174
    189a:	89 e6       	ldi	r24, 0x69	; 105
    189c:	09 95       	icall
	PtrLCDWriteData('o');
    189e:	e0 91 73 01 	lds	r30, 0x0173
    18a2:	f0 91 74 01 	lds	r31, 0x0174
    18a6:	8f e6       	ldi	r24, 0x6F	; 111
    18a8:	09 95       	icall
	PtrLCDWriteData('n');
    18aa:	e0 91 73 01 	lds	r30, 0x0173
    18ae:	f0 91 74 01 	lds	r31, 0x0174
    18b2:	8e e6       	ldi	r24, 0x6E	; 110
    18b4:	09 95       	icall

	PtrLCDWriteCommand(0xc0);
    18b6:	e0 91 71 01 	lds	r30, 0x0171
    18ba:	f0 91 72 01 	lds	r31, 0x0172
    18be:	80 ec       	ldi	r24, 0xC0	; 192
    18c0:	09 95       	icall

	PtrLCDWriteData('D');
    18c2:	e0 91 73 01 	lds	r30, 0x0173
    18c6:	f0 91 74 01 	lds	r31, 0x0174
    18ca:	84 e4       	ldi	r24, 0x44	; 68
    18cc:	09 95       	icall
	PtrLCDWriteData('o');
    18ce:	e0 91 73 01 	lds	r30, 0x0173
    18d2:	f0 91 74 01 	lds	r31, 0x0174
    18d6:	8f e6       	ldi	r24, 0x6F	; 111
    18d8:	09 95       	icall
	PtrLCDWriteData('n');
    18da:	e0 91 73 01 	lds	r30, 0x0173
    18de:	f0 91 74 01 	lds	r31, 0x0174
    18e2:	8e e6       	ldi	r24, 0x6E	; 110
    18e4:	09 95       	icall
	PtrLCDWriteData('e');
    18e6:	e0 91 73 01 	lds	r30, 0x0173
    18ea:	f0 91 74 01 	lds	r31, 0x0174
    18ee:	85 e6       	ldi	r24, 0x65	; 101
    18f0:	09 95       	icall

}
    18f2:	cf 91       	pop	r28
    18f4:	df 91       	pop	r29
    18f6:	ff 91       	pop	r31
    18f8:	ef 91       	pop	r30
    18fa:	bf 91       	pop	r27
    18fc:	af 91       	pop	r26
    18fe:	9f 91       	pop	r25
    1900:	8f 91       	pop	r24
    1902:	7f 91       	pop	r23
    1904:	6f 91       	pop	r22
    1906:	5f 91       	pop	r21
    1908:	4f 91       	pop	r20
    190a:	3f 91       	pop	r19
    190c:	2f 91       	pop	r18
    190e:	0f 90       	pop	r0
    1910:	0f be       	out	0x3f, r0	; 63
    1912:	0f 90       	pop	r0
    1914:	1f 90       	pop	r1
    1916:	18 95       	reti

00001918 <__vector_13>:

/*vector number 13 for UART Rx Complete*/
void __vector_13(void) __attribute__((signal,__INTR_ATTRS));

void __vector_13(void)
{
    1918:	1f 92       	push	r1
    191a:	0f 92       	push	r0
    191c:	0f b6       	in	r0, 0x3f	; 63
    191e:	0f 92       	push	r0
    1920:	11 24       	eor	r1, r1
    1922:	2f 93       	push	r18
    1924:	3f 93       	push	r19
    1926:	4f 93       	push	r20
    1928:	5f 93       	push	r21
    192a:	6f 93       	push	r22
    192c:	7f 93       	push	r23
    192e:	8f 93       	push	r24
    1930:	9f 93       	push	r25
    1932:	af 93       	push	r26
    1934:	bf 93       	push	r27
    1936:	ef 93       	push	r30
    1938:	ff 93       	push	r31
    193a:	df 93       	push	r29
    193c:	cf 93       	push	r28
    193e:	cd b7       	in	r28, 0x3d	; 61
    1940:	de b7       	in	r29, 0x3e	; 62
	PtrLCDInitialization();
    1942:	e0 91 6e 01 	lds	r30, 0x016E
    1946:	f0 91 6f 01 	lds	r31, 0x016F
    194a:	09 95       	icall

	Global_u8Data=UDR;
    194c:	ec e2       	ldi	r30, 0x2C	; 44
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	80 93 70 01 	sts	0x0170, r24

	PtrLCDWriteCommand(0x80);
    1956:	e0 91 71 01 	lds	r30, 0x0171
    195a:	f0 91 72 01 	lds	r31, 0x0172
    195e:	80 e8       	ldi	r24, 0x80	; 128
    1960:	09 95       	icall

	PtrLCDWriteData('R');
    1962:	e0 91 73 01 	lds	r30, 0x0173
    1966:	f0 91 74 01 	lds	r31, 0x0174
    196a:	82 e5       	ldi	r24, 0x52	; 82
    196c:	09 95       	icall
	PtrLCDWriteData('e');
    196e:	e0 91 73 01 	lds	r30, 0x0173
    1972:	f0 91 74 01 	lds	r31, 0x0174
    1976:	85 e6       	ldi	r24, 0x65	; 101
    1978:	09 95       	icall
	PtrLCDWriteData('c');
    197a:	e0 91 73 01 	lds	r30, 0x0173
    197e:	f0 91 74 01 	lds	r31, 0x0174
    1982:	83 e6       	ldi	r24, 0x63	; 99
    1984:	09 95       	icall
	PtrLCDWriteData('e');
    1986:	e0 91 73 01 	lds	r30, 0x0173
    198a:	f0 91 74 01 	lds	r31, 0x0174
    198e:	85 e6       	ldi	r24, 0x65	; 101
    1990:	09 95       	icall
	PtrLCDWriteData('i');
    1992:	e0 91 73 01 	lds	r30, 0x0173
    1996:	f0 91 74 01 	lds	r31, 0x0174
    199a:	89 e6       	ldi	r24, 0x69	; 105
    199c:	09 95       	icall
	PtrLCDWriteData('v');
    199e:	e0 91 73 01 	lds	r30, 0x0173
    19a2:	f0 91 74 01 	lds	r31, 0x0174
    19a6:	86 e7       	ldi	r24, 0x76	; 118
    19a8:	09 95       	icall
	PtrLCDWriteData('e');
    19aa:	e0 91 73 01 	lds	r30, 0x0173
    19ae:	f0 91 74 01 	lds	r31, 0x0174
    19b2:	85 e6       	ldi	r24, 0x65	; 101
    19b4:	09 95       	icall
	PtrLCDWriteData('d');
    19b6:	e0 91 73 01 	lds	r30, 0x0173
    19ba:	f0 91 74 01 	lds	r31, 0x0174
    19be:	84 e6       	ldi	r24, 0x64	; 100
    19c0:	09 95       	icall
	PtrLCDWriteData(' ');
    19c2:	e0 91 73 01 	lds	r30, 0x0173
    19c6:	f0 91 74 01 	lds	r31, 0x0174
    19ca:	80 e2       	ldi	r24, 0x20	; 32
    19cc:	09 95       	icall
	PtrLCDWriteData('D');
    19ce:	e0 91 73 01 	lds	r30, 0x0173
    19d2:	f0 91 74 01 	lds	r31, 0x0174
    19d6:	84 e4       	ldi	r24, 0x44	; 68
    19d8:	09 95       	icall
	PtrLCDWriteData('a');
    19da:	e0 91 73 01 	lds	r30, 0x0173
    19de:	f0 91 74 01 	lds	r31, 0x0174
    19e2:	81 e6       	ldi	r24, 0x61	; 97
    19e4:	09 95       	icall
	PtrLCDWriteData('t');
    19e6:	e0 91 73 01 	lds	r30, 0x0173
    19ea:	f0 91 74 01 	lds	r31, 0x0174
    19ee:	84 e7       	ldi	r24, 0x74	; 116
    19f0:	09 95       	icall
	PtrLCDWriteData('a');
    19f2:	e0 91 73 01 	lds	r30, 0x0173
    19f6:	f0 91 74 01 	lds	r31, 0x0174
    19fa:	81 e6       	ldi	r24, 0x61	; 97
    19fc:	09 95       	icall
	PtrLCDWriteData(61);
    19fe:	e0 91 73 01 	lds	r30, 0x0173
    1a02:	f0 91 74 01 	lds	r31, 0x0174
    1a06:	8d e3       	ldi	r24, 0x3D	; 61
    1a08:	09 95       	icall

	PtrLCDWriteCommand(0xc0);
    1a0a:	e0 91 71 01 	lds	r30, 0x0171
    1a0e:	f0 91 72 01 	lds	r31, 0x0172
    1a12:	80 ec       	ldi	r24, 0xC0	; 192
    1a14:	09 95       	icall

	PtrLCDWriteData((Global_u8Data/100)+48);
    1a16:	e0 91 73 01 	lds	r30, 0x0173
    1a1a:	f0 91 74 01 	lds	r31, 0x0174
    1a1e:	80 91 70 01 	lds	r24, 0x0170
    1a22:	94 e6       	ldi	r25, 0x64	; 100
    1a24:	69 2f       	mov	r22, r25
    1a26:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__udivmodqi4>
    1a2a:	80 5d       	subi	r24, 0xD0	; 208
    1a2c:	09 95       	icall
	PtrLCDWriteData(((Global_u8Data%100)/10)+48);
    1a2e:	e0 91 73 01 	lds	r30, 0x0173
    1a32:	f0 91 74 01 	lds	r31, 0x0174
    1a36:	80 91 70 01 	lds	r24, 0x0170
    1a3a:	94 e6       	ldi	r25, 0x64	; 100
    1a3c:	69 2f       	mov	r22, r25
    1a3e:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__udivmodqi4>
    1a42:	89 2f       	mov	r24, r25
    1a44:	9a e0       	ldi	r25, 0x0A	; 10
    1a46:	69 2f       	mov	r22, r25
    1a48:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__udivmodqi4>
    1a4c:	80 5d       	subi	r24, 0xD0	; 208
    1a4e:	09 95       	icall
	PtrLCDWriteData(((Global_u8Data%100)/10)+48);
    1a50:	e0 91 73 01 	lds	r30, 0x0173
    1a54:	f0 91 74 01 	lds	r31, 0x0174
    1a58:	80 91 70 01 	lds	r24, 0x0170
    1a5c:	94 e6       	ldi	r25, 0x64	; 100
    1a5e:	69 2f       	mov	r22, r25
    1a60:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__udivmodqi4>
    1a64:	89 2f       	mov	r24, r25
    1a66:	9a e0       	ldi	r25, 0x0A	; 10
    1a68:	69 2f       	mov	r22, r25
    1a6a:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__udivmodqi4>
    1a6e:	80 5d       	subi	r24, 0xD0	; 208
    1a70:	09 95       	icall
}
    1a72:	cf 91       	pop	r28
    1a74:	df 91       	pop	r29
    1a76:	ff 91       	pop	r31
    1a78:	ef 91       	pop	r30
    1a7a:	bf 91       	pop	r27
    1a7c:	af 91       	pop	r26
    1a7e:	9f 91       	pop	r25
    1a80:	8f 91       	pop	r24
    1a82:	7f 91       	pop	r23
    1a84:	6f 91       	pop	r22
    1a86:	5f 91       	pop	r21
    1a88:	4f 91       	pop	r20
    1a8a:	3f 91       	pop	r19
    1a8c:	2f 91       	pop	r18
    1a8e:	0f 90       	pop	r0
    1a90:	0f be       	out	0x3f, r0	; 63
    1a92:	0f 90       	pop	r0
    1a94:	1f 90       	pop	r1
    1a96:	18 95       	reti

00001a98 <UART_vidSetCallBack1>:
#endif

void UART_vidSetCallBack1(void (*PtrToFunction1)(void))
{
    1a98:	df 93       	push	r29
    1a9a:	cf 93       	push	r28
    1a9c:	00 d0       	rcall	.+0      	; 0x1a9e <UART_vidSetCallBack1+0x6>
    1a9e:	cd b7       	in	r28, 0x3d	; 61
    1aa0:	de b7       	in	r29, 0x3e	; 62
    1aa2:	9a 83       	std	Y+2, r25	; 0x02
    1aa4:	89 83       	std	Y+1, r24	; 0x01
	PtrLCDInitialization=PtrToFunction1;
    1aa6:	89 81       	ldd	r24, Y+1	; 0x01
    1aa8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aaa:	90 93 6f 01 	sts	0x016F, r25
    1aae:	80 93 6e 01 	sts	0x016E, r24
}
    1ab2:	0f 90       	pop	r0
    1ab4:	0f 90       	pop	r0
    1ab6:	cf 91       	pop	r28
    1ab8:	df 91       	pop	r29
    1aba:	08 95       	ret

00001abc <UART_vidSetCallBack2>:

void UART_vidSetCallBack2(void (*PtrToFunction2)(u8 Copy_u8Command))
{
    1abc:	df 93       	push	r29
    1abe:	cf 93       	push	r28
    1ac0:	00 d0       	rcall	.+0      	; 0x1ac2 <UART_vidSetCallBack2+0x6>
    1ac2:	cd b7       	in	r28, 0x3d	; 61
    1ac4:	de b7       	in	r29, 0x3e	; 62
    1ac6:	9a 83       	std	Y+2, r25	; 0x02
    1ac8:	89 83       	std	Y+1, r24	; 0x01
	PtrLCDWriteCommand=PtrToFunction2;
    1aca:	89 81       	ldd	r24, Y+1	; 0x01
    1acc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ace:	90 93 72 01 	sts	0x0172, r25
    1ad2:	80 93 71 01 	sts	0x0171, r24
}
    1ad6:	0f 90       	pop	r0
    1ad8:	0f 90       	pop	r0
    1ada:	cf 91       	pop	r28
    1adc:	df 91       	pop	r29
    1ade:	08 95       	ret

00001ae0 <UART_vidSetCallBack3>:

void UART_vidSetCallBack3(void (*PtrToFunction3)(u8 Copy_u8Data))
{
    1ae0:	df 93       	push	r29
    1ae2:	cf 93       	push	r28
    1ae4:	00 d0       	rcall	.+0      	; 0x1ae6 <UART_vidSetCallBack3+0x6>
    1ae6:	cd b7       	in	r28, 0x3d	; 61
    1ae8:	de b7       	in	r29, 0x3e	; 62
    1aea:	9a 83       	std	Y+2, r25	; 0x02
    1aec:	89 83       	std	Y+1, r24	; 0x01
	PtrLCDWriteData=PtrToFunction3;
    1aee:	89 81       	ldd	r24, Y+1	; 0x01
    1af0:	9a 81       	ldd	r25, Y+2	; 0x02
    1af2:	90 93 74 01 	sts	0x0174, r25
    1af6:	80 93 73 01 	sts	0x0173, r24
}
    1afa:	0f 90       	pop	r0
    1afc:	0f 90       	pop	r0
    1afe:	cf 91       	pop	r28
    1b00:	df 91       	pop	r29
    1b02:	08 95       	ret

00001b04 <main>:
#include "DIO_Interface.h"
#include "UART_Interface.h"
#include "LCD_Interface.h"

int main(void)
{
    1b04:	df 93       	push	r29
    1b06:	cf 93       	push	r28
    1b08:	cd b7       	in	r28, 0x3d	; 61
    1b0a:	de b7       	in	r29, 0x3e	; 62
	LCD_vidUARTInitialization();
    1b0c:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <LCD_vidUARTInitialization>

	UART_vidInitialization();
    1b10:	0e 94 67 0b 	call	0x16ce	; 0x16ce <UART_vidInitialization>

	UART_vidTransmit(255);
    1b14:	8f ef       	ldi	r24, 0xFF	; 255
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <UART_vidTransmit>
    1b1c:	ff cf       	rjmp	.-2      	; 0x1b1c <main+0x18>

00001b1e <__mulsi3>:
    1b1e:	62 9f       	mul	r22, r18
    1b20:	d0 01       	movw	r26, r0
    1b22:	73 9f       	mul	r23, r19
    1b24:	f0 01       	movw	r30, r0
    1b26:	82 9f       	mul	r24, r18
    1b28:	e0 0d       	add	r30, r0
    1b2a:	f1 1d       	adc	r31, r1
    1b2c:	64 9f       	mul	r22, r20
    1b2e:	e0 0d       	add	r30, r0
    1b30:	f1 1d       	adc	r31, r1
    1b32:	92 9f       	mul	r25, r18
    1b34:	f0 0d       	add	r31, r0
    1b36:	83 9f       	mul	r24, r19
    1b38:	f0 0d       	add	r31, r0
    1b3a:	74 9f       	mul	r23, r20
    1b3c:	f0 0d       	add	r31, r0
    1b3e:	65 9f       	mul	r22, r21
    1b40:	f0 0d       	add	r31, r0
    1b42:	99 27       	eor	r25, r25
    1b44:	72 9f       	mul	r23, r18
    1b46:	b0 0d       	add	r27, r0
    1b48:	e1 1d       	adc	r30, r1
    1b4a:	f9 1f       	adc	r31, r25
    1b4c:	63 9f       	mul	r22, r19
    1b4e:	b0 0d       	add	r27, r0
    1b50:	e1 1d       	adc	r30, r1
    1b52:	f9 1f       	adc	r31, r25
    1b54:	bd 01       	movw	r22, r26
    1b56:	cf 01       	movw	r24, r30
    1b58:	11 24       	eor	r1, r1
    1b5a:	08 95       	ret

00001b5c <__udivmodqi4>:
    1b5c:	99 1b       	sub	r25, r25
    1b5e:	79 e0       	ldi	r23, 0x09	; 9
    1b60:	04 c0       	rjmp	.+8      	; 0x1b6a <__udivmodqi4_ep>

00001b62 <__udivmodqi4_loop>:
    1b62:	99 1f       	adc	r25, r25
    1b64:	96 17       	cp	r25, r22
    1b66:	08 f0       	brcs	.+2      	; 0x1b6a <__udivmodqi4_ep>
    1b68:	96 1b       	sub	r25, r22

00001b6a <__udivmodqi4_ep>:
    1b6a:	88 1f       	adc	r24, r24
    1b6c:	7a 95       	dec	r23
    1b6e:	c9 f7       	brne	.-14     	; 0x1b62 <__udivmodqi4_loop>
    1b70:	80 95       	com	r24
    1b72:	08 95       	ret

00001b74 <__prologue_saves__>:
    1b74:	2f 92       	push	r2
    1b76:	3f 92       	push	r3
    1b78:	4f 92       	push	r4
    1b7a:	5f 92       	push	r5
    1b7c:	6f 92       	push	r6
    1b7e:	7f 92       	push	r7
    1b80:	8f 92       	push	r8
    1b82:	9f 92       	push	r9
    1b84:	af 92       	push	r10
    1b86:	bf 92       	push	r11
    1b88:	cf 92       	push	r12
    1b8a:	df 92       	push	r13
    1b8c:	ef 92       	push	r14
    1b8e:	ff 92       	push	r15
    1b90:	0f 93       	push	r16
    1b92:	1f 93       	push	r17
    1b94:	cf 93       	push	r28
    1b96:	df 93       	push	r29
    1b98:	cd b7       	in	r28, 0x3d	; 61
    1b9a:	de b7       	in	r29, 0x3e	; 62
    1b9c:	ca 1b       	sub	r28, r26
    1b9e:	db 0b       	sbc	r29, r27
    1ba0:	0f b6       	in	r0, 0x3f	; 63
    1ba2:	f8 94       	cli
    1ba4:	de bf       	out	0x3e, r29	; 62
    1ba6:	0f be       	out	0x3f, r0	; 63
    1ba8:	cd bf       	out	0x3d, r28	; 61
    1baa:	09 94       	ijmp

00001bac <__epilogue_restores__>:
    1bac:	2a 88       	ldd	r2, Y+18	; 0x12
    1bae:	39 88       	ldd	r3, Y+17	; 0x11
    1bb0:	48 88       	ldd	r4, Y+16	; 0x10
    1bb2:	5f 84       	ldd	r5, Y+15	; 0x0f
    1bb4:	6e 84       	ldd	r6, Y+14	; 0x0e
    1bb6:	7d 84       	ldd	r7, Y+13	; 0x0d
    1bb8:	8c 84       	ldd	r8, Y+12	; 0x0c
    1bba:	9b 84       	ldd	r9, Y+11	; 0x0b
    1bbc:	aa 84       	ldd	r10, Y+10	; 0x0a
    1bbe:	b9 84       	ldd	r11, Y+9	; 0x09
    1bc0:	c8 84       	ldd	r12, Y+8	; 0x08
    1bc2:	df 80       	ldd	r13, Y+7	; 0x07
    1bc4:	ee 80       	ldd	r14, Y+6	; 0x06
    1bc6:	fd 80       	ldd	r15, Y+5	; 0x05
    1bc8:	0c 81       	ldd	r16, Y+4	; 0x04
    1bca:	1b 81       	ldd	r17, Y+3	; 0x03
    1bcc:	aa 81       	ldd	r26, Y+2	; 0x02
    1bce:	b9 81       	ldd	r27, Y+1	; 0x01
    1bd0:	ce 0f       	add	r28, r30
    1bd2:	d1 1d       	adc	r29, r1
    1bd4:	0f b6       	in	r0, 0x3f	; 63
    1bd6:	f8 94       	cli
    1bd8:	de bf       	out	0x3e, r29	; 62
    1bda:	0f be       	out	0x3f, r0	; 63
    1bdc:	cd bf       	out	0x3d, r28	; 61
    1bde:	ed 01       	movw	r28, r26
    1be0:	08 95       	ret

00001be2 <_exit>:
    1be2:	f8 94       	cli

00001be4 <__stop_program>:
    1be4:	ff cf       	rjmp	.-2      	; 0x1be4 <__stop_program>
